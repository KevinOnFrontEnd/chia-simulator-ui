/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/page"],{

/***/ "(app-pages-browser)/./node_modules/chia-wallet-sdk-wasm/chia_wallet_sdk_wasm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chia-wallet-sdk-wasm/chia_wallet_sdk_wasm.js ***!
  \*******************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdditionsAndRemovalsResponse: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AdditionsAndRemovalsResponse),\n/* harmony export */   Address: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Address),\n/* harmony export */   AggSigAmount: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AggSigAmount),\n/* harmony export */   AggSigMe: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AggSigMe),\n/* harmony export */   AggSigParent: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AggSigParent),\n/* harmony export */   AggSigParentAmount: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AggSigParentAmount),\n/* harmony export */   AggSigParentPuzzle: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AggSigParentPuzzle),\n/* harmony export */   AggSigPuzzle: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AggSigPuzzle),\n/* harmony export */   AggSigPuzzleAmount: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AggSigPuzzleAmount),\n/* harmony export */   AggSigUnsafe: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AggSigUnsafe),\n/* harmony export */   AssertBeforeHeightAbsolute: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertBeforeHeightAbsolute),\n/* harmony export */   AssertBeforeHeightRelative: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertBeforeHeightRelative),\n/* harmony export */   AssertBeforeSecondsAbsolute: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertBeforeSecondsAbsolute),\n/* harmony export */   AssertBeforeSecondsRelative: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertBeforeSecondsRelative),\n/* harmony export */   AssertCoinAnnouncement: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertCoinAnnouncement),\n/* harmony export */   AssertConcurrentPuzzle: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertConcurrentPuzzle),\n/* harmony export */   AssertConcurrentSpend: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertConcurrentSpend),\n/* harmony export */   AssertEphemeral: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertEphemeral),\n/* harmony export */   AssertHeightAbsolute: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertHeightAbsolute),\n/* harmony export */   AssertHeightRelative: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertHeightRelative),\n/* harmony export */   AssertMyAmount: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertMyAmount),\n/* harmony export */   AssertMyBirthHeight: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertMyBirthHeight),\n/* harmony export */   AssertMyBirthSeconds: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertMyBirthSeconds),\n/* harmony export */   AssertMyCoinId: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertMyCoinId),\n/* harmony export */   AssertMyParentId: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertMyParentId),\n/* harmony export */   AssertMyPuzzleHash: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertMyPuzzleHash),\n/* harmony export */   AssertPuzzleAnnouncement: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertPuzzleAnnouncement),\n/* harmony export */   AssertSecondsAbsolute: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertSecondsAbsolute),\n/* harmony export */   AssertSecondsRelative: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.AssertSecondsRelative),\n/* harmony export */   BlockRecord: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.BlockRecord),\n/* harmony export */   BlockchainState: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.BlockchainState),\n/* harmony export */   BlockchainStateResponse: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.BlockchainStateResponse),\n/* harmony export */   BlsPair: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.BlsPair),\n/* harmony export */   BlsPairWithCoin: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.BlsPairWithCoin),\n/* harmony export */   Cat: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Cat),\n/* harmony export */   CatInfo: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.CatInfo),\n/* harmony export */   CatSpend: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.CatSpend),\n/* harmony export */   ChallengeChainSubSlot: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.ChallengeChainSubSlot),\n/* harmony export */   Clawback: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Clawback),\n/* harmony export */   ClawbackV2: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.ClawbackV2),\n/* harmony export */   Clvm: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Clvm),\n/* harmony export */   Coin: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Coin),\n/* harmony export */   CoinRecord: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.CoinRecord),\n/* harmony export */   CoinSpend: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.CoinSpend),\n/* harmony export */   CoinsetClient: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.CoinsetClient),\n/* harmony export */   Constants: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Constants),\n/* harmony export */   CreateCoin: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.CreateCoin),\n/* harmony export */   CreateCoinAnnouncement: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.CreateCoinAnnouncement),\n/* harmony export */   CreatePuzzleAnnouncement: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.CreatePuzzleAnnouncement),\n/* harmony export */   CreatedDid: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.CreatedDid),\n/* harmony export */   CurriedProgram: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.CurriedProgram),\n/* harmony export */   Did: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Did),\n/* harmony export */   DidInfo: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.DidInfo),\n/* harmony export */   EndOfSubSlotBundle: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.EndOfSubSlotBundle),\n/* harmony export */   Foliage: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Foliage),\n/* harmony export */   FoliageBlockData: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.FoliageBlockData),\n/* harmony export */   FoliageTransactionBlock: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.FoliageTransactionBlock),\n/* harmony export */   Force1of2RestrictedVariableMemo: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Force1of2RestrictedVariableMemo),\n/* harmony export */   FullBlock: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.FullBlock),\n/* harmony export */   GetBlockRecordResponse: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.GetBlockRecordResponse),\n/* harmony export */   GetBlockRecordsResponse: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.GetBlockRecordsResponse),\n/* harmony export */   GetBlockResponse: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.GetBlockResponse),\n/* harmony export */   GetBlockSpendsResponse: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.GetBlockSpendsResponse),\n/* harmony export */   GetBlocksResponse: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.GetBlocksResponse),\n/* harmony export */   GetCoinRecordResponse: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.GetCoinRecordResponse),\n/* harmony export */   GetCoinRecordsResponse: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.GetCoinRecordsResponse),\n/* harmony export */   GetMempoolItemResponse: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.GetMempoolItemResponse),\n/* harmony export */   GetMempoolItemsResponse: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.GetMempoolItemsResponse),\n/* harmony export */   GetNetworkInfoResponse: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.GetNetworkInfoResponse),\n/* harmony export */   GetPuzzleAndSolutionResponse: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.GetPuzzleAndSolutionResponse),\n/* harmony export */   InfusedChallengeChainSubSlot: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.InfusedChallengeChainSubSlot),\n/* harmony export */   InnerPuzzleMemo: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.InnerPuzzleMemo),\n/* harmony export */   K1Pair: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.K1Pair),\n/* harmony export */   K1PublicKey: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.K1PublicKey),\n/* harmony export */   K1SecretKey: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.K1SecretKey),\n/* harmony export */   K1Signature: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.K1Signature),\n/* harmony export */   LineageProof: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.LineageProof),\n/* harmony export */   MeltSingleton: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.MeltSingleton),\n/* harmony export */   MemberConfig: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.MemberConfig),\n/* harmony export */   MemberMemo: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.MemberMemo),\n/* harmony export */   MemoKind: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.MemoKind),\n/* harmony export */   MempoolItem: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.MempoolItem),\n/* harmony export */   MempoolMinFees: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.MempoolMinFees),\n/* harmony export */   MintedNfts: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.MintedNfts),\n/* harmony export */   MipsMemo: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.MipsMemo),\n/* harmony export */   MipsSpend: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.MipsSpend),\n/* harmony export */   Mnemonic: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Mnemonic),\n/* harmony export */   MofNMemo: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.MofNMemo),\n/* harmony export */   Nft: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Nft),\n/* harmony export */   NftInfo: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.NftInfo),\n/* harmony export */   NftMetadata: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.NftMetadata),\n/* harmony export */   NftMint: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.NftMint),\n/* harmony export */   Output: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Output),\n/* harmony export */   Pair: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Pair),\n/* harmony export */   ParsedCat: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.ParsedCat),\n/* harmony export */   ParsedDid: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.ParsedDid),\n/* harmony export */   ParsedNft: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.ParsedNft),\n/* harmony export */   PoolTarget: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.PoolTarget),\n/* harmony export */   Program: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Program),\n/* harmony export */   Proof: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Proof),\n/* harmony export */   ProofOfSpace: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.ProofOfSpace),\n/* harmony export */   PublicKey: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey),\n/* harmony export */   PushTxResponse: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.PushTxResponse),\n/* harmony export */   Puzzle: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Puzzle),\n/* harmony export */   R1Pair: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.R1Pair),\n/* harmony export */   R1PublicKey: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.R1PublicKey),\n/* harmony export */   R1SecretKey: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.R1SecretKey),\n/* harmony export */   R1Signature: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.R1Signature),\n/* harmony export */   ReceiveMessage: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.ReceiveMessage),\n/* harmony export */   Remark: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Remark),\n/* harmony export */   ReserveFee: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.ReserveFee),\n/* harmony export */   Restriction: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Restriction),\n/* harmony export */   RestrictionKind: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.RestrictionKind),\n/* harmony export */   RestrictionMemo: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.RestrictionMemo),\n/* harmony export */   RewardChainBlock: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.RewardChainBlock),\n/* harmony export */   RewardChainSubSlot: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.RewardChainSubSlot),\n/* harmony export */   RunCatTail: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.RunCatTail),\n/* harmony export */   SecretKey: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.SecretKey),\n/* harmony export */   SendMessage: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.SendMessage),\n/* harmony export */   Signature: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Signature),\n/* harmony export */   Simulator: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Simulator),\n/* harmony export */   Softfork: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Softfork),\n/* harmony export */   Spend: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Spend),\n/* harmony export */   SpendBundle: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.SpendBundle),\n/* harmony export */   StreamedCat: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.StreamedCat),\n/* harmony export */   StreamedCatParsingResult: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.StreamedCatParsingResult),\n/* harmony export */   StreamingPuzzleInfo: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.StreamingPuzzleInfo),\n/* harmony export */   SubEpochSummary: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.SubEpochSummary),\n/* harmony export */   SubSlotProofs: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.SubSlotProofs),\n/* harmony export */   SyncState: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.SyncState),\n/* harmony export */   TradePrice: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.TradePrice),\n/* harmony export */   TransactionsInfo: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.TransactionsInfo),\n/* harmony export */   TransferNft: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.TransferNft),\n/* harmony export */   UpdateDataStoreMerkleRoot: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.UpdateDataStoreMerkleRoot),\n/* harmony export */   UpdateNftMetadata: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.UpdateNftMetadata),\n/* harmony export */   VDFInfo: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.VDFInfo),\n/* harmony export */   VDFProof: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.VDFProof),\n/* harmony export */   Vault: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.Vault),\n/* harmony export */   VaultMint: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.VaultMint),\n/* harmony export */   WrapperMemo: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.WrapperMemo),\n/* harmony export */   __wbg_BigInt_ddea6d2f55558acb: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_BigInt_ddea6d2f55558acb),\n/* harmony export */   __wbg_abort_410ec47a64ac6117: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_abort_410ec47a64ac6117),\n/* harmony export */   __wbg_abort_775ef1d17fc65868: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_abort_775ef1d17fc65868),\n/* harmony export */   __wbg_additionsandremovalsresponse_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_additionsandremovalsresponse_new),\n/* harmony export */   __wbg_append_8c7dd8d641a5f01b: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_append_8c7dd8d641a5f01b),\n/* harmony export */   __wbg_arrayBuffer_d1b44c4390db422f: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_arrayBuffer_d1b44c4390db422f),\n/* harmony export */   __wbg_blockchainstateresponse_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_blockchainstateresponse_new),\n/* harmony export */   __wbg_blockrecord_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_blockrecord_new),\n/* harmony export */   __wbg_blockrecord_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_blockrecord_unwrap),\n/* harmony export */   __wbg_blspair_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_blspair_new),\n/* harmony export */   __wbg_buffer_609cc3eee51ed158: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_buffer_609cc3eee51ed158),\n/* harmony export */   __wbg_call_672a4d21634d4a24: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_call_672a4d21634d4a24),\n/* harmony export */   __wbg_call_7cccdd69e0791ae2: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_call_7cccdd69e0791ae2),\n/* harmony export */   __wbg_cat_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_cat_new),\n/* harmony export */   __wbg_catspend_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_catspend_unwrap),\n/* harmony export */   __wbg_clawback_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_clawback_new),\n/* harmony export */   __wbg_clearTimeout_b1115618e821c3b2: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_clearTimeout_b1115618e821c3b2),\n/* harmony export */   __wbg_coin_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_coin_new),\n/* harmony export */   __wbg_coin_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_coin_unwrap),\n/* harmony export */   __wbg_coinrecord_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_coinrecord_new),\n/* harmony export */   __wbg_coinrecord_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_coinrecord_unwrap),\n/* harmony export */   __wbg_coinspend_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_coinspend_new),\n/* harmony export */   __wbg_coinspend_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_coinspend_unwrap),\n/* harmony export */   __wbg_crypto_ed58b8e10a292839: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_crypto_ed58b8e10a292839),\n/* harmony export */   __wbg_done_769e5ede4b31c67b: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_done_769e5ede4b31c67b),\n/* harmony export */   __wbg_endofsubslotbundle_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_endofsubslotbundle_new),\n/* harmony export */   __wbg_endofsubslotbundle_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_endofsubslotbundle_unwrap),\n/* harmony export */   __wbg_fetch_3afbdcc7ddbf16fe: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_fetch_3afbdcc7ddbf16fe),\n/* harmony export */   __wbg_fetch_509096533071c657: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_fetch_509096533071c657),\n/* harmony export */   __wbg_fullblock_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_fullblock_new),\n/* harmony export */   __wbg_fullblock_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_fullblock_unwrap),\n/* harmony export */   __wbg_getRandomValues_bcb4912f16000dc4: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_getRandomValues_bcb4912f16000dc4),\n/* harmony export */   __wbg_get_67b2ba62fc30de12: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_get_67b2ba62fc30de12),\n/* harmony export */   __wbg_getblockrecordresponse_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_getblockrecordresponse_new),\n/* harmony export */   __wbg_getblockrecordsresponse_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_getblockrecordsresponse_new),\n/* harmony export */   __wbg_getblockresponse_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_getblockresponse_new),\n/* harmony export */   __wbg_getblockspendsresponse_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_getblockspendsresponse_new),\n/* harmony export */   __wbg_getblocksresponse_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_getblocksresponse_new),\n/* harmony export */   __wbg_getcoinrecordresponse_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_getcoinrecordresponse_new),\n/* harmony export */   __wbg_getcoinrecordsresponse_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_getcoinrecordsresponse_new),\n/* harmony export */   __wbg_getmempoolitemresponse_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_getmempoolitemresponse_new),\n/* harmony export */   __wbg_getmempoolitemsresponse_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_getmempoolitemsresponse_new),\n/* harmony export */   __wbg_getnetworkinforesponse_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_getnetworkinforesponse_new),\n/* harmony export */   __wbg_getpuzzleandsolutionresponse_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_getpuzzleandsolutionresponse_new),\n/* harmony export */   __wbg_has_a5ea9117f258a0ec: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_has_a5ea9117f258a0ec),\n/* harmony export */   __wbg_headers_9cb51cfd2ac780a4: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_headers_9cb51cfd2ac780a4),\n/* harmony export */   __wbg_innerpuzzlememo_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_innerpuzzlememo_new),\n/* harmony export */   __wbg_innerpuzzlememo_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_innerpuzzlememo_unwrap),\n/* harmony export */   __wbg_instanceof_Response_f2cc20d9f7dfd644: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_instanceof_Response_f2cc20d9f7dfd644),\n/* harmony export */   __wbg_iterator_9a24c88df860dc65: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_iterator_9a24c88df860dc65),\n/* harmony export */   __wbg_k1pair_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_k1pair_new),\n/* harmony export */   __wbg_length_a446193dc22c12f8: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_length_a446193dc22c12f8),\n/* harmony export */   __wbg_mempoolitem_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_mempoolitem_new),\n/* harmony export */   __wbg_mempoolitem_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_mempoolitem_unwrap),\n/* harmony export */   __wbg_msCrypto_0a36e2ec3a343d26: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_msCrypto_0a36e2ec3a343d26),\n/* harmony export */   __wbg_new_018dcc2d6c8c2f6a: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_new_018dcc2d6c8c2f6a),\n/* harmony export */   __wbg_new_23a2665fac83c611: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_new_23a2665fac83c611),\n/* harmony export */   __wbg_new_405e22f390576ce2: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_new_405e22f390576ce2),\n/* harmony export */   __wbg_new_78feb108b6472713: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_new_78feb108b6472713),\n/* harmony export */   __wbg_new_a12002a7f91c75be: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_new_a12002a7f91c75be),\n/* harmony export */   __wbg_new_e25e5aab09ff45db: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_new_e25e5aab09ff45db),\n/* harmony export */   __wbg_newnoargs_105ed471475aaf50: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_newnoargs_105ed471475aaf50),\n/* harmony export */   __wbg_newwithbyteoffsetandlength_d97e637ebe145a9a: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a),\n/* harmony export */   __wbg_newwithlength_a381634e90c276d4: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_newwithlength_a381634e90c276d4),\n/* harmony export */   __wbg_newwithstrandinit_06c535e0a867c635: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_newwithstrandinit_06c535e0a867c635),\n/* harmony export */   __wbg_next_25feadfc0913fea9: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_next_25feadfc0913fea9),\n/* harmony export */   __wbg_next_6574e1a8a62d1055: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_next_6574e1a8a62d1055),\n/* harmony export */   __wbg_nft_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_nft_new),\n/* harmony export */   __wbg_nft_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_nft_unwrap),\n/* harmony export */   __wbg_nftmint_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_nftmint_unwrap),\n/* harmony export */   __wbg_node_02999533c4ea02e3: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_node_02999533c4ea02e3),\n/* harmony export */   __wbg_process_5c1d670bc53614b8: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_process_5c1d670bc53614b8),\n/* harmony export */   __wbg_program_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_program_new),\n/* harmony export */   __wbg_program_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_program_unwrap),\n/* harmony export */   __wbg_publickey_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_publickey_unwrap),\n/* harmony export */   __wbg_push_737cfc8c1432c2c6: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_push_737cfc8c1432c2c6),\n/* harmony export */   __wbg_pushtxresponse_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_pushtxresponse_new),\n/* harmony export */   __wbg_queueMicrotask_97d92b4fcc8a61c5: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_queueMicrotask_97d92b4fcc8a61c5),\n/* harmony export */   __wbg_queueMicrotask_d3219def82552485: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_queueMicrotask_d3219def82552485),\n/* harmony export */   __wbg_r1pair_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_r1pair_new),\n/* harmony export */   __wbg_randomFillSync_ab2cfe79ebbf2740: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_randomFillSync_ab2cfe79ebbf2740),\n/* harmony export */   __wbg_require_79b1e9274cde3c87: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_require_79b1e9274cde3c87),\n/* harmony export */   __wbg_resolve_4851785c9c5f573d: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_resolve_4851785c9c5f573d),\n/* harmony export */   __wbg_restriction_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_restriction_new),\n/* harmony export */   __wbg_restriction_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_restriction_unwrap),\n/* harmony export */   __wbg_restrictionmemo_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_restrictionmemo_new),\n/* harmony export */   __wbg_restrictionmemo_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_restrictionmemo_unwrap),\n/* harmony export */   __wbg_secretkey_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_secretkey_unwrap),\n/* harmony export */   __wbg_setTimeout_ca12ead8b48245e2: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_setTimeout_ca12ead8b48245e2),\n/* harmony export */   __wbg_set_65595bdd868b3009: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_set_65595bdd868b3009),\n/* harmony export */   __wbg_set_wasm: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_set_wasm),\n/* harmony export */   __wbg_setbody_5923b78a95eedf29: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_setbody_5923b78a95eedf29),\n/* harmony export */   __wbg_setcredentials_c3a22f1cd105a2c6: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_setcredentials_c3a22f1cd105a2c6),\n/* harmony export */   __wbg_setheaders_834c0bdb6a8949ad: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_setheaders_834c0bdb6a8949ad),\n/* harmony export */   __wbg_setmethod_3c5280fe5d890842: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_setmethod_3c5280fe5d890842),\n/* harmony export */   __wbg_setmode_5dc300b865044b65: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_setmode_5dc300b865044b65),\n/* harmony export */   __wbg_setsignal_75b21ef3a81de905: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_setsignal_75b21ef3a81de905),\n/* harmony export */   __wbg_signal_aaf9ad74119f20a4: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_signal_aaf9ad74119f20a4),\n/* harmony export */   __wbg_signature_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_signature_unwrap),\n/* harmony export */   __wbg_static_accessor_GLOBAL_88a902d13a557d07: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_static_accessor_GLOBAL_88a902d13a557d07),\n/* harmony export */   __wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0),\n/* harmony export */   __wbg_static_accessor_SELF_37c5d418e4bf5819: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_static_accessor_SELF_37c5d418e4bf5819),\n/* harmony export */   __wbg_static_accessor_WINDOW_5de37043a91a9c40: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_static_accessor_WINDOW_5de37043a91a9c40),\n/* harmony export */   __wbg_status_f6360336ca686bf0: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_status_f6360336ca686bf0),\n/* harmony export */   __wbg_stringify_f7ed6987935b4a24: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_stringify_f7ed6987935b4a24),\n/* harmony export */   __wbg_subarray_aa9065fa9dc5df96: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_subarray_aa9065fa9dc5df96),\n/* harmony export */   __wbg_then_44b73946d2fb3e7d: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_then_44b73946d2fb3e7d),\n/* harmony export */   __wbg_then_48b406749878a531: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_then_48b406749878a531),\n/* harmony export */   __wbg_toString_b5d4438bc26b267c: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_toString_b5d4438bc26b267c),\n/* harmony export */   __wbg_tradeprice_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_tradeprice_new),\n/* harmony export */   __wbg_tradeprice_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_tradeprice_unwrap),\n/* harmony export */   __wbg_url_ae10c34ca209681d: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_url_ae10c34ca209681d),\n/* harmony export */   __wbg_value_cd1ffa7b1ab794f1: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_value_cd1ffa7b1ab794f1),\n/* harmony export */   __wbg_values_99f7a68c7f313d66: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_values_99f7a68c7f313d66),\n/* harmony export */   __wbg_versions_c71aa1626a93e0a1: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_versions_c71aa1626a93e0a1),\n/* harmony export */   __wbg_wrappermemo_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_wrappermemo_new),\n/* harmony export */   __wbg_wrappermemo_unwrap: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_wrappermemo_unwrap),\n/* harmony export */   __wbindgen_bigint_from_u128: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_bigint_from_u128),\n/* harmony export */   __wbindgen_bigint_from_u64: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_bigint_from_u64),\n/* harmony export */   __wbindgen_cb_drop: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_cb_drop),\n/* harmony export */   __wbindgen_closure_wrapper4648: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_closure_wrapper4648),\n/* harmony export */   __wbindgen_closure_wrapper4750: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_closure_wrapper4750),\n/* harmony export */   __wbindgen_debug_string: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_debug_string),\n/* harmony export */   __wbindgen_error_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_error_new),\n/* harmony export */   __wbindgen_is_function: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_is_function),\n/* harmony export */   __wbindgen_is_object: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_is_object),\n/* harmony export */   __wbindgen_is_string: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_is_string),\n/* harmony export */   __wbindgen_is_undefined: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_is_undefined),\n/* harmony export */   __wbindgen_memory: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_memory),\n/* harmony export */   __wbindgen_object_clone_ref: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_object_clone_ref),\n/* harmony export */   __wbindgen_object_drop_ref: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_object_drop_ref),\n/* harmony export */   __wbindgen_string_get: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_string_get),\n/* harmony export */   __wbindgen_string_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_string_new),\n/* harmony export */   __wbindgen_throw: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_throw),\n/* harmony export */   __wbindgen_uint8_array_new: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_uint8_array_new),\n/* harmony export */   blsMemberHash: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.blsMemberHash),\n/* harmony export */   bytesEqual: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.bytesEqual),\n/* harmony export */   catPuzzleHash: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.catPuzzleHash),\n/* harmony export */   curryTreeHash: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.curryTreeHash),\n/* harmony export */   customMemberHash: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.customMemberHash),\n/* harmony export */   decodeOffer: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.decodeOffer),\n/* harmony export */   encodeOffer: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.encodeOffer),\n/* harmony export */   fixedMemberHash: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.fixedMemberHash),\n/* harmony export */   force1Of2Restriction: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.force1Of2Restriction),\n/* harmony export */   fromHex: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.fromHex),\n/* harmony export */   generateBytes: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.generateBytes),\n/* harmony export */   k1MemberHash: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.k1MemberHash),\n/* harmony export */   mOfNHash: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.mOfNHash),\n/* harmony export */   passkeyMemberHash: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.passkeyMemberHash),\n/* harmony export */   preventConditionOpcodeRestriction: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.preventConditionOpcodeRestriction),\n/* harmony export */   preventMultipleCreateCoinsRestriction: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.preventMultipleCreateCoinsRestriction),\n/* harmony export */   preventVaultSideEffectsRestriction: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.preventVaultSideEffectsRestriction),\n/* harmony export */   r1MemberHash: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.r1MemberHash),\n/* harmony export */   sha256: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.sha256),\n/* harmony export */   singletonMemberHash: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.singletonMemberHash),\n/* harmony export */   standardPuzzleHash: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.standardPuzzleHash),\n/* harmony export */   timelockRestriction: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.timelockRestriction),\n/* harmony export */   toHex: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.toHex),\n/* harmony export */   treeHashAtom: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.treeHashAtom),\n/* harmony export */   treeHashPair: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.treeHashPair),\n/* harmony export */   wrappedDelegatedPuzzleHash: () => (/* reexport safe */ _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.wrappedDelegatedPuzzleHash)\n/* harmony export */ });\n/* harmony import */ var _chia_wallet_sdk_wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chia_wallet_sdk_wasm_bg.wasm */ \"(app-pages-browser)/./node_modules/chia-wallet-sdk-wasm/chia_wallet_sdk_wasm_bg.wasm\");\n/* harmony import */ var _chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chia_wallet_sdk_wasm_bg.js */ \"(app-pages-browser)/./node_modules/chia-wallet-sdk-wasm/chia_wallet_sdk_wasm_bg.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_chia_wallet_sdk_wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_1__]);\n_chia_wallet_sdk_wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n(0,_chia_wallet_sdk_wasm_bg_js__WEBPACK_IMPORTED_MODULE_0__.__wbg_set_wasm)(_chia_wallet_sdk_wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_1__);\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jaGlhLXdhbGxldC1zZGstd2FzbS9jaGlhX3dhbGxldF9zZGtfd2FzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBdUQ7QUFDVjtBQUNpQjtBQUM5RCwyRUFBYyxDQUFDLDBEQUFJLEUiLCJzb3VyY2VzIjpbIi9ob21lL2tldi9yZXBvcy9PU1MvY2hpYS1zaW11bGF0b3ItdWkvc2ltdWxhdG9yLXVpL25vZGVfbW9kdWxlcy9jaGlhLXdhbGxldC1zZGstd2FzbS9jaGlhX3dhbGxldF9zZGtfd2FzbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB3YXNtIGZyb20gXCIuL2NoaWFfd2FsbGV0X3Nka193YXNtX2JnLndhc21cIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NoaWFfd2FsbGV0X3Nka193YXNtX2JnLmpzXCI7XG5pbXBvcnQgeyBfX3diZ19zZXRfd2FzbSB9IGZyb20gXCIuL2NoaWFfd2FsbGV0X3Nka193YXNtX2JnLmpzXCI7XG5fX3diZ19zZXRfd2FzbSh3YXNtKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/chia-wallet-sdk-wasm/chia_wallet_sdk_wasm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/chia-wallet-sdk-wasm/chia_wallet_sdk_wasm_bg.js":
/*!**********************************************************************!*\
  !*** ./node_modules/chia-wallet-sdk-wasm/chia_wallet_sdk_wasm_bg.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdditionsAndRemovalsResponse: () => (/* binding */ AdditionsAndRemovalsResponse),\n/* harmony export */   Address: () => (/* binding */ Address),\n/* harmony export */   AggSigAmount: () => (/* binding */ AggSigAmount),\n/* harmony export */   AggSigMe: () => (/* binding */ AggSigMe),\n/* harmony export */   AggSigParent: () => (/* binding */ AggSigParent),\n/* harmony export */   AggSigParentAmount: () => (/* binding */ AggSigParentAmount),\n/* harmony export */   AggSigParentPuzzle: () => (/* binding */ AggSigParentPuzzle),\n/* harmony export */   AggSigPuzzle: () => (/* binding */ AggSigPuzzle),\n/* harmony export */   AggSigPuzzleAmount: () => (/* binding */ AggSigPuzzleAmount),\n/* harmony export */   AggSigUnsafe: () => (/* binding */ AggSigUnsafe),\n/* harmony export */   AssertBeforeHeightAbsolute: () => (/* binding */ AssertBeforeHeightAbsolute),\n/* harmony export */   AssertBeforeHeightRelative: () => (/* binding */ AssertBeforeHeightRelative),\n/* harmony export */   AssertBeforeSecondsAbsolute: () => (/* binding */ AssertBeforeSecondsAbsolute),\n/* harmony export */   AssertBeforeSecondsRelative: () => (/* binding */ AssertBeforeSecondsRelative),\n/* harmony export */   AssertCoinAnnouncement: () => (/* binding */ AssertCoinAnnouncement),\n/* harmony export */   AssertConcurrentPuzzle: () => (/* binding */ AssertConcurrentPuzzle),\n/* harmony export */   AssertConcurrentSpend: () => (/* binding */ AssertConcurrentSpend),\n/* harmony export */   AssertEphemeral: () => (/* binding */ AssertEphemeral),\n/* harmony export */   AssertHeightAbsolute: () => (/* binding */ AssertHeightAbsolute),\n/* harmony export */   AssertHeightRelative: () => (/* binding */ AssertHeightRelative),\n/* harmony export */   AssertMyAmount: () => (/* binding */ AssertMyAmount),\n/* harmony export */   AssertMyBirthHeight: () => (/* binding */ AssertMyBirthHeight),\n/* harmony export */   AssertMyBirthSeconds: () => (/* binding */ AssertMyBirthSeconds),\n/* harmony export */   AssertMyCoinId: () => (/* binding */ AssertMyCoinId),\n/* harmony export */   AssertMyParentId: () => (/* binding */ AssertMyParentId),\n/* harmony export */   AssertMyPuzzleHash: () => (/* binding */ AssertMyPuzzleHash),\n/* harmony export */   AssertPuzzleAnnouncement: () => (/* binding */ AssertPuzzleAnnouncement),\n/* harmony export */   AssertSecondsAbsolute: () => (/* binding */ AssertSecondsAbsolute),\n/* harmony export */   AssertSecondsRelative: () => (/* binding */ AssertSecondsRelative),\n/* harmony export */   BlockRecord: () => (/* binding */ BlockRecord),\n/* harmony export */   BlockchainState: () => (/* binding */ BlockchainState),\n/* harmony export */   BlockchainStateResponse: () => (/* binding */ BlockchainStateResponse),\n/* harmony export */   BlsPair: () => (/* binding */ BlsPair),\n/* harmony export */   BlsPairWithCoin: () => (/* binding */ BlsPairWithCoin),\n/* harmony export */   Cat: () => (/* binding */ Cat),\n/* harmony export */   CatInfo: () => (/* binding */ CatInfo),\n/* harmony export */   CatSpend: () => (/* binding */ CatSpend),\n/* harmony export */   ChallengeChainSubSlot: () => (/* binding */ ChallengeChainSubSlot),\n/* harmony export */   Clawback: () => (/* binding */ Clawback),\n/* harmony export */   ClawbackV2: () => (/* binding */ ClawbackV2),\n/* harmony export */   Clvm: () => (/* binding */ Clvm),\n/* harmony export */   Coin: () => (/* binding */ Coin),\n/* harmony export */   CoinRecord: () => (/* binding */ CoinRecord),\n/* harmony export */   CoinSpend: () => (/* binding */ CoinSpend),\n/* harmony export */   CoinsetClient: () => (/* binding */ CoinsetClient),\n/* harmony export */   Constants: () => (/* binding */ Constants),\n/* harmony export */   CreateCoin: () => (/* binding */ CreateCoin),\n/* harmony export */   CreateCoinAnnouncement: () => (/* binding */ CreateCoinAnnouncement),\n/* harmony export */   CreatePuzzleAnnouncement: () => (/* binding */ CreatePuzzleAnnouncement),\n/* harmony export */   CreatedDid: () => (/* binding */ CreatedDid),\n/* harmony export */   CurriedProgram: () => (/* binding */ CurriedProgram),\n/* harmony export */   Did: () => (/* binding */ Did),\n/* harmony export */   DidInfo: () => (/* binding */ DidInfo),\n/* harmony export */   EndOfSubSlotBundle: () => (/* binding */ EndOfSubSlotBundle),\n/* harmony export */   Foliage: () => (/* binding */ Foliage),\n/* harmony export */   FoliageBlockData: () => (/* binding */ FoliageBlockData),\n/* harmony export */   FoliageTransactionBlock: () => (/* binding */ FoliageTransactionBlock),\n/* harmony export */   Force1of2RestrictedVariableMemo: () => (/* binding */ Force1of2RestrictedVariableMemo),\n/* harmony export */   FullBlock: () => (/* binding */ FullBlock),\n/* harmony export */   GetBlockRecordResponse: () => (/* binding */ GetBlockRecordResponse),\n/* harmony export */   GetBlockRecordsResponse: () => (/* binding */ GetBlockRecordsResponse),\n/* harmony export */   GetBlockResponse: () => (/* binding */ GetBlockResponse),\n/* harmony export */   GetBlockSpendsResponse: () => (/* binding */ GetBlockSpendsResponse),\n/* harmony export */   GetBlocksResponse: () => (/* binding */ GetBlocksResponse),\n/* harmony export */   GetCoinRecordResponse: () => (/* binding */ GetCoinRecordResponse),\n/* harmony export */   GetCoinRecordsResponse: () => (/* binding */ GetCoinRecordsResponse),\n/* harmony export */   GetMempoolItemResponse: () => (/* binding */ GetMempoolItemResponse),\n/* harmony export */   GetMempoolItemsResponse: () => (/* binding */ GetMempoolItemsResponse),\n/* harmony export */   GetNetworkInfoResponse: () => (/* binding */ GetNetworkInfoResponse),\n/* harmony export */   GetPuzzleAndSolutionResponse: () => (/* binding */ GetPuzzleAndSolutionResponse),\n/* harmony export */   InfusedChallengeChainSubSlot: () => (/* binding */ InfusedChallengeChainSubSlot),\n/* harmony export */   InnerPuzzleMemo: () => (/* binding */ InnerPuzzleMemo),\n/* harmony export */   K1Pair: () => (/* binding */ K1Pair),\n/* harmony export */   K1PublicKey: () => (/* binding */ K1PublicKey),\n/* harmony export */   K1SecretKey: () => (/* binding */ K1SecretKey),\n/* harmony export */   K1Signature: () => (/* binding */ K1Signature),\n/* harmony export */   LineageProof: () => (/* binding */ LineageProof),\n/* harmony export */   MeltSingleton: () => (/* binding */ MeltSingleton),\n/* harmony export */   MemberConfig: () => (/* binding */ MemberConfig),\n/* harmony export */   MemberMemo: () => (/* binding */ MemberMemo),\n/* harmony export */   MemoKind: () => (/* binding */ MemoKind),\n/* harmony export */   MempoolItem: () => (/* binding */ MempoolItem),\n/* harmony export */   MempoolMinFees: () => (/* binding */ MempoolMinFees),\n/* harmony export */   MintedNfts: () => (/* binding */ MintedNfts),\n/* harmony export */   MipsMemo: () => (/* binding */ MipsMemo),\n/* harmony export */   MipsSpend: () => (/* binding */ MipsSpend),\n/* harmony export */   Mnemonic: () => (/* binding */ Mnemonic),\n/* harmony export */   MofNMemo: () => (/* binding */ MofNMemo),\n/* harmony export */   Nft: () => (/* binding */ Nft),\n/* harmony export */   NftInfo: () => (/* binding */ NftInfo),\n/* harmony export */   NftMetadata: () => (/* binding */ NftMetadata),\n/* harmony export */   NftMint: () => (/* binding */ NftMint),\n/* harmony export */   Output: () => (/* binding */ Output),\n/* harmony export */   Pair: () => (/* binding */ Pair),\n/* harmony export */   ParsedCat: () => (/* binding */ ParsedCat),\n/* harmony export */   ParsedDid: () => (/* binding */ ParsedDid),\n/* harmony export */   ParsedNft: () => (/* binding */ ParsedNft),\n/* harmony export */   PoolTarget: () => (/* binding */ PoolTarget),\n/* harmony export */   Program: () => (/* binding */ Program),\n/* harmony export */   Proof: () => (/* binding */ Proof),\n/* harmony export */   ProofOfSpace: () => (/* binding */ ProofOfSpace),\n/* harmony export */   PublicKey: () => (/* binding */ PublicKey),\n/* harmony export */   PushTxResponse: () => (/* binding */ PushTxResponse),\n/* harmony export */   Puzzle: () => (/* binding */ Puzzle),\n/* harmony export */   R1Pair: () => (/* binding */ R1Pair),\n/* harmony export */   R1PublicKey: () => (/* binding */ R1PublicKey),\n/* harmony export */   R1SecretKey: () => (/* binding */ R1SecretKey),\n/* harmony export */   R1Signature: () => (/* binding */ R1Signature),\n/* harmony export */   ReceiveMessage: () => (/* binding */ ReceiveMessage),\n/* harmony export */   Remark: () => (/* binding */ Remark),\n/* harmony export */   ReserveFee: () => (/* binding */ ReserveFee),\n/* harmony export */   Restriction: () => (/* binding */ Restriction),\n/* harmony export */   RestrictionKind: () => (/* binding */ RestrictionKind),\n/* harmony export */   RestrictionMemo: () => (/* binding */ RestrictionMemo),\n/* harmony export */   RewardChainBlock: () => (/* binding */ RewardChainBlock),\n/* harmony export */   RewardChainSubSlot: () => (/* binding */ RewardChainSubSlot),\n/* harmony export */   RunCatTail: () => (/* binding */ RunCatTail),\n/* harmony export */   SecretKey: () => (/* binding */ SecretKey),\n/* harmony export */   SendMessage: () => (/* binding */ SendMessage),\n/* harmony export */   Signature: () => (/* binding */ Signature),\n/* harmony export */   Simulator: () => (/* binding */ Simulator),\n/* harmony export */   Softfork: () => (/* binding */ Softfork),\n/* harmony export */   Spend: () => (/* binding */ Spend),\n/* harmony export */   SpendBundle: () => (/* binding */ SpendBundle),\n/* harmony export */   StreamedCat: () => (/* binding */ StreamedCat),\n/* harmony export */   StreamedCatParsingResult: () => (/* binding */ StreamedCatParsingResult),\n/* harmony export */   StreamingPuzzleInfo: () => (/* binding */ StreamingPuzzleInfo),\n/* harmony export */   SubEpochSummary: () => (/* binding */ SubEpochSummary),\n/* harmony export */   SubSlotProofs: () => (/* binding */ SubSlotProofs),\n/* harmony export */   SyncState: () => (/* binding */ SyncState),\n/* harmony export */   TradePrice: () => (/* binding */ TradePrice),\n/* harmony export */   TransactionsInfo: () => (/* binding */ TransactionsInfo),\n/* harmony export */   TransferNft: () => (/* binding */ TransferNft),\n/* harmony export */   UpdateDataStoreMerkleRoot: () => (/* binding */ UpdateDataStoreMerkleRoot),\n/* harmony export */   UpdateNftMetadata: () => (/* binding */ UpdateNftMetadata),\n/* harmony export */   VDFInfo: () => (/* binding */ VDFInfo),\n/* harmony export */   VDFProof: () => (/* binding */ VDFProof),\n/* harmony export */   Vault: () => (/* binding */ Vault),\n/* harmony export */   VaultMint: () => (/* binding */ VaultMint),\n/* harmony export */   WrapperMemo: () => (/* binding */ WrapperMemo),\n/* harmony export */   __wbg_BigInt_ddea6d2f55558acb: () => (/* binding */ __wbg_BigInt_ddea6d2f55558acb),\n/* harmony export */   __wbg_abort_410ec47a64ac6117: () => (/* binding */ __wbg_abort_410ec47a64ac6117),\n/* harmony export */   __wbg_abort_775ef1d17fc65868: () => (/* binding */ __wbg_abort_775ef1d17fc65868),\n/* harmony export */   __wbg_additionsandremovalsresponse_new: () => (/* binding */ __wbg_additionsandremovalsresponse_new),\n/* harmony export */   __wbg_append_8c7dd8d641a5f01b: () => (/* binding */ __wbg_append_8c7dd8d641a5f01b),\n/* harmony export */   __wbg_arrayBuffer_d1b44c4390db422f: () => (/* binding */ __wbg_arrayBuffer_d1b44c4390db422f),\n/* harmony export */   __wbg_blockchainstateresponse_new: () => (/* binding */ __wbg_blockchainstateresponse_new),\n/* harmony export */   __wbg_blockrecord_new: () => (/* binding */ __wbg_blockrecord_new),\n/* harmony export */   __wbg_blockrecord_unwrap: () => (/* binding */ __wbg_blockrecord_unwrap),\n/* harmony export */   __wbg_blspair_new: () => (/* binding */ __wbg_blspair_new),\n/* harmony export */   __wbg_buffer_609cc3eee51ed158: () => (/* binding */ __wbg_buffer_609cc3eee51ed158),\n/* harmony export */   __wbg_call_672a4d21634d4a24: () => (/* binding */ __wbg_call_672a4d21634d4a24),\n/* harmony export */   __wbg_call_7cccdd69e0791ae2: () => (/* binding */ __wbg_call_7cccdd69e0791ae2),\n/* harmony export */   __wbg_cat_new: () => (/* binding */ __wbg_cat_new),\n/* harmony export */   __wbg_catspend_unwrap: () => (/* binding */ __wbg_catspend_unwrap),\n/* harmony export */   __wbg_clawback_new: () => (/* binding */ __wbg_clawback_new),\n/* harmony export */   __wbg_clearTimeout_b1115618e821c3b2: () => (/* binding */ __wbg_clearTimeout_b1115618e821c3b2),\n/* harmony export */   __wbg_coin_new: () => (/* binding */ __wbg_coin_new),\n/* harmony export */   __wbg_coin_unwrap: () => (/* binding */ __wbg_coin_unwrap),\n/* harmony export */   __wbg_coinrecord_new: () => (/* binding */ __wbg_coinrecord_new),\n/* harmony export */   __wbg_coinrecord_unwrap: () => (/* binding */ __wbg_coinrecord_unwrap),\n/* harmony export */   __wbg_coinspend_new: () => (/* binding */ __wbg_coinspend_new),\n/* harmony export */   __wbg_coinspend_unwrap: () => (/* binding */ __wbg_coinspend_unwrap),\n/* harmony export */   __wbg_crypto_ed58b8e10a292839: () => (/* binding */ __wbg_crypto_ed58b8e10a292839),\n/* harmony export */   __wbg_done_769e5ede4b31c67b: () => (/* binding */ __wbg_done_769e5ede4b31c67b),\n/* harmony export */   __wbg_endofsubslotbundle_new: () => (/* binding */ __wbg_endofsubslotbundle_new),\n/* harmony export */   __wbg_endofsubslotbundle_unwrap: () => (/* binding */ __wbg_endofsubslotbundle_unwrap),\n/* harmony export */   __wbg_fetch_3afbdcc7ddbf16fe: () => (/* binding */ __wbg_fetch_3afbdcc7ddbf16fe),\n/* harmony export */   __wbg_fetch_509096533071c657: () => (/* binding */ __wbg_fetch_509096533071c657),\n/* harmony export */   __wbg_fullblock_new: () => (/* binding */ __wbg_fullblock_new),\n/* harmony export */   __wbg_fullblock_unwrap: () => (/* binding */ __wbg_fullblock_unwrap),\n/* harmony export */   __wbg_getRandomValues_bcb4912f16000dc4: () => (/* binding */ __wbg_getRandomValues_bcb4912f16000dc4),\n/* harmony export */   __wbg_get_67b2ba62fc30de12: () => (/* binding */ __wbg_get_67b2ba62fc30de12),\n/* harmony export */   __wbg_getblockrecordresponse_new: () => (/* binding */ __wbg_getblockrecordresponse_new),\n/* harmony export */   __wbg_getblockrecordsresponse_new: () => (/* binding */ __wbg_getblockrecordsresponse_new),\n/* harmony export */   __wbg_getblockresponse_new: () => (/* binding */ __wbg_getblockresponse_new),\n/* harmony export */   __wbg_getblockspendsresponse_new: () => (/* binding */ __wbg_getblockspendsresponse_new),\n/* harmony export */   __wbg_getblocksresponse_new: () => (/* binding */ __wbg_getblocksresponse_new),\n/* harmony export */   __wbg_getcoinrecordresponse_new: () => (/* binding */ __wbg_getcoinrecordresponse_new),\n/* harmony export */   __wbg_getcoinrecordsresponse_new: () => (/* binding */ __wbg_getcoinrecordsresponse_new),\n/* harmony export */   __wbg_getmempoolitemresponse_new: () => (/* binding */ __wbg_getmempoolitemresponse_new),\n/* harmony export */   __wbg_getmempoolitemsresponse_new: () => (/* binding */ __wbg_getmempoolitemsresponse_new),\n/* harmony export */   __wbg_getnetworkinforesponse_new: () => (/* binding */ __wbg_getnetworkinforesponse_new),\n/* harmony export */   __wbg_getpuzzleandsolutionresponse_new: () => (/* binding */ __wbg_getpuzzleandsolutionresponse_new),\n/* harmony export */   __wbg_has_a5ea9117f258a0ec: () => (/* binding */ __wbg_has_a5ea9117f258a0ec),\n/* harmony export */   __wbg_headers_9cb51cfd2ac780a4: () => (/* binding */ __wbg_headers_9cb51cfd2ac780a4),\n/* harmony export */   __wbg_innerpuzzlememo_new: () => (/* binding */ __wbg_innerpuzzlememo_new),\n/* harmony export */   __wbg_innerpuzzlememo_unwrap: () => (/* binding */ __wbg_innerpuzzlememo_unwrap),\n/* harmony export */   __wbg_instanceof_Response_f2cc20d9f7dfd644: () => (/* binding */ __wbg_instanceof_Response_f2cc20d9f7dfd644),\n/* harmony export */   __wbg_iterator_9a24c88df860dc65: () => (/* binding */ __wbg_iterator_9a24c88df860dc65),\n/* harmony export */   __wbg_k1pair_new: () => (/* binding */ __wbg_k1pair_new),\n/* harmony export */   __wbg_length_a446193dc22c12f8: () => (/* binding */ __wbg_length_a446193dc22c12f8),\n/* harmony export */   __wbg_mempoolitem_new: () => (/* binding */ __wbg_mempoolitem_new),\n/* harmony export */   __wbg_mempoolitem_unwrap: () => (/* binding */ __wbg_mempoolitem_unwrap),\n/* harmony export */   __wbg_msCrypto_0a36e2ec3a343d26: () => (/* binding */ __wbg_msCrypto_0a36e2ec3a343d26),\n/* harmony export */   __wbg_new_018dcc2d6c8c2f6a: () => (/* binding */ __wbg_new_018dcc2d6c8c2f6a),\n/* harmony export */   __wbg_new_23a2665fac83c611: () => (/* binding */ __wbg_new_23a2665fac83c611),\n/* harmony export */   __wbg_new_405e22f390576ce2: () => (/* binding */ __wbg_new_405e22f390576ce2),\n/* harmony export */   __wbg_new_78feb108b6472713: () => (/* binding */ __wbg_new_78feb108b6472713),\n/* harmony export */   __wbg_new_a12002a7f91c75be: () => (/* binding */ __wbg_new_a12002a7f91c75be),\n/* harmony export */   __wbg_new_e25e5aab09ff45db: () => (/* binding */ __wbg_new_e25e5aab09ff45db),\n/* harmony export */   __wbg_newnoargs_105ed471475aaf50: () => (/* binding */ __wbg_newnoargs_105ed471475aaf50),\n/* harmony export */   __wbg_newwithbyteoffsetandlength_d97e637ebe145a9a: () => (/* binding */ __wbg_newwithbyteoffsetandlength_d97e637ebe145a9a),\n/* harmony export */   __wbg_newwithlength_a381634e90c276d4: () => (/* binding */ __wbg_newwithlength_a381634e90c276d4),\n/* harmony export */   __wbg_newwithstrandinit_06c535e0a867c635: () => (/* binding */ __wbg_newwithstrandinit_06c535e0a867c635),\n/* harmony export */   __wbg_next_25feadfc0913fea9: () => (/* binding */ __wbg_next_25feadfc0913fea9),\n/* harmony export */   __wbg_next_6574e1a8a62d1055: () => (/* binding */ __wbg_next_6574e1a8a62d1055),\n/* harmony export */   __wbg_nft_new: () => (/* binding */ __wbg_nft_new),\n/* harmony export */   __wbg_nft_unwrap: () => (/* binding */ __wbg_nft_unwrap),\n/* harmony export */   __wbg_nftmint_unwrap: () => (/* binding */ __wbg_nftmint_unwrap),\n/* harmony export */   __wbg_node_02999533c4ea02e3: () => (/* binding */ __wbg_node_02999533c4ea02e3),\n/* harmony export */   __wbg_process_5c1d670bc53614b8: () => (/* binding */ __wbg_process_5c1d670bc53614b8),\n/* harmony export */   __wbg_program_new: () => (/* binding */ __wbg_program_new),\n/* harmony export */   __wbg_program_unwrap: () => (/* binding */ __wbg_program_unwrap),\n/* harmony export */   __wbg_publickey_unwrap: () => (/* binding */ __wbg_publickey_unwrap),\n/* harmony export */   __wbg_push_737cfc8c1432c2c6: () => (/* binding */ __wbg_push_737cfc8c1432c2c6),\n/* harmony export */   __wbg_pushtxresponse_new: () => (/* binding */ __wbg_pushtxresponse_new),\n/* harmony export */   __wbg_queueMicrotask_97d92b4fcc8a61c5: () => (/* binding */ __wbg_queueMicrotask_97d92b4fcc8a61c5),\n/* harmony export */   __wbg_queueMicrotask_d3219def82552485: () => (/* binding */ __wbg_queueMicrotask_d3219def82552485),\n/* harmony export */   __wbg_r1pair_new: () => (/* binding */ __wbg_r1pair_new),\n/* harmony export */   __wbg_randomFillSync_ab2cfe79ebbf2740: () => (/* binding */ __wbg_randomFillSync_ab2cfe79ebbf2740),\n/* harmony export */   __wbg_require_79b1e9274cde3c87: () => (/* binding */ __wbg_require_79b1e9274cde3c87),\n/* harmony export */   __wbg_resolve_4851785c9c5f573d: () => (/* binding */ __wbg_resolve_4851785c9c5f573d),\n/* harmony export */   __wbg_restriction_new: () => (/* binding */ __wbg_restriction_new),\n/* harmony export */   __wbg_restriction_unwrap: () => (/* binding */ __wbg_restriction_unwrap),\n/* harmony export */   __wbg_restrictionmemo_new: () => (/* binding */ __wbg_restrictionmemo_new),\n/* harmony export */   __wbg_restrictionmemo_unwrap: () => (/* binding */ __wbg_restrictionmemo_unwrap),\n/* harmony export */   __wbg_secretkey_unwrap: () => (/* binding */ __wbg_secretkey_unwrap),\n/* harmony export */   __wbg_setTimeout_ca12ead8b48245e2: () => (/* binding */ __wbg_setTimeout_ca12ead8b48245e2),\n/* harmony export */   __wbg_set_65595bdd868b3009: () => (/* binding */ __wbg_set_65595bdd868b3009),\n/* harmony export */   __wbg_set_wasm: () => (/* binding */ __wbg_set_wasm),\n/* harmony export */   __wbg_setbody_5923b78a95eedf29: () => (/* binding */ __wbg_setbody_5923b78a95eedf29),\n/* harmony export */   __wbg_setcredentials_c3a22f1cd105a2c6: () => (/* binding */ __wbg_setcredentials_c3a22f1cd105a2c6),\n/* harmony export */   __wbg_setheaders_834c0bdb6a8949ad: () => (/* binding */ __wbg_setheaders_834c0bdb6a8949ad),\n/* harmony export */   __wbg_setmethod_3c5280fe5d890842: () => (/* binding */ __wbg_setmethod_3c5280fe5d890842),\n/* harmony export */   __wbg_setmode_5dc300b865044b65: () => (/* binding */ __wbg_setmode_5dc300b865044b65),\n/* harmony export */   __wbg_setsignal_75b21ef3a81de905: () => (/* binding */ __wbg_setsignal_75b21ef3a81de905),\n/* harmony export */   __wbg_signal_aaf9ad74119f20a4: () => (/* binding */ __wbg_signal_aaf9ad74119f20a4),\n/* harmony export */   __wbg_signature_unwrap: () => (/* binding */ __wbg_signature_unwrap),\n/* harmony export */   __wbg_static_accessor_GLOBAL_88a902d13a557d07: () => (/* binding */ __wbg_static_accessor_GLOBAL_88a902d13a557d07),\n/* harmony export */   __wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0: () => (/* binding */ __wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0),\n/* harmony export */   __wbg_static_accessor_SELF_37c5d418e4bf5819: () => (/* binding */ __wbg_static_accessor_SELF_37c5d418e4bf5819),\n/* harmony export */   __wbg_static_accessor_WINDOW_5de37043a91a9c40: () => (/* binding */ __wbg_static_accessor_WINDOW_5de37043a91a9c40),\n/* harmony export */   __wbg_status_f6360336ca686bf0: () => (/* binding */ __wbg_status_f6360336ca686bf0),\n/* harmony export */   __wbg_stringify_f7ed6987935b4a24: () => (/* binding */ __wbg_stringify_f7ed6987935b4a24),\n/* harmony export */   __wbg_subarray_aa9065fa9dc5df96: () => (/* binding */ __wbg_subarray_aa9065fa9dc5df96),\n/* harmony export */   __wbg_then_44b73946d2fb3e7d: () => (/* binding */ __wbg_then_44b73946d2fb3e7d),\n/* harmony export */   __wbg_then_48b406749878a531: () => (/* binding */ __wbg_then_48b406749878a531),\n/* harmony export */   __wbg_toString_b5d4438bc26b267c: () => (/* binding */ __wbg_toString_b5d4438bc26b267c),\n/* harmony export */   __wbg_tradeprice_new: () => (/* binding */ __wbg_tradeprice_new),\n/* harmony export */   __wbg_tradeprice_unwrap: () => (/* binding */ __wbg_tradeprice_unwrap),\n/* harmony export */   __wbg_url_ae10c34ca209681d: () => (/* binding */ __wbg_url_ae10c34ca209681d),\n/* harmony export */   __wbg_value_cd1ffa7b1ab794f1: () => (/* binding */ __wbg_value_cd1ffa7b1ab794f1),\n/* harmony export */   __wbg_values_99f7a68c7f313d66: () => (/* binding */ __wbg_values_99f7a68c7f313d66),\n/* harmony export */   __wbg_versions_c71aa1626a93e0a1: () => (/* binding */ __wbg_versions_c71aa1626a93e0a1),\n/* harmony export */   __wbg_wrappermemo_new: () => (/* binding */ __wbg_wrappermemo_new),\n/* harmony export */   __wbg_wrappermemo_unwrap: () => (/* binding */ __wbg_wrappermemo_unwrap),\n/* harmony export */   __wbindgen_bigint_from_u128: () => (/* binding */ __wbindgen_bigint_from_u128),\n/* harmony export */   __wbindgen_bigint_from_u64: () => (/* binding */ __wbindgen_bigint_from_u64),\n/* harmony export */   __wbindgen_cb_drop: () => (/* binding */ __wbindgen_cb_drop),\n/* harmony export */   __wbindgen_closure_wrapper4648: () => (/* binding */ __wbindgen_closure_wrapper4648),\n/* harmony export */   __wbindgen_closure_wrapper4750: () => (/* binding */ __wbindgen_closure_wrapper4750),\n/* harmony export */   __wbindgen_debug_string: () => (/* binding */ __wbindgen_debug_string),\n/* harmony export */   __wbindgen_error_new: () => (/* binding */ __wbindgen_error_new),\n/* harmony export */   __wbindgen_is_function: () => (/* binding */ __wbindgen_is_function),\n/* harmony export */   __wbindgen_is_object: () => (/* binding */ __wbindgen_is_object),\n/* harmony export */   __wbindgen_is_string: () => (/* binding */ __wbindgen_is_string),\n/* harmony export */   __wbindgen_is_undefined: () => (/* binding */ __wbindgen_is_undefined),\n/* harmony export */   __wbindgen_memory: () => (/* binding */ __wbindgen_memory),\n/* harmony export */   __wbindgen_object_clone_ref: () => (/* binding */ __wbindgen_object_clone_ref),\n/* harmony export */   __wbindgen_object_drop_ref: () => (/* binding */ __wbindgen_object_drop_ref),\n/* harmony export */   __wbindgen_string_get: () => (/* binding */ __wbindgen_string_get),\n/* harmony export */   __wbindgen_string_new: () => (/* binding */ __wbindgen_string_new),\n/* harmony export */   __wbindgen_throw: () => (/* binding */ __wbindgen_throw),\n/* harmony export */   __wbindgen_uint8_array_new: () => (/* binding */ __wbindgen_uint8_array_new),\n/* harmony export */   blsMemberHash: () => (/* binding */ blsMemberHash),\n/* harmony export */   bytesEqual: () => (/* binding */ bytesEqual),\n/* harmony export */   catPuzzleHash: () => (/* binding */ catPuzzleHash),\n/* harmony export */   curryTreeHash: () => (/* binding */ curryTreeHash),\n/* harmony export */   customMemberHash: () => (/* binding */ customMemberHash),\n/* harmony export */   decodeOffer: () => (/* binding */ decodeOffer),\n/* harmony export */   encodeOffer: () => (/* binding */ encodeOffer),\n/* harmony export */   fixedMemberHash: () => (/* binding */ fixedMemberHash),\n/* harmony export */   force1Of2Restriction: () => (/* binding */ force1Of2Restriction),\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   generateBytes: () => (/* binding */ generateBytes),\n/* harmony export */   k1MemberHash: () => (/* binding */ k1MemberHash),\n/* harmony export */   mOfNHash: () => (/* binding */ mOfNHash),\n/* harmony export */   passkeyMemberHash: () => (/* binding */ passkeyMemberHash),\n/* harmony export */   preventConditionOpcodeRestriction: () => (/* binding */ preventConditionOpcodeRestriction),\n/* harmony export */   preventMultipleCreateCoinsRestriction: () => (/* binding */ preventMultipleCreateCoinsRestriction),\n/* harmony export */   preventVaultSideEffectsRestriction: () => (/* binding */ preventVaultSideEffectsRestriction),\n/* harmony export */   r1MemberHash: () => (/* binding */ r1MemberHash),\n/* harmony export */   sha256: () => (/* binding */ sha256),\n/* harmony export */   singletonMemberHash: () => (/* binding */ singletonMemberHash),\n/* harmony export */   standardPuzzleHash: () => (/* binding */ standardPuzzleHash),\n/* harmony export */   timelockRestriction: () => (/* binding */ timelockRestriction),\n/* harmony export */   toHex: () => (/* binding */ toHex),\n/* harmony export */   treeHashAtom: () => (/* binding */ treeHashAtom),\n/* harmony export */   treeHashPair: () => (/* binding */ treeHashPair),\n/* harmony export */   wrappedDelegatedPuzzleHash: () => (/* binding */ wrappedDelegatedPuzzleHash)\n/* harmony export */ });\nlet wasm;\nfunction __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_export_0(addHeapObject(e));\n    }\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_3.get(state.dtor)(state.a, state.b)\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_3.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches && builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8ArrayMemory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachedUint32ArrayMemory0 = null;\n\nfunction getUint32ArrayMemory0() {\n    if (cachedUint32ArrayMemory0 === null || cachedUint32ArrayMemory0.byteLength === 0) {\n        cachedUint32ArrayMemory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachedUint32ArrayMemory0;\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4, 4) >>> 0;\n    getUint32ArrayMemory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4, 4) >>> 0;\n    const mem = getDataViewMemory0();\n    for (let i = 0; i < array.length; i++) {\n        mem.setUint32(ptr + 4 * i, addHeapObject(array[i]), true);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    const mem = getDataViewMemory0();\n    const result = [];\n    for (let i = ptr; i < ptr + 4 * len; i += 4) {\n        result.push(takeObject(mem.getUint32(i, true)));\n    }\n    return result;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint32ArrayMemory0().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n * @param {MemberConfig} config\n * @param {number} required\n * @param {Array<any>} items\n * @returns {Uint8Array}\n */\nfunction mOfNHash(config, required, items) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(config, MemberConfig);\n        var ptr0 = config.__destroy_into_raw();\n        wasm.mOfNHash(retptr, ptr0, required, addHeapObject(items));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {MemberConfig} config\n * @param {K1PublicKey} publicKey\n * @param {boolean} fastForward\n * @returns {Uint8Array}\n */\nfunction k1MemberHash(config, publicKey, fastForward) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(config, MemberConfig);\n        var ptr0 = config.__destroy_into_raw();\n        _assertClass(publicKey, K1PublicKey);\n        var ptr1 = publicKey.__destroy_into_raw();\n        wasm.k1MemberHash(retptr, ptr0, ptr1, fastForward);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v3 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n        return v3;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {MemberConfig} config\n * @param {R1PublicKey} publicKey\n * @param {boolean} fastForward\n * @returns {Uint8Array}\n */\nfunction r1MemberHash(config, publicKey, fastForward) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(config, MemberConfig);\n        var ptr0 = config.__destroy_into_raw();\n        _assertClass(publicKey, R1PublicKey);\n        var ptr1 = publicKey.__destroy_into_raw();\n        wasm.r1MemberHash(retptr, ptr0, ptr1, fastForward);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v3 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n        return v3;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {MemberConfig} config\n * @param {PublicKey} publicKey\n * @returns {Uint8Array}\n */\nfunction blsMemberHash(config, publicKey) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(config, MemberConfig);\n        var ptr0 = config.__destroy_into_raw();\n        _assertClass(publicKey, PublicKey);\n        var ptr1 = publicKey.__destroy_into_raw();\n        wasm.blsMemberHash(retptr, ptr0, ptr1);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v3 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n        return v3;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {MemberConfig} config\n * @param {R1PublicKey} publicKey\n * @param {boolean} fastForward\n * @returns {Uint8Array}\n */\nfunction passkeyMemberHash(config, publicKey, fastForward) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(config, MemberConfig);\n        var ptr0 = config.__destroy_into_raw();\n        _assertClass(publicKey, R1PublicKey);\n        var ptr1 = publicKey.__destroy_into_raw();\n        wasm.passkeyMemberHash(retptr, ptr0, ptr1, fastForward);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v3 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n        return v3;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {MemberConfig} config\n * @param {Uint8Array} launcherId\n * @returns {Uint8Array}\n */\nfunction singletonMemberHash(config, launcherId) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(config, MemberConfig);\n        var ptr0 = config.__destroy_into_raw();\n        const ptr1 = passArray8ToWasm0(launcherId, wasm.__wbindgen_export_1);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.singletonMemberHash(retptr, ptr0, ptr1, len1);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v3 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n        return v3;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {MemberConfig} config\n * @param {Uint8Array} fixedPuzzleHash\n * @returns {Uint8Array}\n */\nfunction fixedMemberHash(config, fixedPuzzleHash) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(config, MemberConfig);\n        var ptr0 = config.__destroy_into_raw();\n        const ptr1 = passArray8ToWasm0(fixedPuzzleHash, wasm.__wbindgen_export_1);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.fixedMemberHash(retptr, ptr0, ptr1, len1);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v3 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n        return v3;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {MemberConfig} config\n * @param {Uint8Array} innerHash\n * @returns {Uint8Array}\n */\nfunction customMemberHash(config, innerHash) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(config, MemberConfig);\n        var ptr0 = config.__destroy_into_raw();\n        const ptr1 = passArray8ToWasm0(innerHash, wasm.__wbindgen_export_1);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.customMemberHash(retptr, ptr0, ptr1, len1);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v3 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n        return v3;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {bigint} timelock\n * @returns {Restriction}\n */\nfunction timelockRestriction(timelock) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.timelockRestriction(retptr, addHeapObject(timelock));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return Restriction.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {Uint8Array} leftSideSubtreeHash\n * @param {number} nonce\n * @param {Uint8Array} memberValidatorListHash\n * @param {Uint8Array} delegatedPuzzleValidatorListHash\n * @returns {Restriction}\n */\nfunction force1Of2Restriction(leftSideSubtreeHash, nonce, memberValidatorListHash, delegatedPuzzleValidatorListHash) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(leftSideSubtreeHash, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(memberValidatorListHash, wasm.__wbindgen_export_1);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passArray8ToWasm0(delegatedPuzzleValidatorListHash, wasm.__wbindgen_export_1);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.force1Of2Restriction(retptr, ptr0, len0, nonce, ptr1, len1, ptr2, len2);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return Restriction.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {number} conditionOpcode\n * @returns {Restriction}\n */\nfunction preventConditionOpcodeRestriction(conditionOpcode) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.preventConditionOpcodeRestriction(retptr, conditionOpcode);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return Restriction.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @returns {Restriction}\n */\nfunction preventMultipleCreateCoinsRestriction() {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.preventMultipleCreateCoinsRestriction(retptr);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return Restriction.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @returns {Restriction[]}\n */\nfunction preventVaultSideEffectsRestriction() {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.preventVaultSideEffectsRestriction(retptr);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {Restriction[]} restrictions\n * @param {Uint8Array} delegatedPuzzleHash\n * @returns {Uint8Array}\n */\nfunction wrappedDelegatedPuzzleHash(restrictions, delegatedPuzzleHash) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArrayJsValueToWasm0(restrictions, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(delegatedPuzzleHash, wasm.__wbindgen_export_1);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.wrappedDelegatedPuzzleHash(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v3 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n        return v3;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {SpendBundle} spendBundle\n * @returns {string}\n */\nfunction encodeOffer(spendBundle) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(spendBundle, SpendBundle);\n        var ptr0 = spendBundle.__destroy_into_raw();\n        wasm.encodeOffer(retptr, ptr0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_export_4(deferred3_0, deferred3_1, 1);\n    }\n}\n\n/**\n * @param {string} offer\n * @returns {SpendBundle}\n */\nfunction decodeOffer(offer) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(offer, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.decodeOffer(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return SpendBundle.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {PublicKey} syntheticKey\n * @returns {Uint8Array}\n */\nfunction standardPuzzleHash(syntheticKey) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(syntheticKey, PublicKey);\n        var ptr0 = syntheticKey.__destroy_into_raw();\n        wasm.standardPuzzleHash(retptr, ptr0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {Uint8Array} assetId\n * @param {Uint8Array} innerPuzzleHash\n * @returns {Uint8Array}\n */\nfunction catPuzzleHash(assetId, innerPuzzleHash) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(assetId, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(innerPuzzleHash, wasm.__wbindgen_export_1);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.catPuzzleHash(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v3 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n        return v3;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {string} value\n * @returns {Uint8Array}\n */\nfunction fromHex(value) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.fromHex(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {Uint8Array} value\n * @returns {string}\n */\nfunction toHex(value) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.toHex(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_export_4(deferred3_0, deferred3_1, 1);\n    }\n}\n\n/**\n * @param {Uint8Array} lhs\n * @param {Uint8Array} rhs\n * @returns {boolean}\n */\nfunction bytesEqual(lhs, rhs) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(lhs, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(rhs, wasm.__wbindgen_export_1);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.bytesEqual(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {Uint8Array} atom\n * @returns {Uint8Array}\n */\nfunction treeHashAtom(atom) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(atom, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.treeHashAtom(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {Uint8Array} first\n * @param {Uint8Array} rest\n * @returns {Uint8Array}\n */\nfunction treeHashPair(first, rest) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(first, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(rest, wasm.__wbindgen_export_1);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.treeHashPair(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v3 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n        return v3;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {Uint8Array} value\n * @returns {Uint8Array}\n */\nfunction sha256(value) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.sha256(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {Uint8Array} program\n * @param {Array<any>} args\n * @returns {Uint8Array}\n */\nfunction curryTreeHash(program, args) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(program, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.curryTreeHash(retptr, ptr0, len0, addHeapObject(args));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n * @param {number} bytes\n * @returns {Uint8Array}\n */\nfunction generateBytes(bytes) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.generateBytes(retptr, bytes);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction __wbg_adapter_34(arg0, arg1) {\n    wasm.__wbindgen_export_5(arg0, arg1);\n}\n\nfunction __wbg_adapter_37(arg0, arg1, arg2) {\n    wasm.__wbindgen_export_6(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction __wbg_adapter_1673(arg0, arg1, arg2, arg3) {\n    wasm.__wbindgen_export_7(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n * @enum {0 | 1 | 2}\n */\nconst RestrictionKind = Object.freeze({\n    MemberCondition: 0, \"0\": \"MemberCondition\",\n    DelegatedPuzzleHash: 1, \"1\": \"DelegatedPuzzleHash\",\n    DelegatedPuzzleWrapper: 2, \"2\": \"DelegatedPuzzleWrapper\",\n});\n\nconst __wbindgen_enum_RequestCredentials = [\"omit\", \"same-origin\", \"include\"];\n\nconst __wbindgen_enum_RequestMode = [\"same-origin\", \"no-cors\", \"cors\", \"navigate\"];\n\nconst AdditionsAndRemovalsResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_additionsandremovalsresponse_free(ptr >>> 0, 1));\n\nclass AdditionsAndRemovalsResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AdditionsAndRemovalsResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        AdditionsAndRemovalsResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AdditionsAndRemovalsResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_additionsandremovalsresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {AdditionsAndRemovalsResponse}\n     */\n    clone() {\n        const ret = wasm.additionsandremovalsresponse_clone(this.__wbg_ptr);\n        return AdditionsAndRemovalsResponse.__wrap(ret);\n    }\n    /**\n     * @param {CoinRecord[] | null | undefined} additions\n     * @param {CoinRecord[] | null | undefined} removals\n     * @param {string | null | undefined} error\n     * @param {boolean} success\n     */\n    constructor(additions, removals, error, success) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(additions) ? 0 : passArrayJsValueToWasm0(additions, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(removals) ? 0 : passArrayJsValueToWasm0(removals, wasm.__wbindgen_export_1);\n            var len1 = WASM_VECTOR_LEN;\n            var ptr2 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len2 = WASM_VECTOR_LEN;\n            wasm.additionsandremovalsresponse_new(retptr, ptr0, len0, ptr1, len1, ptr2, len2, success);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AdditionsAndRemovalsResponseFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CoinRecord[] | undefined}\n     */\n    get additions() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.additionsandremovalsresponse_additions(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {CoinRecord[] | null} [value]\n     */\n    set additions(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.additionsandremovalsresponse_set_additions(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CoinRecord[] | undefined}\n     */\n    get removals() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.additionsandremovalsresponse_removals(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {CoinRecord[] | null} [value]\n     */\n    set removals(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.additionsandremovalsresponse_set_removals(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.additionsandremovalsresponse_error(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | null} [value]\n     */\n    set error(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.additionsandremovalsresponse_set_error(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get success() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.additionsandremovalsresponse_success(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set success(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.additionsandremovalsresponse_set_success(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AddressFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_address_free(ptr >>> 0, 1));\n\nclass Address {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Address.prototype);\n        obj.__wbg_ptr = ptr;\n        AddressFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AddressFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr, 0);\n    }\n    /**\n     * @returns {Address}\n     */\n    clone() {\n        const ret = wasm.address_clone(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    encode() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_encode(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_export_4(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * @param {string} address\n     * @returns {Address}\n     */\n    static decode(address) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(address, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.address_decode(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} puzzleHash\n     * @param {string} prefix\n     */\n    constructor(puzzleHash, prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(prefix, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.address_new(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AddressFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_puzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set puzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.address_set_puzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    get prefix() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_prefix(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_export_4(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * @param {string} value\n     */\n    set prefix(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.address_set_prefix(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AggSigAmountFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_aggsigamount_free(ptr >>> 0, 1));\n\nclass AggSigAmount {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AggSigAmount.prototype);\n        obj.__wbg_ptr = ptr;\n        AggSigAmountFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AggSigAmountFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_aggsigamount_free(ptr, 0);\n    }\n    /**\n     * @returns {AggSigAmount}\n     */\n    clone() {\n        const ret = wasm.aggsigamount_clone(this.__wbg_ptr);\n        return AggSigAmount.__wrap(ret);\n    }\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} message\n     */\n    constructor(publicKey, message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(publicKey, PublicKey);\n            var ptr0 = publicKey.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.aggsigamount_new(retptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AggSigAmountFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    get publicKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.aggsigamount_publicKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} value\n     */\n    set publicKey(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, PublicKey);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.aggsigamount_set_publicKey(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get message() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.aggsigamount_message(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set message(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.aggsigamount_set_message(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AggSigMeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_aggsigme_free(ptr >>> 0, 1));\n\nclass AggSigMe {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AggSigMe.prototype);\n        obj.__wbg_ptr = ptr;\n        AggSigMeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AggSigMeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_aggsigme_free(ptr, 0);\n    }\n    /**\n     * @returns {AggSigMe}\n     */\n    clone() {\n        const ret = wasm.aggsigamount_clone(this.__wbg_ptr);\n        return AggSigMe.__wrap(ret);\n    }\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} message\n     */\n    constructor(publicKey, message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(publicKey, PublicKey);\n            var ptr0 = publicKey.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.aggsigamount_new(retptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AggSigMeFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    get publicKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.aggsigamount_publicKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} value\n     */\n    set publicKey(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, PublicKey);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.aggsigamount_set_publicKey(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get message() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.aggsigamount_message(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set message(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.aggsigamount_set_message(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AggSigParentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_aggsigparent_free(ptr >>> 0, 1));\n\nclass AggSigParent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AggSigParent.prototype);\n        obj.__wbg_ptr = ptr;\n        AggSigParentFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AggSigParentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_aggsigparent_free(ptr, 0);\n    }\n    /**\n     * @returns {AggSigParent}\n     */\n    clone() {\n        const ret = wasm.aggsigamount_clone(this.__wbg_ptr);\n        return AggSigParent.__wrap(ret);\n    }\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} message\n     */\n    constructor(publicKey, message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(publicKey, PublicKey);\n            var ptr0 = publicKey.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.aggsigamount_new(retptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AggSigParentFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    get publicKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.aggsigamount_publicKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} value\n     */\n    set publicKey(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, PublicKey);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.aggsigamount_set_publicKey(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get message() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.aggsigamount_message(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set message(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.aggsigamount_set_message(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AggSigParentAmountFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_aggsigparentamount_free(ptr >>> 0, 1));\n\nclass AggSigParentAmount {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AggSigParentAmount.prototype);\n        obj.__wbg_ptr = ptr;\n        AggSigParentAmountFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AggSigParentAmountFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_aggsigparentamount_free(ptr, 0);\n    }\n    /**\n     * @returns {AggSigParentAmount}\n     */\n    clone() {\n        const ret = wasm.aggsigamount_clone(this.__wbg_ptr);\n        return AggSigParentAmount.__wrap(ret);\n    }\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} message\n     */\n    constructor(publicKey, message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(publicKey, PublicKey);\n            var ptr0 = publicKey.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.aggsigamount_new(retptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AggSigParentAmountFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    get publicKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.aggsigamount_publicKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} value\n     */\n    set publicKey(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, PublicKey);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.aggsigamount_set_publicKey(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get message() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.aggsigamount_message(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set message(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.aggsigamount_set_message(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AggSigParentPuzzleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_aggsigparentpuzzle_free(ptr >>> 0, 1));\n\nclass AggSigParentPuzzle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AggSigParentPuzzle.prototype);\n        obj.__wbg_ptr = ptr;\n        AggSigParentPuzzleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AggSigParentPuzzleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_aggsigparentpuzzle_free(ptr, 0);\n    }\n    /**\n     * @returns {AggSigParentPuzzle}\n     */\n    clone() {\n        const ret = wasm.aggsigamount_clone(this.__wbg_ptr);\n        return AggSigParentPuzzle.__wrap(ret);\n    }\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} message\n     */\n    constructor(publicKey, message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(publicKey, PublicKey);\n            var ptr0 = publicKey.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.aggsigamount_new(retptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AggSigParentPuzzleFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    get publicKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.aggsigamount_publicKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} value\n     */\n    set publicKey(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, PublicKey);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.aggsigamount_set_publicKey(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get message() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.aggsigamount_message(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set message(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.aggsigamount_set_message(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AggSigPuzzleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_aggsigpuzzle_free(ptr >>> 0, 1));\n\nclass AggSigPuzzle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AggSigPuzzle.prototype);\n        obj.__wbg_ptr = ptr;\n        AggSigPuzzleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AggSigPuzzleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_aggsigpuzzle_free(ptr, 0);\n    }\n    /**\n     * @returns {AggSigPuzzle}\n     */\n    clone() {\n        const ret = wasm.aggsigamount_clone(this.__wbg_ptr);\n        return AggSigPuzzle.__wrap(ret);\n    }\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} message\n     */\n    constructor(publicKey, message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(publicKey, PublicKey);\n            var ptr0 = publicKey.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.aggsigamount_new(retptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AggSigPuzzleFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    get publicKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.aggsigamount_publicKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} value\n     */\n    set publicKey(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, PublicKey);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.aggsigamount_set_publicKey(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get message() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.aggsigamount_message(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set message(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.aggsigamount_set_message(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AggSigPuzzleAmountFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_aggsigpuzzleamount_free(ptr >>> 0, 1));\n\nclass AggSigPuzzleAmount {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AggSigPuzzleAmount.prototype);\n        obj.__wbg_ptr = ptr;\n        AggSigPuzzleAmountFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AggSigPuzzleAmountFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_aggsigpuzzleamount_free(ptr, 0);\n    }\n    /**\n     * @returns {AggSigPuzzleAmount}\n     */\n    clone() {\n        const ret = wasm.aggsigamount_clone(this.__wbg_ptr);\n        return AggSigPuzzleAmount.__wrap(ret);\n    }\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} message\n     */\n    constructor(publicKey, message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(publicKey, PublicKey);\n            var ptr0 = publicKey.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.aggsigamount_new(retptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AggSigPuzzleAmountFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    get publicKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.aggsigamount_publicKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} value\n     */\n    set publicKey(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, PublicKey);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.aggsigamount_set_publicKey(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get message() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.aggsigamount_message(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set message(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.aggsigamount_set_message(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AggSigUnsafeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_aggsigunsafe_free(ptr >>> 0, 1));\n\nclass AggSigUnsafe {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AggSigUnsafe.prototype);\n        obj.__wbg_ptr = ptr;\n        AggSigUnsafeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AggSigUnsafeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_aggsigunsafe_free(ptr, 0);\n    }\n    /**\n     * @returns {AggSigUnsafe}\n     */\n    clone() {\n        const ret = wasm.aggsigamount_clone(this.__wbg_ptr);\n        return AggSigUnsafe.__wrap(ret);\n    }\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} message\n     */\n    constructor(publicKey, message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(publicKey, PublicKey);\n            var ptr0 = publicKey.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.aggsigamount_new(retptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AggSigUnsafeFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    get publicKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.aggsigamount_publicKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} value\n     */\n    set publicKey(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, PublicKey);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.aggsigamount_set_publicKey(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get message() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.aggsigamount_message(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set message(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.aggsigamount_set_message(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertBeforeHeightAbsoluteFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertbeforeheightabsolute_free(ptr >>> 0, 1));\n\nclass AssertBeforeHeightAbsolute {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertBeforeHeightAbsolute.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertBeforeHeightAbsoluteFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertBeforeHeightAbsoluteFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertbeforeheightabsolute_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertBeforeHeightAbsolute}\n     */\n    clone() {\n        const ret = wasm.assertbeforeheightabsolute_clone(this.__wbg_ptr);\n        return AssertBeforeHeightAbsolute.__wrap(ret);\n    }\n    /**\n     * @param {number} height\n     */\n    constructor(height) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforeheightabsolute_new(retptr, height);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertBeforeHeightAbsoluteFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get height() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforeheightabsolute_height(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set height(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforeheightabsolute_set_height(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertBeforeHeightRelativeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertbeforeheightrelative_free(ptr >>> 0, 1));\n\nclass AssertBeforeHeightRelative {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertBeforeHeightRelative.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertBeforeHeightRelativeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertBeforeHeightRelativeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertbeforeheightrelative_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertBeforeHeightRelative}\n     */\n    clone() {\n        const ret = wasm.assertbeforeheightabsolute_clone(this.__wbg_ptr);\n        return AssertBeforeHeightRelative.__wrap(ret);\n    }\n    /**\n     * @param {number} height\n     */\n    constructor(height) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforeheightabsolute_new(retptr, height);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertBeforeHeightRelativeFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get height() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforeheightabsolute_height(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set height(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforeheightabsolute_set_height(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertBeforeSecondsAbsoluteFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertbeforesecondsabsolute_free(ptr >>> 0, 1));\n\nclass AssertBeforeSecondsAbsolute {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertBeforeSecondsAbsolute.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertBeforeSecondsAbsoluteFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertBeforeSecondsAbsoluteFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertbeforesecondsabsolute_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertBeforeSecondsAbsolute}\n     */\n    clone() {\n        const ret = wasm.assertbeforesecondsabsolute_clone(this.__wbg_ptr);\n        return AssertBeforeSecondsAbsolute.__wrap(ret);\n    }\n    /**\n     * @param {bigint} seconds\n     */\n    constructor(seconds) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_new(retptr, addHeapObject(seconds));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertBeforeSecondsAbsoluteFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get seconds() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_seconds(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set seconds(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_set_seconds(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertBeforeSecondsRelativeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertbeforesecondsrelative_free(ptr >>> 0, 1));\n\nclass AssertBeforeSecondsRelative {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertBeforeSecondsRelative.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertBeforeSecondsRelativeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertBeforeSecondsRelativeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertbeforesecondsrelative_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertBeforeSecondsRelative}\n     */\n    clone() {\n        const ret = wasm.assertbeforesecondsabsolute_clone(this.__wbg_ptr);\n        return AssertBeforeSecondsRelative.__wrap(ret);\n    }\n    /**\n     * @param {bigint} seconds\n     */\n    constructor(seconds) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_new(retptr, addHeapObject(seconds));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertBeforeSecondsRelativeFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get seconds() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_seconds(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set seconds(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_set_seconds(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertCoinAnnouncementFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertcoinannouncement_free(ptr >>> 0, 1));\n\nclass AssertCoinAnnouncement {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertCoinAnnouncement.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertCoinAnnouncementFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertCoinAnnouncementFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertcoinannouncement_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertCoinAnnouncement}\n     */\n    clone() {\n        const ret = wasm.assertcoinannouncement_clone(this.__wbg_ptr);\n        return AssertCoinAnnouncement.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} announcementId\n     */\n    constructor(announcementId) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(announcementId, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assertcoinannouncement_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertCoinAnnouncementFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get announcementId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertcoinannouncement_announcementId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set announcementId(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assertcoinannouncement_set_announcementId(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertConcurrentPuzzleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertconcurrentpuzzle_free(ptr >>> 0, 1));\n\nclass AssertConcurrentPuzzle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertConcurrentPuzzle.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertConcurrentPuzzleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertConcurrentPuzzleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertconcurrentpuzzle_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertConcurrentPuzzle}\n     */\n    clone() {\n        const ret = wasm.assertcoinannouncement_clone(this.__wbg_ptr);\n        return AssertConcurrentPuzzle.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} puzzleHash\n     */\n    constructor(puzzleHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assertcoinannouncement_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertConcurrentPuzzleFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertcoinannouncement_announcementId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set puzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assertcoinannouncement_set_announcementId(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertConcurrentSpendFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertconcurrentspend_free(ptr >>> 0, 1));\n\nclass AssertConcurrentSpend {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertConcurrentSpend.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertConcurrentSpendFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertConcurrentSpendFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertconcurrentspend_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertConcurrentSpend}\n     */\n    clone() {\n        const ret = wasm.assertcoinannouncement_clone(this.__wbg_ptr);\n        return AssertConcurrentSpend.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} coinId\n     */\n    constructor(coinId) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(coinId, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assertcoinannouncement_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertConcurrentSpendFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get coinId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertcoinannouncement_announcementId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set coinId(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assertcoinannouncement_set_announcementId(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertEphemeralFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertephemeral_free(ptr >>> 0, 1));\n\nclass AssertEphemeral {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertEphemeral.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertEphemeralFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertEphemeralFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertephemeral_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertEphemeral}\n     */\n    clone() {\n        const ret = wasm.assertephemeral_clone(this.__wbg_ptr);\n        return AssertEphemeral.__wrap(ret);\n    }\n    constructor() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertephemeral_new(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertEphemeralFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertHeightAbsoluteFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertheightabsolute_free(ptr >>> 0, 1));\n\nclass AssertHeightAbsolute {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertHeightAbsolute.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertHeightAbsoluteFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertHeightAbsoluteFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertheightabsolute_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertHeightAbsolute}\n     */\n    clone() {\n        const ret = wasm.assertbeforeheightabsolute_clone(this.__wbg_ptr);\n        return AssertHeightAbsolute.__wrap(ret);\n    }\n    /**\n     * @param {number} height\n     */\n    constructor(height) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforeheightabsolute_new(retptr, height);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertHeightAbsoluteFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get height() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforeheightabsolute_height(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set height(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforeheightabsolute_set_height(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertHeightRelativeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertheightrelative_free(ptr >>> 0, 1));\n\nclass AssertHeightRelative {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertHeightRelative.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertHeightRelativeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertHeightRelativeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertheightrelative_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertHeightRelative}\n     */\n    clone() {\n        const ret = wasm.assertbeforeheightabsolute_clone(this.__wbg_ptr);\n        return AssertHeightRelative.__wrap(ret);\n    }\n    /**\n     * @param {number} height\n     */\n    constructor(height) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforeheightabsolute_new(retptr, height);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertHeightRelativeFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get height() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforeheightabsolute_height(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set height(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforeheightabsolute_set_height(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertMyAmountFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertmyamount_free(ptr >>> 0, 1));\n\nclass AssertMyAmount {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertMyAmount.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertMyAmountFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertMyAmountFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertmyamount_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertMyAmount}\n     */\n    clone() {\n        const ret = wasm.assertbeforesecondsabsolute_clone(this.__wbg_ptr);\n        return AssertMyAmount.__wrap(ret);\n    }\n    /**\n     * @param {bigint} amount\n     */\n    constructor(amount) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_new(retptr, addHeapObject(amount));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertMyAmountFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get amount() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_seconds(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set amount(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_set_seconds(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertMyBirthHeightFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertmybirthheight_free(ptr >>> 0, 1));\n\nclass AssertMyBirthHeight {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertMyBirthHeight.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertMyBirthHeightFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertMyBirthHeightFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertmybirthheight_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertMyBirthHeight}\n     */\n    clone() {\n        const ret = wasm.assertbeforeheightabsolute_clone(this.__wbg_ptr);\n        return AssertMyBirthHeight.__wrap(ret);\n    }\n    /**\n     * @param {number} height\n     */\n    constructor(height) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforeheightabsolute_new(retptr, height);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertMyBirthHeightFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get height() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforeheightabsolute_height(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set height(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforeheightabsolute_set_height(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertMyBirthSecondsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertmybirthseconds_free(ptr >>> 0, 1));\n\nclass AssertMyBirthSeconds {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertMyBirthSeconds.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertMyBirthSecondsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertMyBirthSecondsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertmybirthseconds_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertMyBirthSeconds}\n     */\n    clone() {\n        const ret = wasm.assertbeforesecondsabsolute_clone(this.__wbg_ptr);\n        return AssertMyBirthSeconds.__wrap(ret);\n    }\n    /**\n     * @param {bigint} seconds\n     */\n    constructor(seconds) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_new(retptr, addHeapObject(seconds));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertMyBirthSecondsFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get seconds() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_seconds(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set seconds(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_set_seconds(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertMyCoinIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertmycoinid_free(ptr >>> 0, 1));\n\nclass AssertMyCoinId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertMyCoinId.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertMyCoinIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertMyCoinIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertmycoinid_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertMyCoinId}\n     */\n    clone() {\n        const ret = wasm.assertcoinannouncement_clone(this.__wbg_ptr);\n        return AssertMyCoinId.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} coinId\n     */\n    constructor(coinId) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(coinId, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assertcoinannouncement_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertMyCoinIdFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get coinId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertcoinannouncement_announcementId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set coinId(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assertcoinannouncement_set_announcementId(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertMyParentIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertmyparentid_free(ptr >>> 0, 1));\n\nclass AssertMyParentId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertMyParentId.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertMyParentIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertMyParentIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertmyparentid_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertMyParentId}\n     */\n    clone() {\n        const ret = wasm.assertcoinannouncement_clone(this.__wbg_ptr);\n        return AssertMyParentId.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} parentId\n     */\n    constructor(parentId) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(parentId, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assertcoinannouncement_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertMyParentIdFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get parentId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertcoinannouncement_announcementId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set parentId(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assertcoinannouncement_set_announcementId(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertMyPuzzleHashFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertmypuzzlehash_free(ptr >>> 0, 1));\n\nclass AssertMyPuzzleHash {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertMyPuzzleHash.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertMyPuzzleHashFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertMyPuzzleHashFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertmypuzzlehash_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertMyPuzzleHash}\n     */\n    clone() {\n        const ret = wasm.assertcoinannouncement_clone(this.__wbg_ptr);\n        return AssertMyPuzzleHash.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} puzzleHash\n     */\n    constructor(puzzleHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assertcoinannouncement_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertMyPuzzleHashFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertcoinannouncement_announcementId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set puzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assertcoinannouncement_set_announcementId(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertPuzzleAnnouncementFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertpuzzleannouncement_free(ptr >>> 0, 1));\n\nclass AssertPuzzleAnnouncement {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertPuzzleAnnouncement.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertPuzzleAnnouncementFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertPuzzleAnnouncementFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertpuzzleannouncement_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertPuzzleAnnouncement}\n     */\n    clone() {\n        const ret = wasm.assertcoinannouncement_clone(this.__wbg_ptr);\n        return AssertPuzzleAnnouncement.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} announcementId\n     */\n    constructor(announcementId) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(announcementId, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assertcoinannouncement_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertPuzzleAnnouncementFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get announcementId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertcoinannouncement_announcementId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set announcementId(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assertcoinannouncement_set_announcementId(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertSecondsAbsoluteFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertsecondsabsolute_free(ptr >>> 0, 1));\n\nclass AssertSecondsAbsolute {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertSecondsAbsolute.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertSecondsAbsoluteFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertSecondsAbsoluteFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertsecondsabsolute_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertSecondsAbsolute}\n     */\n    clone() {\n        const ret = wasm.assertbeforesecondsabsolute_clone(this.__wbg_ptr);\n        return AssertSecondsAbsolute.__wrap(ret);\n    }\n    /**\n     * @param {bigint} seconds\n     */\n    constructor(seconds) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_new(retptr, addHeapObject(seconds));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertSecondsAbsoluteFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get seconds() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_seconds(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set seconds(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_set_seconds(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst AssertSecondsRelativeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_assertsecondsrelative_free(ptr >>> 0, 1));\n\nclass AssertSecondsRelative {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AssertSecondsRelative.prototype);\n        obj.__wbg_ptr = ptr;\n        AssertSecondsRelativeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AssertSecondsRelativeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assertsecondsrelative_free(ptr, 0);\n    }\n    /**\n     * @returns {AssertSecondsRelative}\n     */\n    clone() {\n        const ret = wasm.assertbeforesecondsabsolute_clone(this.__wbg_ptr);\n        return AssertSecondsRelative.__wrap(ret);\n    }\n    /**\n     * @param {bigint} seconds\n     */\n    constructor(seconds) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_new(retptr, addHeapObject(seconds));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            AssertSecondsRelativeFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get seconds() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_seconds(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set seconds(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_set_seconds(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst BlockRecordFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_blockrecord_free(ptr >>> 0, 1));\n\nclass BlockRecord {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BlockRecord.prototype);\n        obj.__wbg_ptr = ptr;\n        BlockRecordFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof BlockRecord)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BlockRecordFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_blockrecord_free(ptr, 0);\n    }\n    /**\n     * @returns {BlockRecord}\n     */\n    clone() {\n        const ret = wasm.blockrecord_clone(this.__wbg_ptr);\n        return BlockRecord.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} headerHash\n     * @param {Uint8Array} prevHash\n     * @param {number} height\n     * @param {bigint} weight\n     * @param {bigint} totalIters\n     * @param {number} signagePointIndex\n     * @param {Uint8Array} challengeVdfOutput\n     * @param {Uint8Array | null | undefined} infusedChallengeVdfOutput\n     * @param {Uint8Array} rewardInfusionNewChallenge\n     * @param {Uint8Array} challengeBlockInfoHash\n     * @param {bigint} subSlotIters\n     * @param {Uint8Array} poolPuzzleHash\n     * @param {Uint8Array} farmerPuzzleHash\n     * @param {bigint} requiredIters\n     * @param {number} deficit\n     * @param {boolean} overflow\n     * @param {number} prevTransactionBlockHeight\n     * @param {bigint | null} [timestamp]\n     * @param {Uint8Array | null} [prevTransactionBlockHash]\n     * @param {bigint | null} [fees]\n     * @param {Coin[] | null} [rewardClaimsIncorporated]\n     * @param {Array<any> | null} [finishedChallengeSlotHashes]\n     * @param {Array<any> | null} [finishedInfusedChallengeSlotHashes]\n     * @param {Array<any> | null} [finishedRewardSlotHashes]\n     * @param {SubEpochSummary | null} [subEpochSummaryIncluded]\n     */\n    constructor(headerHash, prevHash, height, weight, totalIters, signagePointIndex, challengeVdfOutput, infusedChallengeVdfOutput, rewardInfusionNewChallenge, challengeBlockInfoHash, subSlotIters, poolPuzzleHash, farmerPuzzleHash, requiredIters, deficit, overflow, prevTransactionBlockHeight, timestamp, prevTransactionBlockHash, fees, rewardClaimsIncorporated, finishedChallengeSlotHashes, finishedInfusedChallengeSlotHashes, finishedRewardSlotHashes, subEpochSummaryIncluded) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(headerHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(prevHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passArray8ToWasm0(challengeVdfOutput, wasm.__wbindgen_export_1);\n            const len2 = WASM_VECTOR_LEN;\n            var ptr3 = isLikeNone(infusedChallengeVdfOutput) ? 0 : passArray8ToWasm0(infusedChallengeVdfOutput, wasm.__wbindgen_export_1);\n            var len3 = WASM_VECTOR_LEN;\n            const ptr4 = passArray8ToWasm0(rewardInfusionNewChallenge, wasm.__wbindgen_export_1);\n            const len4 = WASM_VECTOR_LEN;\n            const ptr5 = passArray8ToWasm0(challengeBlockInfoHash, wasm.__wbindgen_export_1);\n            const len5 = WASM_VECTOR_LEN;\n            const ptr6 = passArray8ToWasm0(poolPuzzleHash, wasm.__wbindgen_export_1);\n            const len6 = WASM_VECTOR_LEN;\n            const ptr7 = passArray8ToWasm0(farmerPuzzleHash, wasm.__wbindgen_export_1);\n            const len7 = WASM_VECTOR_LEN;\n            var ptr8 = isLikeNone(prevTransactionBlockHash) ? 0 : passArray8ToWasm0(prevTransactionBlockHash, wasm.__wbindgen_export_1);\n            var len8 = WASM_VECTOR_LEN;\n            var ptr9 = isLikeNone(rewardClaimsIncorporated) ? 0 : passArrayJsValueToWasm0(rewardClaimsIncorporated, wasm.__wbindgen_export_1);\n            var len9 = WASM_VECTOR_LEN;\n            let ptr10 = 0;\n            if (!isLikeNone(subEpochSummaryIncluded)) {\n                _assertClass(subEpochSummaryIncluded, SubEpochSummary);\n                ptr10 = subEpochSummaryIncluded.__destroy_into_raw();\n            }\n            wasm.blockrecord_new(retptr, ptr0, len0, ptr1, len1, height, addHeapObject(weight), addHeapObject(totalIters), signagePointIndex, ptr2, len2, ptr3, len3, ptr4, len4, ptr5, len5, addHeapObject(subSlotIters), ptr6, len6, ptr7, len7, addHeapObject(requiredIters), deficit, overflow, prevTransactionBlockHeight, isLikeNone(timestamp) ? 0 : addHeapObject(timestamp), ptr8, len8, isLikeNone(fees) ? 0 : addHeapObject(fees), ptr9, len9, isLikeNone(finishedChallengeSlotHashes) ? 0 : addHeapObject(finishedChallengeSlotHashes), isLikeNone(finishedInfusedChallengeSlotHashes) ? 0 : addHeapObject(finishedInfusedChallengeSlotHashes), isLikeNone(finishedRewardSlotHashes) ? 0 : addHeapObject(finishedRewardSlotHashes), ptr10);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            BlockRecordFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get headerHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_headerHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set headerHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.blockrecord_set_headerHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get prevHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_prevHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set prevHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.blockrecord_set_prevHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get height() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_height(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set height(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_set_height(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get weight() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_weight(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set weight(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_set_weight(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get totalIters() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_totalIters(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set totalIters(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_set_totalIters(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get signagePointIndex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_signagePointIndex(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set signagePointIndex(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_set_signagePointIndex(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get challengeVdfOutput() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_challengeVdfOutput(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set challengeVdfOutput(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.blockrecord_set_challengeVdfOutput(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get infusedChallengeVdfOutput() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_infusedChallengeVdfOutput(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set infusedChallengeVdfOutput(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.blockrecord_set_infusedChallengeVdfOutput(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get rewardInfusionNewChallenge() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_rewardInfusionNewChallenge(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set rewardInfusionNewChallenge(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.blockrecord_set_rewardInfusionNewChallenge(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get challengeBlockInfoHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_challengeBlockInfoHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set challengeBlockInfoHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.blockrecord_set_challengeBlockInfoHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get subSlotIters() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_subSlotIters(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set subSlotIters(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_set_subSlotIters(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get poolPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_poolPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set poolPuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.blockrecord_set_poolPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get farmerPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_farmerPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set farmerPuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.blockrecord_set_farmerPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get requiredIters() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_requiredIters(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set requiredIters(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_set_requiredIters(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get deficit() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_deficit(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set deficit(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_set_deficit(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get overflow() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_overflow(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set overflow(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_set_overflow(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get prevTransactionBlockHeight() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_prevTransactionBlockHeight(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set prevTransactionBlockHeight(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_set_prevTransactionBlockHeight(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint | undefined}\n     */\n    get timestamp() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_timestamp(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint | null} [value]\n     */\n    set timestamp(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_set_timestamp(retptr, this.__wbg_ptr, isLikeNone(value) ? 0 : addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get prevTransactionBlockHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_prevTransactionBlockHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set prevTransactionBlockHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.blockrecord_set_prevTransactionBlockHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint | undefined}\n     */\n    get fees() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_fees(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint | null} [value]\n     */\n    set fees(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_set_fees(retptr, this.__wbg_ptr, isLikeNone(value) ? 0 : addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Coin[] | undefined}\n     */\n    get rewardClaimsIncorporated() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_rewardClaimsIncorporated(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin[] | null} [value]\n     */\n    set rewardClaimsIncorporated(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.blockrecord_set_rewardClaimsIncorporated(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Array<any> | undefined}\n     */\n    get finishedChallengeSlotHashes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_finishedChallengeSlotHashes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Array<any> | null} [value]\n     */\n    set finishedChallengeSlotHashes(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_set_finishedChallengeSlotHashes(retptr, this.__wbg_ptr, isLikeNone(value) ? 0 : addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Array<any> | undefined}\n     */\n    get finishedInfusedChallengeSlotHashes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_finishedInfusedChallengeSlotHashes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Array<any> | null} [value]\n     */\n    set finishedInfusedChallengeSlotHashes(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_set_finishedInfusedChallengeSlotHashes(retptr, this.__wbg_ptr, isLikeNone(value) ? 0 : addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Array<any> | undefined}\n     */\n    get finishedRewardSlotHashes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_finishedRewardSlotHashes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Array<any> | null} [value]\n     */\n    set finishedRewardSlotHashes(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_set_finishedRewardSlotHashes(retptr, this.__wbg_ptr, isLikeNone(value) ? 0 : addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {SubEpochSummary | undefined}\n     */\n    get subEpochSummaryIncluded() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockrecord_subEpochSummaryIncluded(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : SubEpochSummary.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {SubEpochSummary | null} [value]\n     */\n    set subEpochSummaryIncluded(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, SubEpochSummary);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.blockrecord_set_subEpochSummaryIncluded(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst BlockchainStateFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_blockchainstate_free(ptr >>> 0, 1));\n\nclass BlockchainState {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BlockchainState.prototype);\n        obj.__wbg_ptr = ptr;\n        BlockchainStateFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BlockchainStateFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_blockchainstate_free(ptr, 0);\n    }\n    /**\n     * @returns {BlockchainState}\n     */\n    clone() {\n        const ret = wasm.blockchainstate_clone(this.__wbg_ptr);\n        return BlockchainState.__wrap(ret);\n    }\n    /**\n     * @param {bigint} averageBlockTime\n     * @param {bigint} blockMaxCost\n     * @param {bigint} difficulty\n     * @param {boolean} genesisChallengeInitialized\n     * @param {bigint} mempoolCost\n     * @param {bigint} mempoolFees\n     * @param {bigint} mempoolMaxTotalCost\n     * @param {MempoolMinFees} mempoolMinFees\n     * @param {number} mempoolSize\n     * @param {Uint8Array} nodeId\n     * @param {BlockRecord} peak\n     * @param {bigint} space\n     * @param {bigint} subSlotIters\n     * @param {SyncState} sync\n     */\n    constructor(averageBlockTime, blockMaxCost, difficulty, genesisChallengeInitialized, mempoolCost, mempoolFees, mempoolMaxTotalCost, mempoolMinFees, mempoolSize, nodeId, peak, space, subSlotIters, sync) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(mempoolMinFees, MempoolMinFees);\n            var ptr0 = mempoolMinFees.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(nodeId, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            _assertClass(peak, BlockRecord);\n            var ptr2 = peak.__destroy_into_raw();\n            _assertClass(sync, SyncState);\n            var ptr3 = sync.__destroy_into_raw();\n            wasm.blockchainstate_new(retptr, addHeapObject(averageBlockTime), addHeapObject(blockMaxCost), addHeapObject(difficulty), genesisChallengeInitialized, addHeapObject(mempoolCost), addHeapObject(mempoolFees), addHeapObject(mempoolMaxTotalCost), ptr0, mempoolSize, ptr1, len1, ptr2, addHeapObject(space), addHeapObject(subSlotIters), ptr3);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            BlockchainStateFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get averageBlockTime() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_averageBlockTime(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set averageBlockTime(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_set_averageBlockTime(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get blockMaxCost() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_blockMaxCost(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set blockMaxCost(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_set_blockMaxCost(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get difficulty() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_difficulty(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set difficulty(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_set_difficulty(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get genesisChallengeInitialized() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_genesisChallengeInitialized(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set genesisChallengeInitialized(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_set_genesisChallengeInitialized(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get mempoolCost() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_mempoolCost(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set mempoolCost(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_set_mempoolCost(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get mempoolFees() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_mempoolFees(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set mempoolFees(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_set_mempoolFees(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get mempoolMaxTotalCost() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_mempoolMaxTotalCost(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set mempoolMaxTotalCost(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_set_mempoolMaxTotalCost(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MempoolMinFees}\n     */\n    get mempoolMinFees() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_mempoolMinFees(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MempoolMinFees.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MempoolMinFees} value\n     */\n    set mempoolMinFees(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, MempoolMinFees);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.blockchainstate_set_mempoolMinFees(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get mempoolSize() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_mempoolSize(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set mempoolSize(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_set_mempoolSize(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get nodeId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_nodeId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set nodeId(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.blockchainstate_set_nodeId(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BlockRecord}\n     */\n    get peak() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_peak(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BlockRecord.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BlockRecord} value\n     */\n    set peak(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, BlockRecord);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.blockchainstate_set_peak(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get space() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_space(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set space(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_set_space(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get subSlotIters() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_subSlotIters(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set subSlotIters(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_set_subSlotIters(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {SyncState}\n     */\n    get sync() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstate_sync(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SyncState.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {SyncState} value\n     */\n    set sync(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, SyncState);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.blockchainstate_set_sync(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst BlockchainStateResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_blockchainstateresponse_free(ptr >>> 0, 1));\n\nclass BlockchainStateResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BlockchainStateResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        BlockchainStateResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BlockchainStateResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_blockchainstateresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {BlockchainStateResponse}\n     */\n    clone() {\n        const ret = wasm.blockchainstateresponse_clone(this.__wbg_ptr);\n        return BlockchainStateResponse.__wrap(ret);\n    }\n    /**\n     * @param {BlockchainState | null | undefined} blockchainState\n     * @param {string | null | undefined} error\n     * @param {boolean} success\n     */\n    constructor(blockchainState, error, success) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(blockchainState)) {\n                _assertClass(blockchainState, BlockchainState);\n                ptr0 = blockchainState.__destroy_into_raw();\n            }\n            var ptr1 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.blockchainstateresponse_new(retptr, ptr0, ptr1, len1, success);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            BlockchainStateResponseFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BlockchainState | undefined}\n     */\n    get blockchainState() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstateresponse_blockchainState(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : BlockchainState.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BlockchainState | null} [value]\n     */\n    set blockchainState(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, BlockchainState);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.blockchainstateresponse_set_blockchainState(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstateresponse_error(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | null} [value]\n     */\n    set error(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.blockchainstateresponse_set_error(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get success() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstateresponse_success(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set success(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockchainstateresponse_set_success(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst BlsPairFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_blspair_free(ptr >>> 0, 1));\n\nclass BlsPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BlsPair.prototype);\n        obj.__wbg_ptr = ptr;\n        BlsPairFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BlsPairFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_blspair_free(ptr, 0);\n    }\n    /**\n     * @returns {BlsPair}\n     */\n    clone() {\n        const ret = wasm.blspair_clone(this.__wbg_ptr);\n        return BlsPair.__wrap(ret);\n    }\n    /**\n     * @param {bigint} seed\n     * @returns {BlsPair}\n     */\n    static fromSeed(seed) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blspair_fromSeed(retptr, addHeapObject(seed));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BlsPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} seed\n     * @param {number} count\n     * @returns {BlsPair[]}\n     */\n    static manyFromSeed(seed, count) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blspair_manyFromSeed(retptr, addHeapObject(seed), count);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {SecretKey} sk\n     * @param {PublicKey} pk\n     */\n    constructor(sk, pk) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(sk, SecretKey);\n            var ptr0 = sk.__destroy_into_raw();\n            _assertClass(pk, PublicKey);\n            var ptr1 = pk.__destroy_into_raw();\n            wasm.blspair_new(retptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            BlsPairFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {SecretKey}\n     */\n    get sk() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blspair_sk(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SecretKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {SecretKey} value\n     */\n    set sk(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, SecretKey);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.blspair_set_sk(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    get pk() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blspair_pk(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} value\n     */\n    set pk(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, PublicKey);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.blspair_set_pk(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst BlsPairWithCoinFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_blspairwithcoin_free(ptr >>> 0, 1));\n\nclass BlsPairWithCoin {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BlsPairWithCoin.prototype);\n        obj.__wbg_ptr = ptr;\n        BlsPairWithCoinFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BlsPairWithCoinFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_blspairwithcoin_free(ptr, 0);\n    }\n    /**\n     * @returns {BlsPairWithCoin}\n     */\n    clone() {\n        const ret = wasm.blspairwithcoin_clone(this.__wbg_ptr);\n        return BlsPairWithCoin.__wrap(ret);\n    }\n    /**\n     * @param {SecretKey} sk\n     * @param {PublicKey} pk\n     * @param {Uint8Array} puzzleHash\n     * @param {Coin} coin\n     */\n    constructor(sk, pk, puzzleHash, coin) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(sk, SecretKey);\n            var ptr0 = sk.__destroy_into_raw();\n            _assertClass(pk, PublicKey);\n            var ptr1 = pk.__destroy_into_raw();\n            const ptr2 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len2 = WASM_VECTOR_LEN;\n            _assertClass(coin, Coin);\n            var ptr3 = coin.__destroy_into_raw();\n            wasm.blspairwithcoin_new(retptr, ptr0, ptr1, ptr2, len2, ptr3);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            BlsPairWithCoinFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {SecretKey}\n     */\n    get sk() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blspair_sk(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SecretKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {SecretKey} value\n     */\n    set sk(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, SecretKey);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.blspairwithcoin_set_sk(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    get pk() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blspairwithcoin_pk(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} value\n     */\n    set pk(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, PublicKey);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.blspairwithcoin_set_pk(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blspairwithcoin_puzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set puzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.blspairwithcoin_set_puzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Coin}\n     */\n    get coin() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blspairwithcoin_coin(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Coin.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} value\n     */\n    set coin(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Coin);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.blspairwithcoin_set_coin(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst CatFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_cat_free(ptr >>> 0, 1));\n\nclass Cat {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Cat.prototype);\n        obj.__wbg_ptr = ptr;\n        CatFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CatFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cat_free(ptr, 0);\n    }\n    /**\n     * @returns {Cat}\n     */\n    clone() {\n        const ret = wasm.cat_clone(this.__wbg_ptr);\n        return Cat.__wrap(ret);\n    }\n    /**\n     * @returns {LineageProof}\n     */\n    childLineageProof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cat_childLineageProof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return LineageProof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} p2PuzzleHash\n     * @param {bigint} amount\n     * @returns {Cat}\n     */\n    child(p2PuzzleHash, amount) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(p2PuzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.cat_child(retptr, this.__wbg_ptr, ptr0, len0, addHeapObject(amount));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Cat.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} p2PuzzleHash\n     * @param {bigint} amount\n     * @returns {Cat}\n     */\n    unrevocableChild(p2PuzzleHash, amount) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(p2PuzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.cat_unrevocableChild(retptr, this.__wbg_ptr, ptr0, len0, addHeapObject(amount));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Cat.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} coin\n     * @param {LineageProof | null | undefined} lineageProof\n     * @param {CatInfo} info\n     */\n    constructor(coin, lineageProof, info) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(coin, Coin);\n            var ptr0 = coin.__destroy_into_raw();\n            let ptr1 = 0;\n            if (!isLikeNone(lineageProof)) {\n                _assertClass(lineageProof, LineageProof);\n                ptr1 = lineageProof.__destroy_into_raw();\n            }\n            _assertClass(info, CatInfo);\n            var ptr2 = info.__destroy_into_raw();\n            wasm.cat_new(retptr, ptr0, ptr1, ptr2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            CatFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Coin}\n     */\n    get coin() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cat_coin(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Coin.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} value\n     */\n    set coin(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Coin);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.cat_set_coin(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {LineageProof | undefined}\n     */\n    get lineageProof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cat_lineageProof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : LineageProof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {LineageProof | null} [value]\n     */\n    set lineageProof(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, LineageProof);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.cat_set_lineageProof(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CatInfo}\n     */\n    get info() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cat_info(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CatInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {CatInfo} value\n     */\n    set info(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, CatInfo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.cat_set_info(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst CatInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_catinfo_free(ptr >>> 0, 1));\n\nclass CatInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CatInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        CatInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CatInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_catinfo_free(ptr, 0);\n    }\n    /**\n     * @returns {CatInfo}\n     */\n    clone() {\n        const ret = wasm.catinfo_clone(this.__wbg_ptr);\n        return CatInfo.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    innerPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.catinfo_innerPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.catinfo_puzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} assetId\n     * @param {Uint8Array | null | undefined} hiddenPuzzleHash\n     * @param {Uint8Array} p2PuzzleHash\n     */\n    constructor(assetId, hiddenPuzzleHash, p2PuzzleHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(assetId, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(hiddenPuzzleHash) ? 0 : passArray8ToWasm0(hiddenPuzzleHash, wasm.__wbindgen_export_1);\n            var len1 = WASM_VECTOR_LEN;\n            const ptr2 = passArray8ToWasm0(p2PuzzleHash, wasm.__wbindgen_export_1);\n            const len2 = WASM_VECTOR_LEN;\n            wasm.catinfo_new(retptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            CatInfoFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get assetId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.catinfo_assetId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set assetId(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.catinfo_set_assetId(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get hiddenPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.catinfo_hiddenPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set hiddenPuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.catinfo_set_hiddenPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get p2PuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.catinfo_p2PuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set p2PuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.catinfo_set_p2PuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst CatSpendFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_catspend_free(ptr >>> 0, 1));\n\nclass CatSpend {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CatSpend.prototype);\n        obj.__wbg_ptr = ptr;\n        CatSpendFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof CatSpend)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CatSpendFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_catspend_free(ptr, 0);\n    }\n    /**\n     * @returns {CatSpend}\n     */\n    clone() {\n        const ret = wasm.catspend_clone(this.__wbg_ptr);\n        return CatSpend.__wrap(ret);\n    }\n    /**\n     * @param {Cat} cat\n     * @param {Spend} spend\n     */\n    constructor(cat, spend) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(cat, Cat);\n            var ptr0 = cat.__destroy_into_raw();\n            _assertClass(spend, Spend);\n            var ptr1 = spend.__destroy_into_raw();\n            wasm.catspend_new(retptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            CatSpendFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Cat}\n     */\n    get cat() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.catspend_cat(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Cat.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Cat} value\n     */\n    set cat(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Cat);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.catspend_set_cat(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Spend}\n     */\n    get spend() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.catspend_spend(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Spend.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Spend} value\n     */\n    set spend(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Spend);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.catspend_set_spend(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ChallengeChainSubSlotFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_challengechainsubslot_free(ptr >>> 0, 1));\n\nclass ChallengeChainSubSlot {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ChallengeChainSubSlot.prototype);\n        obj.__wbg_ptr = ptr;\n        ChallengeChainSubSlotFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ChallengeChainSubSlotFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_challengechainsubslot_free(ptr, 0);\n    }\n    /**\n     * @returns {ChallengeChainSubSlot}\n     */\n    clone() {\n        const ret = wasm.challengechainsubslot_clone(this.__wbg_ptr);\n        return ChallengeChainSubSlot.__wrap(ret);\n    }\n    /**\n     * @param {VDFInfo} challengeChainEndOfSlotVdf\n     * @param {Uint8Array | null} [infusedChallengeChainSubSlotHash]\n     * @param {Uint8Array | null} [subepochSummaryHash]\n     * @param {bigint | null} [newSubSlotIters]\n     * @param {bigint | null} [newDifficulty]\n     */\n    constructor(challengeChainEndOfSlotVdf, infusedChallengeChainSubSlotHash, subepochSummaryHash, newSubSlotIters, newDifficulty) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(challengeChainEndOfSlotVdf, VDFInfo);\n            var ptr0 = challengeChainEndOfSlotVdf.__destroy_into_raw();\n            var ptr1 = isLikeNone(infusedChallengeChainSubSlotHash) ? 0 : passArray8ToWasm0(infusedChallengeChainSubSlotHash, wasm.__wbindgen_export_1);\n            var len1 = WASM_VECTOR_LEN;\n            var ptr2 = isLikeNone(subepochSummaryHash) ? 0 : passArray8ToWasm0(subepochSummaryHash, wasm.__wbindgen_export_1);\n            var len2 = WASM_VECTOR_LEN;\n            wasm.challengechainsubslot_new(retptr, ptr0, ptr1, len1, ptr2, len2, isLikeNone(newSubSlotIters) ? 0 : addHeapObject(newSubSlotIters), isLikeNone(newDifficulty) ? 0 : addHeapObject(newDifficulty));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            ChallengeChainSubSlotFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VDFInfo}\n     */\n    get challengeChainEndOfSlotVdf() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.challengechainsubslot_challengeChainEndOfSlotVdf(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VDFInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {VDFInfo} value\n     */\n    set challengeChainEndOfSlotVdf(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, VDFInfo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.challengechainsubslot_set_challengeChainEndOfSlotVdf(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get infusedChallengeChainSubSlotHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.challengechainsubslot_infusedChallengeChainSubSlotHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set infusedChallengeChainSubSlotHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.challengechainsubslot_set_infusedChallengeChainSubSlotHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get subepochSummaryHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.challengechainsubslot_subepochSummaryHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set subepochSummaryHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.challengechainsubslot_set_subepochSummaryHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint | undefined}\n     */\n    get newSubSlotIters() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.challengechainsubslot_newSubSlotIters(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint | null} [value]\n     */\n    set newSubSlotIters(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.challengechainsubslot_set_newSubSlotIters(retptr, this.__wbg_ptr, isLikeNone(value) ? 0 : addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint | undefined}\n     */\n    get newDifficulty() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.challengechainsubslot_newDifficulty(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint | null} [value]\n     */\n    set newDifficulty(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.challengechainsubslot_set_newDifficulty(retptr, this.__wbg_ptr, isLikeNone(value) ? 0 : addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ClawbackFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_clawback_free(ptr >>> 0, 1));\n\nclass Clawback {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Clawback.prototype);\n        obj.__wbg_ptr = ptr;\n        ClawbackFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ClawbackFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_clawback_free(ptr, 0);\n    }\n    /**\n     * @returns {Clawback}\n     */\n    clone() {\n        const ret = wasm.clawback_clone(this.__wbg_ptr);\n        return Clawback.__wrap(ret);\n    }\n    /**\n     * @param {Spend} spend\n     * @returns {Spend}\n     */\n    senderSpend(spend) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(spend, Spend);\n            var ptr0 = spend.__destroy_into_raw();\n            wasm.clawback_senderSpend(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Spend.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Spend} spend\n     * @returns {Spend}\n     */\n    receiverSpend(spend) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(spend, Spend);\n            var ptr0 = spend.__destroy_into_raw();\n            wasm.clawback_receiverSpend(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Spend.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawback_puzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Clvm} clvm\n     * @returns {Remark}\n     */\n    getRemarkCondition(clvm) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            wasm.clawback_getRemarkCondition(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Remark.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} timelock\n     * @param {Uint8Array} senderPuzzleHash\n     * @param {Uint8Array} receiverPuzzleHash\n     */\n    constructor(timelock, senderPuzzleHash, receiverPuzzleHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(senderPuzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(receiverPuzzleHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.clawback_new(retptr, addHeapObject(timelock), ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            ClawbackFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get timelock() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawback_timelock(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set timelock(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawback_set_timelock(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get senderPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawback_senderPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set senderPuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clawback_set_senderPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get receiverPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawback_receiverPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set receiverPuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clawback_set_receiverPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ClawbackV2Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_clawbackv2_free(ptr >>> 0, 1));\n\nclass ClawbackV2 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ClawbackV2.prototype);\n        obj.__wbg_ptr = ptr;\n        ClawbackV2Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ClawbackV2Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_clawbackv2_free(ptr, 0);\n    }\n    /**\n     * @returns {ClawbackV2}\n     */\n    clone() {\n        const ret = wasm.clawbackv2_clone(this.__wbg_ptr);\n        return ClawbackV2.__wrap(ret);\n    }\n    /**\n     * @param {Program} memo\n     * @param {Uint8Array} receiverPuzzleHash\n     * @param {bigint} amount\n     * @param {boolean} hinted\n     * @param {Uint8Array} expectedPuzzleHash\n     * @returns {ClawbackV2 | undefined}\n     */\n    static fromMemo(memo, receiverPuzzleHash, amount, hinted, expectedPuzzleHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(memo, Program);\n            var ptr0 = memo.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(receiverPuzzleHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passArray8ToWasm0(expectedPuzzleHash, wasm.__wbindgen_export_1);\n            const len2 = WASM_VECTOR_LEN;\n            wasm.clawbackv2_fromMemo(retptr, ptr0, ptr1, len1, addHeapObject(amount), hinted, ptr2, len2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : ClawbackV2.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Spend} spend\n     * @returns {Spend}\n     */\n    senderSpend(spend) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(spend, Spend);\n            var ptr0 = spend.__destroy_into_raw();\n            wasm.clawbackv2_senderSpend(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Spend.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Spend} spend\n     * @returns {Spend}\n     */\n    receiverSpend(spend) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(spend, Spend);\n            var ptr0 = spend.__destroy_into_raw();\n            wasm.clawbackv2_receiverSpend(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Spend.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Clvm} clvm\n     * @returns {Spend}\n     */\n    pushThroughSpend(clvm) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            wasm.clawbackv2_pushThroughSpend(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Spend.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawbackv2_puzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Clvm} clvm\n     * @returns {Program}\n     */\n    memo(clvm) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            wasm.clawbackv2_memo(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} senderPuzzleHash\n     * @param {Uint8Array} receiverPuzzleHash\n     * @param {bigint} seconds\n     * @param {bigint} amount\n     * @param {boolean} hinted\n     */\n    constructor(senderPuzzleHash, receiverPuzzleHash, seconds, amount, hinted) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(senderPuzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(receiverPuzzleHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.clawbackv2_new(retptr, ptr0, len0, ptr1, len1, addHeapObject(seconds), addHeapObject(amount), hinted);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            ClawbackV2Finalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get senderPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawbackv2_senderPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set senderPuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clawbackv2_set_senderPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get receiverPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawbackv2_receiverPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set receiverPuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clawbackv2_set_receiverPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get seconds() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawbackv2_seconds(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set seconds(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawbackv2_set_seconds(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get amount() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawbackv2_amount(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set amount(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawbackv2_set_amount(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get hinted() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawbackv2_hinted(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set hinted(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawbackv2_set_hinted(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ClvmFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_clvm_free(ptr >>> 0, 1));\n\nclass Clvm {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Clvm.prototype);\n        obj.__wbg_ptr = ptr;\n        ClvmFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ClvmFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_clvm_free(ptr, 0);\n    }\n    /**\n     * @returns {Clvm}\n     */\n    clone() {\n        const ret = wasm.clvm_clone(this.__wbg_ptr);\n        return Clvm.__wrap(ret);\n    }\n    constructor() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_new(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            ClvmFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {CoinSpend} coinSpend\n     */\n    addCoinSpend(coinSpend) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(coinSpend, CoinSpend);\n            var ptr0 = coinSpend.__destroy_into_raw();\n            wasm.clvm_addCoinSpend(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} coin\n     * @param {Spend} spend\n     */\n    spendCoin(coin, spend) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(coin, Coin);\n            var ptr0 = coin.__destroy_into_raw();\n            _assertClass(spend, Spend);\n            var ptr1 = spend.__destroy_into_raw();\n            wasm.clvm_spendCoin(retptr, this.__wbg_ptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CoinSpend[]}\n     */\n    coinSpends() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_coinSpends(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} program\n     * @returns {Program}\n     */\n    parse(program) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_parse(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     * @returns {Program}\n     */\n    deserialize(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_deserialize(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     * @returns {Program}\n     */\n    deserializeWithBackrefs(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_deserializeWithBackrefs(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} modHash\n     * @param {Uint8Array} value\n     * @returns {Program}\n     */\n    cache(modHash, value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(modHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.clvm_cache(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} first\n     * @param {Program} rest\n     * @returns {Program}\n     */\n    pair(first, rest) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(first, Program);\n            var ptr0 = first.__destroy_into_raw();\n            _assertClass(rest, Program);\n            var ptr1 = rest.__destroy_into_raw();\n            wasm.clvm_pair(retptr, this.__wbg_ptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    nil() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_nil(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     * @returns {Program}\n     */\n    int(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_int(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} value\n     * @returns {Program}\n     */\n    string(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_string(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     * @returns {Program}\n     */\n    bool(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_bool(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     * @returns {Program}\n     */\n    atom(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_atom(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program[]} value\n     * @returns {Program}\n     */\n    list(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_list(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program[]} conditions\n     * @returns {Spend}\n     */\n    delegatedSpend(conditions) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(conditions, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_delegatedSpend(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Spend.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} syntheticKey\n     * @param {Spend} spend\n     * @returns {Spend}\n     */\n    standardSpend(syntheticKey, spend) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(syntheticKey, PublicKey);\n            var ptr0 = syntheticKey.__destroy_into_raw();\n            _assertClass(spend, Spend);\n            var ptr1 = spend.__destroy_into_raw();\n            wasm.clvm_standardSpend(retptr, this.__wbg_ptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Spend.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} coin\n     * @param {PublicKey} syntheticKey\n     * @param {Spend} spend\n     */\n    spendStandardCoin(coin, syntheticKey, spend) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(coin, Coin);\n            var ptr0 = coin.__destroy_into_raw();\n            _assertClass(syntheticKey, PublicKey);\n            var ptr1 = syntheticKey.__destroy_into_raw();\n            _assertClass(spend, Spend);\n            var ptr2 = spend.__destroy_into_raw();\n            wasm.clvm_spendStandardCoin(retptr, this.__wbg_ptr, ptr0, ptr1, ptr2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {CatSpend[]} catSpends\n     * @returns {Cat[]}\n     */\n    spendCats(catSpends) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(catSpends, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_spendCats(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v2 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} parentCoinId\n     * @param {NftMint[]} nftMints\n     * @returns {MintedNfts}\n     */\n    mintNfts(parentCoinId, nftMints) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(parentCoinId, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArrayJsValueToWasm0(nftMints, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.clvm_mintNfts(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MintedNfts.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Nft} nft\n     * @param {Spend} innerSpend\n     * @returns {Nft}\n     */\n    spendNft(nft, innerSpend) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(nft, Nft);\n            var ptr0 = nft.__destroy_into_raw();\n            _assertClass(innerSpend, Spend);\n            var ptr1 = innerSpend.__destroy_into_raw();\n            wasm.clvm_spendNft(retptr, this.__wbg_ptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Nft.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} parentCoinId\n     * @param {Uint8Array} p2PuzzleHash\n     * @returns {CreatedDid}\n     */\n    createEveDid(parentCoinId, p2PuzzleHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(parentCoinId, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(p2PuzzleHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.clvm_createEveDid(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CreatedDid.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Did} did\n     * @param {Spend} innerSpend\n     * @returns {Did | undefined}\n     */\n    spendDid(did, innerSpend) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(did, Did);\n            var ptr0 = did.__destroy_into_raw();\n            _assertClass(innerSpend, Spend);\n            var ptr1 = innerSpend.__destroy_into_raw();\n            wasm.clvm_spendDid(retptr, this.__wbg_ptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : Did.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {StreamedCat} streamedCat\n     * @param {bigint} paymentTime\n     * @param {boolean} clawback\n     */\n    spendStreamedCat(streamedCat, paymentTime, clawback) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(streamedCat, StreamedCat);\n            var ptr0 = streamedCat.__destroy_into_raw();\n            wasm.clvm_spendStreamedCat(retptr, this.__wbg_ptr, ptr0, addHeapObject(paymentTime), clawback);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} parentCoinId\n     * @param {Uint8Array} custodyHash\n     * @param {Program} memos\n     * @returns {VaultMint}\n     */\n    mintVault(parentCoinId, custodyHash, memos) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(parentCoinId, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(custodyHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            _assertClass(memos, Program);\n            var ptr2 = memos.__destroy_into_raw();\n            wasm.clvm_mintVault(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VaultMint.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} coin\n     * @param {Spend} delegatedSpend\n     * @returns {MipsSpend}\n     */\n    mipsSpend(coin, delegatedSpend) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(coin, Coin);\n            var ptr0 = coin.__destroy_into_raw();\n            _assertClass(delegatedSpend, Spend);\n            var ptr1 = delegatedSpend.__destroy_into_raw();\n            wasm.clvm_mipsSpend(retptr, this.__wbg_ptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MipsSpend.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {NftMetadata} value\n     * @returns {Program}\n     */\n    nftMetadata(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, NftMetadata);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.clvm_nftMetadata(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MipsMemo} value\n     * @returns {Program}\n     */\n    mipsMemo(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, MipsMemo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.clvm_mipsMemo(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {InnerPuzzleMemo} value\n     * @returns {Program}\n     */\n    innerPuzzleMemo(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, InnerPuzzleMemo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.clvm_innerPuzzleMemo(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {RestrictionMemo} value\n     * @returns {Program}\n     */\n    restrictionMemo(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, RestrictionMemo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.clvm_restrictionMemo(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {WrapperMemo} value\n     * @returns {Program}\n     */\n    wrapperMemo(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, WrapperMemo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.clvm_wrapperMemo(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Force1of2RestrictedVariableMemo} value\n     * @returns {Program}\n     */\n    force1Of2RestrictedVariableMemo(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Force1of2RestrictedVariableMemo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.clvm_force1Of2RestrictedVariableMemo(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MemoKind} value\n     * @returns {Program}\n     */\n    memoKind(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, MemoKind);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.clvm_memoKind(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MemberMemo} value\n     * @returns {Program}\n     */\n    memberMemo(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, MemberMemo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.clvm_memberMemo(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MofNMemo} value\n     * @returns {Program}\n     */\n    mOfNMemo(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, MofNMemo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.clvm_mOfNMemo(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} rest\n     * @returns {Program}\n     */\n    remark(rest) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(rest, Program);\n            var ptr0 = rest.__destroy_into_raw();\n            wasm.clvm_remark(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} message\n     * @returns {Program}\n     */\n    aggSigParent(publicKey, message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(publicKey, PublicKey);\n            var ptr0 = publicKey.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.clvm_aggSigParent(retptr, this.__wbg_ptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} message\n     * @returns {Program}\n     */\n    aggSigPuzzle(publicKey, message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(publicKey, PublicKey);\n            var ptr0 = publicKey.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.clvm_aggSigPuzzle(retptr, this.__wbg_ptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} message\n     * @returns {Program}\n     */\n    aggSigAmount(publicKey, message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(publicKey, PublicKey);\n            var ptr0 = publicKey.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.clvm_aggSigAmount(retptr, this.__wbg_ptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} message\n     * @returns {Program}\n     */\n    aggSigPuzzleAmount(publicKey, message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(publicKey, PublicKey);\n            var ptr0 = publicKey.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.clvm_aggSigPuzzleAmount(retptr, this.__wbg_ptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} message\n     * @returns {Program}\n     */\n    aggSigParentAmount(publicKey, message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(publicKey, PublicKey);\n            var ptr0 = publicKey.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.clvm_aggSigParentAmount(retptr, this.__wbg_ptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} message\n     * @returns {Program}\n     */\n    aggSigParentPuzzle(publicKey, message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(publicKey, PublicKey);\n            var ptr0 = publicKey.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.clvm_aggSigParentPuzzle(retptr, this.__wbg_ptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} message\n     * @returns {Program}\n     */\n    aggSigUnsafe(publicKey, message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(publicKey, PublicKey);\n            var ptr0 = publicKey.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.clvm_aggSigUnsafe(retptr, this.__wbg_ptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} message\n     * @returns {Program}\n     */\n    aggSigMe(publicKey, message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(publicKey, PublicKey);\n            var ptr0 = publicKey.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.clvm_aggSigMe(retptr, this.__wbg_ptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} puzzleHash\n     * @param {bigint} amount\n     * @param {Program | null} [memos]\n     * @returns {Program}\n     */\n    createCoin(puzzleHash, amount, memos) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            let ptr1 = 0;\n            if (!isLikeNone(memos)) {\n                _assertClass(memos, Program);\n                ptr1 = memos.__destroy_into_raw();\n            }\n            wasm.clvm_createCoin(retptr, this.__wbg_ptr, ptr0, len0, addHeapObject(amount), ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} amount\n     * @returns {Program}\n     */\n    reserveFee(amount) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_reserveFee(retptr, this.__wbg_ptr, addHeapObject(amount));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} message\n     * @returns {Program}\n     */\n    createCoinAnnouncement(message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_createCoinAnnouncement(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} message\n     * @returns {Program}\n     */\n    createPuzzleAnnouncement(message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_createPuzzleAnnouncement(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} announcementId\n     * @returns {Program}\n     */\n    assertCoinAnnouncement(announcementId) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(announcementId, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_assertCoinAnnouncement(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} announcementId\n     * @returns {Program}\n     */\n    assertPuzzleAnnouncement(announcementId) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(announcementId, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_assertPuzzleAnnouncement(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} coinId\n     * @returns {Program}\n     */\n    assertConcurrentSpend(coinId) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(coinId, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_assertConcurrentSpend(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} puzzleHash\n     * @returns {Program}\n     */\n    assertConcurrentPuzzle(puzzleHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_assertConcurrentPuzzle(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} seconds\n     * @returns {Program}\n     */\n    assertSecondsRelative(seconds) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_assertSecondsRelative(retptr, this.__wbg_ptr, addHeapObject(seconds));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} seconds\n     * @returns {Program}\n     */\n    assertSecondsAbsolute(seconds) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_assertSecondsAbsolute(retptr, this.__wbg_ptr, addHeapObject(seconds));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} height\n     * @returns {Program}\n     */\n    assertHeightRelative(height) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_assertHeightRelative(retptr, this.__wbg_ptr, height);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} height\n     * @returns {Program}\n     */\n    assertHeightAbsolute(height) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_assertHeightAbsolute(retptr, this.__wbg_ptr, height);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} seconds\n     * @returns {Program}\n     */\n    assertBeforeSecondsRelative(seconds) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_assertBeforeSecondsRelative(retptr, this.__wbg_ptr, addHeapObject(seconds));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} seconds\n     * @returns {Program}\n     */\n    assertBeforeSecondsAbsolute(seconds) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_assertBeforeSecondsAbsolute(retptr, this.__wbg_ptr, addHeapObject(seconds));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} height\n     * @returns {Program}\n     */\n    assertBeforeHeightRelative(height) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_assertBeforeHeightRelative(retptr, this.__wbg_ptr, height);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} height\n     * @returns {Program}\n     */\n    assertBeforeHeightAbsolute(height) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_assertBeforeHeightAbsolute(retptr, this.__wbg_ptr, height);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} coinId\n     * @returns {Program}\n     */\n    assertMyCoinId(coinId) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(coinId, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_assertMyCoinId(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} parentId\n     * @returns {Program}\n     */\n    assertMyParentId(parentId) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(parentId, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_assertMyParentId(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} puzzleHash\n     * @returns {Program}\n     */\n    assertMyPuzzleHash(puzzleHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_assertMyPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} amount\n     * @returns {Program}\n     */\n    assertMyAmount(amount) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_assertMyAmount(retptr, this.__wbg_ptr, addHeapObject(amount));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} seconds\n     * @returns {Program}\n     */\n    assertMyBirthSeconds(seconds) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_assertMyBirthSeconds(retptr, this.__wbg_ptr, addHeapObject(seconds));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} height\n     * @returns {Program}\n     */\n    assertMyBirthHeight(height) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_assertMyBirthHeight(retptr, this.__wbg_ptr, height);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    assertEphemeral() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_assertEphemeral(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} mode\n     * @param {Uint8Array} message\n     * @param {Program[]} data\n     * @returns {Program}\n     */\n    sendMessage(mode, message, data) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArrayJsValueToWasm0(data, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.clvm_sendMessage(retptr, this.__wbg_ptr, mode, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} mode\n     * @param {Uint8Array} message\n     * @param {Program[]} data\n     * @returns {Program}\n     */\n    receiveMessage(mode, message, data) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArrayJsValueToWasm0(data, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.clvm_receiveMessage(retptr, this.__wbg_ptr, mode, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} cost\n     * @param {Program} rest\n     * @returns {Program}\n     */\n    softfork(cost, rest) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(rest, Program);\n            var ptr0 = rest.__destroy_into_raw();\n            wasm.clvm_softfork(retptr, this.__wbg_ptr, addHeapObject(cost), ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    meltSingleton() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_meltSingleton(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null | undefined} launcherId\n     * @param {TradePrice[]} tradePrices\n     * @param {Uint8Array | null} [singletonInnerPuzzleHash]\n     * @returns {Program}\n     */\n    transferNft(launcherId, tradePrices, singletonInnerPuzzleHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(launcherId) ? 0 : passArray8ToWasm0(launcherId, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArrayJsValueToWasm0(tradePrices, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            var ptr2 = isLikeNone(singletonInnerPuzzleHash) ? 0 : passArray8ToWasm0(singletonInnerPuzzleHash, wasm.__wbindgen_export_1);\n            var len2 = WASM_VECTOR_LEN;\n            wasm.clvm_transferNft(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} program\n     * @param {Program} solution\n     * @returns {Program}\n     */\n    runCatTail(program, solution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(program, Program);\n            var ptr0 = program.__destroy_into_raw();\n            _assertClass(solution, Program);\n            var ptr1 = solution.__destroy_into_raw();\n            wasm.clvm_runCatTail(retptr, this.__wbg_ptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} updaterPuzzleReveal\n     * @param {Program} updaterSolution\n     * @returns {Program}\n     */\n    updateNftMetadata(updaterPuzzleReveal, updaterSolution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(updaterPuzzleReveal, Program);\n            var ptr0 = updaterPuzzleReveal.__destroy_into_raw();\n            _assertClass(updaterSolution, Program);\n            var ptr1 = updaterSolution.__destroy_into_raw();\n            wasm.clvm_updateNftMetadata(retptr, this.__wbg_ptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} newMerkleRoot\n     * @param {Array<any>} memos\n     * @returns {Program}\n     */\n    updateDataStoreMerkleRoot(newMerkleRoot, memos) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(newMerkleRoot, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clvm_updateDataStoreMerkleRoot(retptr, this.__wbg_ptr, ptr0, len0, addHeapObject(memos));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     * @returns {Program}\n     */\n    boundCheckedNumber(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clvm_boundCheckedNumber(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst CoinFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_coin_free(ptr >>> 0, 1));\n\nclass Coin {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Coin.prototype);\n        obj.__wbg_ptr = ptr;\n        CoinFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof Coin)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CoinFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coin_free(ptr, 0);\n    }\n    /**\n     * @returns {Coin}\n     */\n    clone() {\n        const ret = wasm.coin_clone(this.__wbg_ptr);\n        return Coin.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    coinId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coin_coinId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} parentCoinInfo\n     * @param {Uint8Array} puzzleHash\n     * @param {bigint} amount\n     */\n    constructor(parentCoinInfo, puzzleHash, amount) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(parentCoinInfo, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.coin_new(retptr, ptr0, len0, ptr1, len1, addHeapObject(amount));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            CoinFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get parentCoinInfo() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawback_senderPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set parentCoinInfo(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clawback_set_senderPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawback_receiverPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set puzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clawback_set_receiverPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get amount() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawback_timelock(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set amount(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawback_set_timelock(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst CoinRecordFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_coinrecord_free(ptr >>> 0, 1));\n\nclass CoinRecord {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CoinRecord.prototype);\n        obj.__wbg_ptr = ptr;\n        CoinRecordFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof CoinRecord)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CoinRecordFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coinrecord_free(ptr, 0);\n    }\n    /**\n     * @returns {CoinRecord}\n     */\n    clone() {\n        const ret = wasm.coinrecord_clone(this.__wbg_ptr);\n        return CoinRecord.__wrap(ret);\n    }\n    /**\n     * @param {Coin} coin\n     * @param {boolean} coinbase\n     * @param {number} confirmedBlockIndex\n     * @param {boolean} spent\n     * @param {number} spentBlockIndex\n     * @param {bigint} timestamp\n     */\n    constructor(coin, coinbase, confirmedBlockIndex, spent, spentBlockIndex, timestamp) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(coin, Coin);\n            var ptr0 = coin.__destroy_into_raw();\n            wasm.coinrecord_new(retptr, ptr0, coinbase, confirmedBlockIndex, spent, spentBlockIndex, addHeapObject(timestamp));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            CoinRecordFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Coin}\n     */\n    get coin() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinrecord_coin(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Coin.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} value\n     */\n    set coin(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Coin);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.coinrecord_set_coin(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get coinbase() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinrecord_coinbase(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set coinbase(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinrecord_set_coinbase(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get confirmedBlockIndex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinrecord_confirmedBlockIndex(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set confirmedBlockIndex(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinrecord_set_confirmedBlockIndex(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get spent() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinrecord_spent(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set spent(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinrecord_set_spent(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get spentBlockIndex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinrecord_spentBlockIndex(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set spentBlockIndex(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinrecord_set_spentBlockIndex(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get timestamp() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinrecord_timestamp(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set timestamp(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinrecord_set_timestamp(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst CoinSpendFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_coinspend_free(ptr >>> 0, 1));\n\nclass CoinSpend {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CoinSpend.prototype);\n        obj.__wbg_ptr = ptr;\n        CoinSpendFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof CoinSpend)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CoinSpendFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coinspend_free(ptr, 0);\n    }\n    /**\n     * @returns {CoinSpend}\n     */\n    clone() {\n        const ret = wasm.coinspend_clone(this.__wbg_ptr);\n        return CoinSpend.__wrap(ret);\n    }\n    /**\n     * @param {Coin} coin\n     * @param {Uint8Array} puzzleReveal\n     * @param {Uint8Array} solution\n     */\n    constructor(coin, puzzleReveal, solution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(coin, Coin);\n            var ptr0 = coin.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(puzzleReveal, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passArray8ToWasm0(solution, wasm.__wbindgen_export_1);\n            const len2 = WASM_VECTOR_LEN;\n            wasm.coinspend_new(retptr, ptr0, ptr1, len1, ptr2, len2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            CoinSpendFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Coin}\n     */\n    get coin() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinrecord_coin(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Coin.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} value\n     */\n    set coin(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Coin);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.coinspend_set_coin(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get puzzleReveal() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinspend_puzzleReveal(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set puzzleReveal(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.coinspend_set_puzzleReveal(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get solution() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinspend_solution(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set solution(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.coinspend_set_solution(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst CoinsetClientFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_coinsetclient_free(ptr >>> 0, 1));\n\nclass CoinsetClient {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CoinsetClient.prototype);\n        obj.__wbg_ptr = ptr;\n        CoinsetClientFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CoinsetClientFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coinsetclient_free(ptr, 0);\n    }\n    /**\n     * @returns {CoinsetClient}\n     */\n    clone() {\n        const ret = wasm.coinsetclient_clone(this.__wbg_ptr);\n        return CoinsetClient.__wrap(ret);\n    }\n    /**\n     * @param {string} baseUrl\n     */\n    constructor(baseUrl) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(baseUrl, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.coinsetclient_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            CoinsetClientFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CoinsetClient}\n     */\n    static testnet11() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinsetclient_testnet11(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CoinsetClient.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CoinsetClient}\n     */\n    static mainnet() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinsetclient_mainnet(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CoinsetClient.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Promise<BlockchainStateResponse>}\n     */\n    getBlockchainState() {\n        const ret = wasm.coinsetclient_getBlockchainState(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {Uint8Array} headerHash\n     * @returns {Promise<AdditionsAndRemovalsResponse>}\n     */\n    getAdditionsAndRemovals(headerHash) {\n        const ptr0 = passArray8ToWasm0(headerHash, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.coinsetclient_getAdditionsAndRemovals(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n     * @param {Uint8Array} headerHash\n     * @returns {Promise<GetBlockResponse>}\n     */\n    getBlock(headerHash) {\n        const ptr0 = passArray8ToWasm0(headerHash, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.coinsetclient_getBlock(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n     * @param {Uint8Array} headerHash\n     * @returns {Promise<GetBlockRecordResponse>}\n     */\n    getBlockRecord(headerHash) {\n        const ptr0 = passArray8ToWasm0(headerHash, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.coinsetclient_getBlockRecord(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n     * @param {number} height\n     * @returns {Promise<GetBlockRecordResponse>}\n     */\n    getBlockRecordByHeight(height) {\n        const ret = wasm.coinsetclient_getBlockRecordByHeight(this.__wbg_ptr, height);\n        return takeObject(ret);\n    }\n    /**\n     * @param {number} startHeight\n     * @param {number} endHeight\n     * @returns {Promise<GetBlockRecordsResponse>}\n     */\n    getBlockRecords(startHeight, endHeight) {\n        const ret = wasm.coinsetclient_getBlockRecords(this.__wbg_ptr, startHeight, endHeight);\n        return takeObject(ret);\n    }\n    /**\n     * @param {number} start\n     * @param {number} end\n     * @param {boolean} excludeHeaderHash\n     * @param {boolean} excludeReorged\n     * @returns {Promise<GetBlocksResponse>}\n     */\n    getBlocks(start, end, excludeHeaderHash, excludeReorged) {\n        const ret = wasm.coinsetclient_getBlocks(this.__wbg_ptr, start, end, excludeHeaderHash, excludeReorged);\n        return takeObject(ret);\n    }\n    /**\n     * @param {Uint8Array} headerHash\n     * @returns {Promise<GetBlockSpendsResponse>}\n     */\n    getBlockSpends(headerHash) {\n        const ptr0 = passArray8ToWasm0(headerHash, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.coinsetclient_getBlockSpends(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n     * @param {Uint8Array} name\n     * @returns {Promise<GetCoinRecordResponse>}\n     */\n    getCoinRecordByName(name) {\n        const ptr0 = passArray8ToWasm0(name, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.coinsetclient_getCoinRecordByName(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n     * @param {Uint8Array} hint\n     * @param {number | null} [startHeight]\n     * @param {number | null} [endHeight]\n     * @param {boolean | null} [includeSpentCoins]\n     * @returns {Promise<GetCoinRecordsResponse>}\n     */\n    getCoinRecordsByHint(hint, startHeight, endHeight, includeSpentCoins) {\n        const ptr0 = passArray8ToWasm0(hint, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.coinsetclient_getCoinRecordsByHint(this.__wbg_ptr, ptr0, len0, isLikeNone(startHeight) ? 0x100000001 : (startHeight) >>> 0, isLikeNone(endHeight) ? 0x100000001 : (endHeight) >>> 0, isLikeNone(includeSpentCoins) ? 0xFFFFFF : includeSpentCoins ? 1 : 0);\n        return takeObject(ret);\n    }\n    /**\n     * @param {Array<any>} names\n     * @param {number | null} [startHeight]\n     * @param {number | null} [endHeight]\n     * @param {boolean | null} [includeSpentCoins]\n     * @returns {Promise<GetCoinRecordsResponse>}\n     */\n    getCoinRecordsByNames(names, startHeight, endHeight, includeSpentCoins) {\n        const ret = wasm.coinsetclient_getCoinRecordsByNames(this.__wbg_ptr, addHeapObject(names), isLikeNone(startHeight) ? 0x100000001 : (startHeight) >>> 0, isLikeNone(endHeight) ? 0x100000001 : (endHeight) >>> 0, isLikeNone(includeSpentCoins) ? 0xFFFFFF : includeSpentCoins ? 1 : 0);\n        return takeObject(ret);\n    }\n    /**\n     * @param {Array<any>} parentIds\n     * @param {number | null} [startHeight]\n     * @param {number | null} [endHeight]\n     * @param {boolean | null} [includeSpentCoins]\n     * @returns {Promise<GetCoinRecordsResponse>}\n     */\n    getCoinRecordsByParentIds(parentIds, startHeight, endHeight, includeSpentCoins) {\n        const ret = wasm.coinsetclient_getCoinRecordsByParentIds(this.__wbg_ptr, addHeapObject(parentIds), isLikeNone(startHeight) ? 0x100000001 : (startHeight) >>> 0, isLikeNone(endHeight) ? 0x100000001 : (endHeight) >>> 0, isLikeNone(includeSpentCoins) ? 0xFFFFFF : includeSpentCoins ? 1 : 0);\n        return takeObject(ret);\n    }\n    /**\n     * @param {Uint8Array} puzzleHash\n     * @param {number | null} [startHeight]\n     * @param {number | null} [endHeight]\n     * @param {boolean | null} [includeSpentCoins]\n     * @returns {Promise<GetCoinRecordsResponse>}\n     */\n    getCoinRecordsByPuzzleHash(puzzleHash, startHeight, endHeight, includeSpentCoins) {\n        const ptr0 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.coinsetclient_getCoinRecordsByPuzzleHash(this.__wbg_ptr, ptr0, len0, isLikeNone(startHeight) ? 0x100000001 : (startHeight) >>> 0, isLikeNone(endHeight) ? 0x100000001 : (endHeight) >>> 0, isLikeNone(includeSpentCoins) ? 0xFFFFFF : includeSpentCoins ? 1 : 0);\n        return takeObject(ret);\n    }\n    /**\n     * @param {Array<any>} puzzleHashes\n     * @param {number | null} [startHeight]\n     * @param {number | null} [endHeight]\n     * @param {boolean | null} [includeSpentCoins]\n     * @returns {Promise<GetCoinRecordsResponse>}\n     */\n    getCoinRecordsByPuzzleHashes(puzzleHashes, startHeight, endHeight, includeSpentCoins) {\n        const ret = wasm.coinsetclient_getCoinRecordsByPuzzleHashes(this.__wbg_ptr, addHeapObject(puzzleHashes), isLikeNone(startHeight) ? 0x100000001 : (startHeight) >>> 0, isLikeNone(endHeight) ? 0x100000001 : (endHeight) >>> 0, isLikeNone(includeSpentCoins) ? 0xFFFFFF : includeSpentCoins ? 1 : 0);\n        return takeObject(ret);\n    }\n    /**\n     * @param {Uint8Array} coinId\n     * @param {number | null} [height]\n     * @returns {Promise<GetPuzzleAndSolutionResponse>}\n     */\n    getPuzzleAndSolution(coinId, height) {\n        const ptr0 = passArray8ToWasm0(coinId, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.coinsetclient_getPuzzleAndSolution(this.__wbg_ptr, ptr0, len0, isLikeNone(height) ? 0x100000001 : (height) >>> 0);\n        return takeObject(ret);\n    }\n    /**\n     * @param {SpendBundle} spendBundle\n     * @returns {Promise<PushTxResponse>}\n     */\n    pushTx(spendBundle) {\n        _assertClass(spendBundle, SpendBundle);\n        var ptr0 = spendBundle.__destroy_into_raw();\n        const ret = wasm.coinsetclient_pushTx(this.__wbg_ptr, ptr0);\n        return takeObject(ret);\n    }\n    /**\n     * @returns {Promise<GetNetworkInfoResponse>}\n     */\n    getNetworkInfo() {\n        const ret = wasm.coinsetclient_getNetworkInfo(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {Uint8Array} txId\n     * @returns {Promise<GetMempoolItemResponse>}\n     */\n    getMempoolItemByTxId(txId) {\n        const ptr0 = passArray8ToWasm0(txId, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.coinsetclient_getMempoolItemByTxId(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n     * @param {Uint8Array} coinName\n     * @returns {Promise<GetMempoolItemsResponse>}\n     */\n    getMempoolItemsByCoinName(coinName) {\n        const ptr0 = passArray8ToWasm0(coinName, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.coinsetclient_getMempoolItemsByCoinName(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n}\n\nconst ConstantsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_constants_free(ptr >>> 0, 1));\n\nclass Constants {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Constants.prototype);\n        obj.__wbg_ptr = ptr;\n        ConstantsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ConstantsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_constants_free(ptr, 0);\n    }\n    /**\n     * @returns {Constants}\n     */\n    clone() {\n        const ret = wasm.assertephemeral_clone(this.__wbg_ptr);\n        return Constants.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static acsTransferProgram() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_acsTransferProgram(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static acsTransferProgramHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_acsTransferProgramHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static augmentedCondition() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_augmentedCondition(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static augmentedConditionHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_augmentedConditionHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static blockProgramZero() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_blockProgramZero(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static blockProgramZeroHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_blockProgramZeroHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static catPuzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_catPuzzle(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static catPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_catPuzzleHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static chialispDeserialisation() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_chialispDeserialisation(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static chialispDeserialisationHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_chialispDeserialisationHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static conditionsWFeeAnnounce() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_conditionsWFeeAnnounce(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static conditionsWFeeAnnounceHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_conditionsWFeeAnnounceHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static covenantLayer() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_covenantLayer(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static covenantLayerHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_covenantLayerHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static createNftLauncherFromDid() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_createNftLauncherFromDid(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static createNftLauncherFromDidHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_createNftLauncherFromDidHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static credentialRestriction() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_credentialRestriction(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static credentialRestrictionHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_credentialRestrictionHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoCatEve() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoCatEve(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoCatEveHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoCatEveHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoCatLauncher() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoCatLauncher(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoCatLauncherHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoCatLauncherHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoFinishedState() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoFinishedState(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoFinishedStateHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoFinishedStateHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoLockup() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoLockup(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoLockupHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoLockupHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoProposal() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoProposal(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoProposalHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoProposalHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoProposalTimer() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoProposalTimer(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoProposalTimerHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoProposalTimerHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoProposalValidator() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoProposalValidator(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoProposalValidatorHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoProposalValidatorHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoSpendP2Singleton() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoSpendP2Singleton(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoSpendP2SingletonHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoSpendP2SingletonHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoTreasury() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoTreasury(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoTreasuryHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoTreasuryHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoUpdateProposal() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoUpdateProposal(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static daoUpdateProposalHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_daoUpdateProposalHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static decompressCoinSpendEntry() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_decompressCoinSpendEntry(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static decompressCoinSpendEntryHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_decompressCoinSpendEntryHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static decompressCoinSpendEntryWithPrefix() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_decompressCoinSpendEntryWithPrefix(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static decompressCoinSpendEntryWithPrefixHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_decompressCoinSpendEntryWithPrefixHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static decompressPuzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_decompressPuzzle(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static decompressPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_decompressPuzzleHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static delegatedTail() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_delegatedTail(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static delegatedTailHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_delegatedTailHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static didInnerpuzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_didInnerpuzzle(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static didInnerpuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_didInnerpuzzleHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static emlCovenantMorpher() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_emlCovenantMorpher(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static emlCovenantMorpherHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_emlCovenantMorpherHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static emlTransferProgramCovenantAdapter() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_emlTransferProgramCovenantAdapter(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static emlTransferProgramCovenantAdapterHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_emlTransferProgramCovenantAdapterHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static emlUpdateMetadataWithDid() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_emlUpdateMetadataWithDid(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static emlUpdateMetadataWithDidHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_emlUpdateMetadataWithDidHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static everythingWithSignature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_everythingWithSignature(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static everythingWithSignatureHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_everythingWithSignatureHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static exigentMetadataLayer() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_exigentMetadataLayer(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static exigentMetadataLayerHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_exigentMetadataLayerHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static flagProofsChecker() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_flagProofsChecker(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static flagProofsCheckerHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_flagProofsCheckerHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static genesisByCoinId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_genesisByCoinId(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static genesisByCoinIdHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_genesisByCoinIdHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static genesisByCoinIdOrSingleton() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_genesisByCoinIdOrSingleton(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static genesisByCoinIdOrSingletonHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_genesisByCoinIdOrSingletonHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static genesisByPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_genesisByPuzzleHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static genesisByPuzzleHashHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_genesisByPuzzleHashHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static graftrootDlOffers() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_graftrootDlOffers(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static graftrootDlOffersHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_graftrootDlOffersHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static nftIntermediateLauncher() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_createNftLauncherFromDid(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static nftIntermediateLauncherHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_createNftLauncherFromDidHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static nftMetadataUpdaterDefault() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_nftMetadataUpdaterDefault(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static nftMetadataUpdaterDefaultHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_nftMetadataUpdaterDefaultHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static nftMetadataUpdaterUpdateable() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_nftMetadataUpdaterUpdateable(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static nftMetadataUpdaterUpdateableHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_nftMetadataUpdaterUpdateableHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static nftOwnershipLayer() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_nftOwnershipLayer(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static nftOwnershipLayerHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_nftOwnershipLayerHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static nftOwnershipTransferProgramOneWayClaimWithRoyalties() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_nftOwnershipTransferProgramOneWayClaimWithRoyalties(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static nftOwnershipTransferProgramOneWayClaimWithRoyaltiesHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_nftOwnershipTransferProgramOneWayClaimWithRoyaltiesHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static nftStateLayer() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_nftStateLayer(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static nftStateLayerHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_nftStateLayerHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static notification() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_notification(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static notificationHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_notificationHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p21OfN() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p21OfN(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p21OfNHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p21OfNHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2AnnouncedDelegatedPuzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2AnnouncedDelegatedPuzzle(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2AnnouncedDelegatedPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2AnnouncedDelegatedPuzzleHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2Conditions() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2Conditions(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2ConditionsHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2ConditionsHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2DelegatedConditions() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2DelegatedConditions(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2DelegatedConditionsHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2DelegatedConditionsHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2DelegatedPuzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2DelegatedPuzzle(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2DelegatedPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2DelegatedPuzzleHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2DelegatedPuzzleOrHiddenPuzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2DelegatedPuzzleOrHiddenPuzzle(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2DelegatedPuzzleOrHiddenPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2DelegatedPuzzleOrHiddenPuzzleHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2MOfNDelegateDirect() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2MOfNDelegateDirect(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2MOfNDelegateDirectHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2MOfNDelegateDirectHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2Parent() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2Parent(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2ParentHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2ParentHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2PuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2Curried(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2PuzzleHashHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2CurriedHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2Singleton() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2Singleton(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2SingletonHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2SingletonHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2SingletonAggregator() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2SingletonAggregator(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2SingletonAggregatorHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2SingletonAggregatorHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2SingletonOrDelayedPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2SingletonOrDelayedPuzzleHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2SingletonOrDelayedPuzzleHashHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2SingletonOrDelayedPuzzleHashHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2SingletonViaDelegatedPuzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2SingletonViaDelegatedPuzzle(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2SingletonViaDelegatedPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2SingletonViaDelegatedPuzzleHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static poolMemberInnerpuzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_poolMemberInnerpuzzle(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static poolMemberInnerpuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_poolMemberInnerpuzzleHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static poolWaitingroomInnerpuzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_poolWaitingroomInnerpuzzle(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static poolWaitingroomInnerpuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_poolWaitingroomInnerpuzzleHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static revocationLayer() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_revocationLayer(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static revocationLayerHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_revocationLayerHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static romBootstrapGenerator() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_romBootstrapGenerator(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static romBootstrapGeneratorHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_romBootstrapGeneratorHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static settlementPayment() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_settlementPayment(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static settlementPaymentHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_settlementPaymentHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static singletonLauncher() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_singletonLauncher(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static singletonLauncherHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_singletonLauncherHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static singletonTopLayer() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_singletonTopLayer(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static singletonTopLayerHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_singletonTopLayerHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static singletonTopLayerV11() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_singletonTopLayerV11(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static singletonTopLayerV11Hash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_singletonTopLayerV11Hash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static standardVcRevocationPuzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_standardVcRevocationPuzzle(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static standardVcRevocationPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_standardVcRevocationPuzzleHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static stdParentMorpher() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_stdParentMorpher(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static stdParentMorpherHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_stdParentMorpherHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static optionContract() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_optionContract(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static optionContractHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_optionContractHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2Curried() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2Curried(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    static p2CurriedHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constants_p2CurriedHash(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst CreateCoinFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_createcoin_free(ptr >>> 0, 1));\n\nclass CreateCoin {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CreateCoin.prototype);\n        obj.__wbg_ptr = ptr;\n        CreateCoinFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CreateCoinFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_createcoin_free(ptr, 0);\n    }\n    /**\n     * @returns {CreateCoin}\n     */\n    clone() {\n        const ret = wasm.createcoin_clone(this.__wbg_ptr);\n        return CreateCoin.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} puzzleHash\n     * @param {bigint} amount\n     * @param {Program | null} [memos]\n     */\n    constructor(puzzleHash, amount, memos) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            let ptr1 = 0;\n            if (!isLikeNone(memos)) {\n                _assertClass(memos, Program);\n                ptr1 = memos.__destroy_into_raw();\n            }\n            wasm.createcoin_new(retptr, ptr0, len0, addHeapObject(amount), ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            CreateCoinFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.createcoin_puzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set puzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.createcoin_set_puzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get amount() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.createcoin_amount(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set amount(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.createcoin_set_amount(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program | undefined}\n     */\n    get memos() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.createcoin_memos(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program | null} [value]\n     */\n    set memos(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, Program);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.createcoin_set_memos(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst CreateCoinAnnouncementFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_createcoinannouncement_free(ptr >>> 0, 1));\n\nclass CreateCoinAnnouncement {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CreateCoinAnnouncement.prototype);\n        obj.__wbg_ptr = ptr;\n        CreateCoinAnnouncementFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CreateCoinAnnouncementFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_createcoinannouncement_free(ptr, 0);\n    }\n    /**\n     * @returns {CreateCoinAnnouncement}\n     */\n    clone() {\n        const ret = wasm.createcoinannouncement_clone(this.__wbg_ptr);\n        return CreateCoinAnnouncement.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} message\n     */\n    constructor(message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.createcoinannouncement_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            CreateCoinAnnouncementFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get message() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.createcoinannouncement_message(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set message(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.createcoinannouncement_set_message(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst CreatePuzzleAnnouncementFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_createpuzzleannouncement_free(ptr >>> 0, 1));\n\nclass CreatePuzzleAnnouncement {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CreatePuzzleAnnouncement.prototype);\n        obj.__wbg_ptr = ptr;\n        CreatePuzzleAnnouncementFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CreatePuzzleAnnouncementFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_createpuzzleannouncement_free(ptr, 0);\n    }\n    /**\n     * @returns {CreatePuzzleAnnouncement}\n     */\n    clone() {\n        const ret = wasm.createcoinannouncement_clone(this.__wbg_ptr);\n        return CreatePuzzleAnnouncement.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} message\n     */\n    constructor(message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.createcoinannouncement_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            CreatePuzzleAnnouncementFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get message() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.createcoinannouncement_message(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set message(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.createcoinannouncement_set_message(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst CreatedDidFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_createddid_free(ptr >>> 0, 1));\n\nclass CreatedDid {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CreatedDid.prototype);\n        obj.__wbg_ptr = ptr;\n        CreatedDidFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CreatedDidFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_createddid_free(ptr, 0);\n    }\n    /**\n     * @returns {CreatedDid}\n     */\n    clone() {\n        const ret = wasm.createddid_clone(this.__wbg_ptr);\n        return CreatedDid.__wrap(ret);\n    }\n    /**\n     * @param {Did} did\n     * @param {Program[]} parentConditions\n     */\n    constructor(did, parentConditions) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(did, Did);\n            var ptr0 = did.__destroy_into_raw();\n            const ptr1 = passArrayJsValueToWasm0(parentConditions, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.createddid_new(retptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            CreatedDidFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Did}\n     */\n    get did() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.createddid_did(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Did.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Did} value\n     */\n    set did(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Did);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.createddid_set_did(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program[]}\n     */\n    get parentConditions() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.createddid_parentConditions(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program[]} value\n     */\n    set parentConditions(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.createddid_set_parentConditions(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst CurriedProgramFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_curriedprogram_free(ptr >>> 0, 1));\n\nclass CurriedProgram {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CurriedProgram.prototype);\n        obj.__wbg_ptr = ptr;\n        CurriedProgramFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CurriedProgramFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_curriedprogram_free(ptr, 0);\n    }\n    /**\n     * @returns {CurriedProgram}\n     */\n    clone() {\n        const ret = wasm.curriedprogram_clone(this.__wbg_ptr);\n        return CurriedProgram.__wrap(ret);\n    }\n    /**\n     * @param {Program} program\n     * @param {Program[]} args\n     */\n    constructor(program, args) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(program, Program);\n            var ptr0 = program.__destroy_into_raw();\n            const ptr1 = passArrayJsValueToWasm0(args, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.curriedprogram_new(retptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            CurriedProgramFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get program() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.curriedprogram_program(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set program(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.curriedprogram_set_program(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program[]}\n     */\n    get args() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.curriedprogram_args(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program[]} value\n     */\n    set args(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.curriedprogram_set_args(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst DidFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_did_free(ptr >>> 0, 1));\n\nclass Did {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Did.prototype);\n        obj.__wbg_ptr = ptr;\n        DidFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DidFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_did_free(ptr, 0);\n    }\n    /**\n     * @returns {Did}\n     */\n    clone() {\n        const ret = wasm.did_clone(this.__wbg_ptr);\n        return Did.__wrap(ret);\n    }\n    /**\n     * @returns {Proof}\n     */\n    childProof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.did_childProof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Proof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} p2PuzzleHash\n     * @param {Program} metadata\n     * @returns {Did}\n     */\n    child(p2PuzzleHash, metadata) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(p2PuzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(metadata, Program);\n            var ptr1 = metadata.__destroy_into_raw();\n            wasm.did_child(retptr, this.__wbg_ptr, ptr0, len0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Did.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {DidInfo} info\n     * @returns {Did}\n     */\n    childWith(info) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(info, DidInfo);\n            var ptr0 = info.__destroy_into_raw();\n            wasm.did_childWith(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Did.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} coin\n     * @param {Proof} proof\n     * @param {DidInfo} info\n     */\n    constructor(coin, proof, info) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(coin, Coin);\n            var ptr0 = coin.__destroy_into_raw();\n            _assertClass(proof, Proof);\n            var ptr1 = proof.__destroy_into_raw();\n            _assertClass(info, DidInfo);\n            var ptr2 = info.__destroy_into_raw();\n            wasm.did_new(retptr, ptr0, ptr1, ptr2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            DidFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Coin}\n     */\n    get coin() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinrecord_coin(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Coin.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} value\n     */\n    set coin(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Coin);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.did_set_coin(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Proof}\n     */\n    get proof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.did_proof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Proof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Proof} value\n     */\n    set proof(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Proof);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.did_set_proof(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {DidInfo}\n     */\n    get info() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.did_info(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DidInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {DidInfo} value\n     */\n    set info(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, DidInfo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.did_set_info(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst DidInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_didinfo_free(ptr >>> 0, 1));\n\nclass DidInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DidInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        DidInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DidInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_didinfo_free(ptr, 0);\n    }\n    /**\n     * @returns {DidInfo}\n     */\n    clone() {\n        const ret = wasm.didinfo_clone(this.__wbg_ptr);\n        return DidInfo.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    innerPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.didinfo_innerPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.didinfo_puzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} launcherId\n     * @param {Uint8Array | null | undefined} recoveryListHash\n     * @param {bigint} numVerificationsRequired\n     * @param {Program} metadata\n     * @param {Uint8Array} p2PuzzleHash\n     */\n    constructor(launcherId, recoveryListHash, numVerificationsRequired, metadata, p2PuzzleHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(launcherId, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(recoveryListHash) ? 0 : passArray8ToWasm0(recoveryListHash, wasm.__wbindgen_export_1);\n            var len1 = WASM_VECTOR_LEN;\n            _assertClass(metadata, Program);\n            var ptr2 = metadata.__destroy_into_raw();\n            const ptr3 = passArray8ToWasm0(p2PuzzleHash, wasm.__wbindgen_export_1);\n            const len3 = WASM_VECTOR_LEN;\n            wasm.didinfo_new(retptr, ptr0, len0, ptr1, len1, addHeapObject(numVerificationsRequired), ptr2, ptr3, len3);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            DidInfoFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get launcherId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.didinfo_launcherId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set launcherId(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.didinfo_set_launcherId(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get recoveryListHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.didinfo_recoveryListHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set recoveryListHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.didinfo_set_recoveryListHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get numVerificationsRequired() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.didinfo_numVerificationsRequired(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set numVerificationsRequired(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.didinfo_set_numVerificationsRequired(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get metadata() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.didinfo_metadata(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set metadata(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.didinfo_set_metadata(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get p2PuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.didinfo_p2PuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set p2PuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.didinfo_set_p2PuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst EndOfSubSlotBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_endofsubslotbundle_free(ptr >>> 0, 1));\n\nclass EndOfSubSlotBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EndOfSubSlotBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        EndOfSubSlotBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof EndOfSubSlotBundle)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EndOfSubSlotBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_endofsubslotbundle_free(ptr, 0);\n    }\n    /**\n     * @returns {EndOfSubSlotBundle}\n     */\n    clone() {\n        const ret = wasm.endofsubslotbundle_clone(this.__wbg_ptr);\n        return EndOfSubSlotBundle.__wrap(ret);\n    }\n    /**\n     * @param {ChallengeChainSubSlot} challengeChain\n     * @param {InfusedChallengeChainSubSlot | null | undefined} infusedChallengeChain\n     * @param {RewardChainSubSlot} rewardChain\n     * @param {SubSlotProofs} proofs\n     */\n    constructor(challengeChain, infusedChallengeChain, rewardChain, proofs) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(challengeChain, ChallengeChainSubSlot);\n            var ptr0 = challengeChain.__destroy_into_raw();\n            let ptr1 = 0;\n            if (!isLikeNone(infusedChallengeChain)) {\n                _assertClass(infusedChallengeChain, InfusedChallengeChainSubSlot);\n                ptr1 = infusedChallengeChain.__destroy_into_raw();\n            }\n            _assertClass(rewardChain, RewardChainSubSlot);\n            var ptr2 = rewardChain.__destroy_into_raw();\n            _assertClass(proofs, SubSlotProofs);\n            var ptr3 = proofs.__destroy_into_raw();\n            wasm.endofsubslotbundle_new(retptr, ptr0, ptr1, ptr2, ptr3);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            EndOfSubSlotBundleFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ChallengeChainSubSlot}\n     */\n    get challengeChain() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.endofsubslotbundle_challengeChain(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ChallengeChainSubSlot.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {ChallengeChainSubSlot} value\n     */\n    set challengeChain(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, ChallengeChainSubSlot);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.endofsubslotbundle_set_challengeChain(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {InfusedChallengeChainSubSlot | undefined}\n     */\n    get infusedChallengeChain() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.endofsubslotbundle_infusedChallengeChain(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : InfusedChallengeChainSubSlot.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {InfusedChallengeChainSubSlot | null} [value]\n     */\n    set infusedChallengeChain(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, InfusedChallengeChainSubSlot);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.endofsubslotbundle_set_infusedChallengeChain(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {RewardChainSubSlot}\n     */\n    get rewardChain() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.endofsubslotbundle_rewardChain(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RewardChainSubSlot.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {RewardChainSubSlot} value\n     */\n    set rewardChain(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, RewardChainSubSlot);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.endofsubslotbundle_set_rewardChain(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {SubSlotProofs}\n     */\n    get proofs() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.endofsubslotbundle_proofs(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SubSlotProofs.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {SubSlotProofs} value\n     */\n    set proofs(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, SubSlotProofs);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.endofsubslotbundle_set_proofs(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst FoliageFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_foliage_free(ptr >>> 0, 1));\n\nclass Foliage {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Foliage.prototype);\n        obj.__wbg_ptr = ptr;\n        FoliageFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FoliageFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_foliage_free(ptr, 0);\n    }\n    /**\n     * @returns {Foliage}\n     */\n    clone() {\n        const ret = wasm.foliage_clone(this.__wbg_ptr);\n        return Foliage.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} prevBlockHash\n     * @param {Uint8Array} rewardBlockHash\n     * @param {FoliageBlockData} foliageBlockData\n     * @param {Signature} foliageBlockDataSignature\n     * @param {Uint8Array | null} [foliageTransactionBlockHash]\n     * @param {Signature | null} [foliageTransactionBlockSignature]\n     */\n    constructor(prevBlockHash, rewardBlockHash, foliageBlockData, foliageBlockDataSignature, foliageTransactionBlockHash, foliageTransactionBlockSignature) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(prevBlockHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(rewardBlockHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            _assertClass(foliageBlockData, FoliageBlockData);\n            var ptr2 = foliageBlockData.__destroy_into_raw();\n            _assertClass(foliageBlockDataSignature, Signature);\n            var ptr3 = foliageBlockDataSignature.__destroy_into_raw();\n            var ptr4 = isLikeNone(foliageTransactionBlockHash) ? 0 : passArray8ToWasm0(foliageTransactionBlockHash, wasm.__wbindgen_export_1);\n            var len4 = WASM_VECTOR_LEN;\n            let ptr5 = 0;\n            if (!isLikeNone(foliageTransactionBlockSignature)) {\n                _assertClass(foliageTransactionBlockSignature, Signature);\n                ptr5 = foliageTransactionBlockSignature.__destroy_into_raw();\n            }\n            wasm.foliage_new(retptr, ptr0, len0, ptr1, len1, ptr2, ptr3, ptr4, len4, ptr5);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            FoliageFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get prevBlockHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliage_prevBlockHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set prevBlockHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.foliage_set_prevBlockHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get rewardBlockHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliage_rewardBlockHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set rewardBlockHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.foliage_set_rewardBlockHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {FoliageBlockData}\n     */\n    get foliageBlockData() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliage_foliageBlockData(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return FoliageBlockData.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {FoliageBlockData} value\n     */\n    set foliageBlockData(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, FoliageBlockData);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.foliage_set_foliageBlockData(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Signature}\n     */\n    get foliageBlockDataSignature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliage_foliageBlockDataSignature(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Signature.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Signature} value\n     */\n    set foliageBlockDataSignature(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Signature);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.foliage_set_foliageBlockDataSignature(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get foliageTransactionBlockHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliage_foliageTransactionBlockHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set foliageTransactionBlockHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.foliage_set_foliageTransactionBlockHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Signature | undefined}\n     */\n    get foliageTransactionBlockSignature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliage_foliageTransactionBlockSignature(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : Signature.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Signature | null} [value]\n     */\n    set foliageTransactionBlockSignature(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, Signature);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.foliage_set_foliageTransactionBlockSignature(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst FoliageBlockDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_foliageblockdata_free(ptr >>> 0, 1));\n\nclass FoliageBlockData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(FoliageBlockData.prototype);\n        obj.__wbg_ptr = ptr;\n        FoliageBlockDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FoliageBlockDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_foliageblockdata_free(ptr, 0);\n    }\n    /**\n     * @returns {FoliageBlockData}\n     */\n    clone() {\n        const ret = wasm.foliageblockdata_clone(this.__wbg_ptr);\n        return FoliageBlockData.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} unfinishedRewardBlockHash\n     * @param {PoolTarget} poolTarget\n     * @param {Signature | null | undefined} poolSignature\n     * @param {Uint8Array} farmerRewardPuzzleHash\n     * @param {Uint8Array} extensionData\n     */\n    constructor(unfinishedRewardBlockHash, poolTarget, poolSignature, farmerRewardPuzzleHash, extensionData) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(unfinishedRewardBlockHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(poolTarget, PoolTarget);\n            var ptr1 = poolTarget.__destroy_into_raw();\n            let ptr2 = 0;\n            if (!isLikeNone(poolSignature)) {\n                _assertClass(poolSignature, Signature);\n                ptr2 = poolSignature.__destroy_into_raw();\n            }\n            const ptr3 = passArray8ToWasm0(farmerRewardPuzzleHash, wasm.__wbindgen_export_1);\n            const len3 = WASM_VECTOR_LEN;\n            const ptr4 = passArray8ToWasm0(extensionData, wasm.__wbindgen_export_1);\n            const len4 = WASM_VECTOR_LEN;\n            wasm.foliageblockdata_new(retptr, ptr0, len0, ptr1, ptr2, ptr3, len3, ptr4, len4);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            FoliageBlockDataFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get unfinishedRewardBlockHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliageblockdata_unfinishedRewardBlockHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set unfinishedRewardBlockHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.foliageblockdata_set_unfinishedRewardBlockHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PoolTarget}\n     */\n    get poolTarget() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliageblockdata_poolTarget(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolTarget.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PoolTarget} value\n     */\n    set poolTarget(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, PoolTarget);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.foliageblockdata_set_poolTarget(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Signature | undefined}\n     */\n    get poolSignature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliageblockdata_poolSignature(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : Signature.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Signature | null} [value]\n     */\n    set poolSignature(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, Signature);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.foliageblockdata_set_poolSignature(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get farmerRewardPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliageblockdata_farmerRewardPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set farmerRewardPuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.foliageblockdata_set_farmerRewardPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get extensionData() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliageblockdata_extensionData(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set extensionData(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.foliageblockdata_set_extensionData(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst FoliageTransactionBlockFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_foliagetransactionblock_free(ptr >>> 0, 1));\n\nclass FoliageTransactionBlock {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(FoliageTransactionBlock.prototype);\n        obj.__wbg_ptr = ptr;\n        FoliageTransactionBlockFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FoliageTransactionBlockFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_foliagetransactionblock_free(ptr, 0);\n    }\n    /**\n     * @returns {FoliageTransactionBlock}\n     */\n    clone() {\n        const ret = wasm.foliagetransactionblock_clone(this.__wbg_ptr);\n        return FoliageTransactionBlock.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} prevTransactionBlockHash\n     * @param {bigint} timestamp\n     * @param {Uint8Array} filterHash\n     * @param {Uint8Array} additionsRoot\n     * @param {Uint8Array} removalsRoot\n     * @param {Uint8Array} transactionsInfoHash\n     */\n    constructor(prevTransactionBlockHash, timestamp, filterHash, additionsRoot, removalsRoot, transactionsInfoHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(prevTransactionBlockHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(filterHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passArray8ToWasm0(additionsRoot, wasm.__wbindgen_export_1);\n            const len2 = WASM_VECTOR_LEN;\n            const ptr3 = passArray8ToWasm0(removalsRoot, wasm.__wbindgen_export_1);\n            const len3 = WASM_VECTOR_LEN;\n            const ptr4 = passArray8ToWasm0(transactionsInfoHash, wasm.__wbindgen_export_1);\n            const len4 = WASM_VECTOR_LEN;\n            wasm.foliagetransactionblock_new(retptr, ptr0, len0, addHeapObject(timestamp), ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            FoliageTransactionBlockFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get prevTransactionBlockHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliagetransactionblock_prevTransactionBlockHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set prevTransactionBlockHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.foliagetransactionblock_set_prevTransactionBlockHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get timestamp() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliagetransactionblock_timestamp(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set timestamp(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliagetransactionblock_set_timestamp(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get filterHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliagetransactionblock_filterHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set filterHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.foliagetransactionblock_set_filterHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get additionsRoot() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliagetransactionblock_additionsRoot(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set additionsRoot(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.foliagetransactionblock_set_additionsRoot(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get removalsRoot() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliagetransactionblock_removalsRoot(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set removalsRoot(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.foliagetransactionblock_set_removalsRoot(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get transactionsInfoHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.foliagetransactionblock_transactionsInfoHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set transactionsInfoHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.foliagetransactionblock_set_transactionsInfoHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst Force1of2RestrictedVariableMemoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_force1of2restrictedvariablememo_free(ptr >>> 0, 1));\n\nclass Force1of2RestrictedVariableMemo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Force1of2RestrictedVariableMemo.prototype);\n        obj.__wbg_ptr = ptr;\n        Force1of2RestrictedVariableMemoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Force1of2RestrictedVariableMemoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_force1of2restrictedvariablememo_free(ptr, 0);\n    }\n    /**\n     * @returns {Force1of2RestrictedVariableMemo}\n     */\n    clone() {\n        const ret = wasm.force1of2restrictedvariablememo_clone(this.__wbg_ptr);\n        return Force1of2RestrictedVariableMemo.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} leftSideSubtreeHash\n     * @param {number} nonce\n     * @param {Uint8Array} memberValidatorListHash\n     * @param {Uint8Array} delegatedPuzzleValidatorListHash\n     */\n    constructor(leftSideSubtreeHash, nonce, memberValidatorListHash, delegatedPuzzleValidatorListHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(leftSideSubtreeHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(memberValidatorListHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passArray8ToWasm0(delegatedPuzzleValidatorListHash, wasm.__wbindgen_export_1);\n            const len2 = WASM_VECTOR_LEN;\n            wasm.force1of2restrictedvariablememo_new(retptr, ptr0, len0, nonce, ptr1, len1, ptr2, len2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            Force1of2RestrictedVariableMemoFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get leftSideSubtreeHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.force1of2restrictedvariablememo_leftSideSubtreeHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set leftSideSubtreeHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.force1of2restrictedvariablememo_set_leftSideSubtreeHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get nonce() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.force1of2restrictedvariablememo_nonce(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set nonce(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.force1of2restrictedvariablememo_set_nonce(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get memberValidatorListHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.force1of2restrictedvariablememo_memberValidatorListHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set memberValidatorListHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.force1of2restrictedvariablememo_set_memberValidatorListHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get delegatedPuzzleValidatorListHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.force1of2restrictedvariablememo_delegatedPuzzleValidatorListHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set delegatedPuzzleValidatorListHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.force1of2restrictedvariablememo_set_delegatedPuzzleValidatorListHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst FullBlockFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_fullblock_free(ptr >>> 0, 1));\n\nclass FullBlock {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(FullBlock.prototype);\n        obj.__wbg_ptr = ptr;\n        FullBlockFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof FullBlock)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FullBlockFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_fullblock_free(ptr, 0);\n    }\n    /**\n     * @returns {FullBlock}\n     */\n    clone() {\n        const ret = wasm.fullblock_clone(this.__wbg_ptr);\n        return FullBlock.__wrap(ret);\n    }\n    /**\n     * @param {EndOfSubSlotBundle[]} finishedSubSlots\n     * @param {RewardChainBlock} rewardChainBlock\n     * @param {VDFProof | null | undefined} challengeChainSpProof\n     * @param {VDFProof} challengeChainIpProof\n     * @param {VDFProof | null | undefined} rewardChainSpProof\n     * @param {VDFProof} rewardChainIpProof\n     * @param {VDFProof | null | undefined} infusedChallengeChainIpProof\n     * @param {Foliage} foliage\n     * @param {FoliageTransactionBlock | null | undefined} foliageTransactionBlock\n     * @param {TransactionsInfo | null | undefined} transactionsInfo\n     * @param {Uint8Array | null | undefined} transactionsGenerator\n     * @param {Uint32Array} transactionsGeneratorRefList\n     */\n    constructor(finishedSubSlots, rewardChainBlock, challengeChainSpProof, challengeChainIpProof, rewardChainSpProof, rewardChainIpProof, infusedChallengeChainIpProof, foliage, foliageTransactionBlock, transactionsInfo, transactionsGenerator, transactionsGeneratorRefList) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(finishedSubSlots, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(rewardChainBlock, RewardChainBlock);\n            var ptr1 = rewardChainBlock.__destroy_into_raw();\n            let ptr2 = 0;\n            if (!isLikeNone(challengeChainSpProof)) {\n                _assertClass(challengeChainSpProof, VDFProof);\n                ptr2 = challengeChainSpProof.__destroy_into_raw();\n            }\n            _assertClass(challengeChainIpProof, VDFProof);\n            var ptr3 = challengeChainIpProof.__destroy_into_raw();\n            let ptr4 = 0;\n            if (!isLikeNone(rewardChainSpProof)) {\n                _assertClass(rewardChainSpProof, VDFProof);\n                ptr4 = rewardChainSpProof.__destroy_into_raw();\n            }\n            _assertClass(rewardChainIpProof, VDFProof);\n            var ptr5 = rewardChainIpProof.__destroy_into_raw();\n            let ptr6 = 0;\n            if (!isLikeNone(infusedChallengeChainIpProof)) {\n                _assertClass(infusedChallengeChainIpProof, VDFProof);\n                ptr6 = infusedChallengeChainIpProof.__destroy_into_raw();\n            }\n            _assertClass(foliage, Foliage);\n            var ptr7 = foliage.__destroy_into_raw();\n            let ptr8 = 0;\n            if (!isLikeNone(foliageTransactionBlock)) {\n                _assertClass(foliageTransactionBlock, FoliageTransactionBlock);\n                ptr8 = foliageTransactionBlock.__destroy_into_raw();\n            }\n            let ptr9 = 0;\n            if (!isLikeNone(transactionsInfo)) {\n                _assertClass(transactionsInfo, TransactionsInfo);\n                ptr9 = transactionsInfo.__destroy_into_raw();\n            }\n            var ptr10 = isLikeNone(transactionsGenerator) ? 0 : passArray8ToWasm0(transactionsGenerator, wasm.__wbindgen_export_1);\n            var len10 = WASM_VECTOR_LEN;\n            const ptr11 = passArray32ToWasm0(transactionsGeneratorRefList, wasm.__wbindgen_export_1);\n            const len11 = WASM_VECTOR_LEN;\n            wasm.fullblock_new(retptr, ptr0, len0, ptr1, ptr2, ptr3, ptr4, ptr5, ptr6, ptr7, ptr8, ptr9, ptr10, len10, ptr11, len11);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            FullBlockFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {EndOfSubSlotBundle[]}\n     */\n    get finishedSubSlots() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.fullblock_finishedSubSlots(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {EndOfSubSlotBundle[]} value\n     */\n    set finishedSubSlots(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.fullblock_set_finishedSubSlots(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {RewardChainBlock}\n     */\n    get rewardChainBlock() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.fullblock_rewardChainBlock(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RewardChainBlock.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {RewardChainBlock} value\n     */\n    set rewardChainBlock(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, RewardChainBlock);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.fullblock_set_rewardChainBlock(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VDFProof | undefined}\n     */\n    get challengeChainSpProof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.fullblock_challengeChainSpProof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : VDFProof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {VDFProof | null} [value]\n     */\n    set challengeChainSpProof(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, VDFProof);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.fullblock_set_challengeChainSpProof(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VDFProof}\n     */\n    get challengeChainIpProof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.fullblock_challengeChainIpProof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VDFProof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {VDFProof} value\n     */\n    set challengeChainIpProof(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, VDFProof);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.fullblock_set_challengeChainIpProof(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VDFProof | undefined}\n     */\n    get rewardChainSpProof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.fullblock_rewardChainSpProof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : VDFProof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {VDFProof | null} [value]\n     */\n    set rewardChainSpProof(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, VDFProof);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.fullblock_set_rewardChainSpProof(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VDFProof}\n     */\n    get rewardChainIpProof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.fullblock_rewardChainIpProof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VDFProof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {VDFProof} value\n     */\n    set rewardChainIpProof(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, VDFProof);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.fullblock_set_rewardChainIpProof(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VDFProof | undefined}\n     */\n    get infusedChallengeChainIpProof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.fullblock_infusedChallengeChainIpProof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : VDFProof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {VDFProof | null} [value]\n     */\n    set infusedChallengeChainIpProof(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, VDFProof);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.fullblock_set_infusedChallengeChainIpProof(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Foliage}\n     */\n    get foliage() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.fullblock_foliage(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Foliage.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Foliage} value\n     */\n    set foliage(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Foliage);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.fullblock_set_foliage(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {FoliageTransactionBlock | undefined}\n     */\n    get foliageTransactionBlock() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.fullblock_foliageTransactionBlock(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : FoliageTransactionBlock.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {FoliageTransactionBlock | null} [value]\n     */\n    set foliageTransactionBlock(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, FoliageTransactionBlock);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.fullblock_set_foliageTransactionBlock(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionsInfo | undefined}\n     */\n    get transactionsInfo() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.fullblock_transactionsInfo(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : TransactionsInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {TransactionsInfo | null} [value]\n     */\n    set transactionsInfo(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, TransactionsInfo);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.fullblock_set_transactionsInfo(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get transactionsGenerator() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.fullblock_transactionsGenerator(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set transactionsGenerator(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.fullblock_set_transactionsGenerator(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint32Array}\n     */\n    get transactionsGeneratorRefList() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.fullblock_transactionsGeneratorRefList(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint32Array} value\n     */\n    set transactionsGeneratorRefList(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray32ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.fullblock_set_transactionsGeneratorRefList(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst GetBlockRecordResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_getblockrecordresponse_free(ptr >>> 0, 1));\n\nclass GetBlockRecordResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GetBlockRecordResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        GetBlockRecordResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GetBlockRecordResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_getblockrecordresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {GetBlockRecordResponse}\n     */\n    clone() {\n        const ret = wasm.getblockrecordresponse_clone(this.__wbg_ptr);\n        return GetBlockRecordResponse.__wrap(ret);\n    }\n    /**\n     * @param {BlockRecord | null | undefined} blockRecord\n     * @param {string | null | undefined} error\n     * @param {boolean} success\n     */\n    constructor(blockRecord, error, success) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(blockRecord)) {\n                _assertClass(blockRecord, BlockRecord);\n                ptr0 = blockRecord.__destroy_into_raw();\n            }\n            var ptr1 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.getblockrecordresponse_new(retptr, ptr0, ptr1, len1, success);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            GetBlockRecordResponseFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BlockRecord | undefined}\n     */\n    get blockRecord() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordresponse_blockRecord(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : BlockRecord.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BlockRecord | null} [value]\n     */\n    set blockRecord(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, BlockRecord);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.getblockrecordresponse_set_blockRecord(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordresponse_error(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | null} [value]\n     */\n    set error(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getblockrecordresponse_set_error(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get success() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordresponse_success(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set success(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordresponse_set_success(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst GetBlockRecordsResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_getblockrecordsresponse_free(ptr >>> 0, 1));\n\nclass GetBlockRecordsResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GetBlockRecordsResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        GetBlockRecordsResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GetBlockRecordsResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_getblockrecordsresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {GetBlockRecordsResponse}\n     */\n    clone() {\n        const ret = wasm.getblockrecordsresponse_clone(this.__wbg_ptr);\n        return GetBlockRecordsResponse.__wrap(ret);\n    }\n    /**\n     * @param {BlockRecord[] | null | undefined} blockRecords\n     * @param {string | null | undefined} error\n     * @param {boolean} success\n     */\n    constructor(blockRecords, error, success) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(blockRecords) ? 0 : passArrayJsValueToWasm0(blockRecords, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.getblockrecordsresponse_new(retptr, ptr0, len0, ptr1, len1, success);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            GetBlockRecordsResponseFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BlockRecord[] | undefined}\n     */\n    get blockRecords() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordsresponse_blockRecords(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BlockRecord[] | null} [value]\n     */\n    set blockRecords(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getblockrecordsresponse_set_blockRecords(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordsresponse_error(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | null} [value]\n     */\n    set error(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getblockrecordsresponse_set_error(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get success() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordsresponse_success(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set success(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordsresponse_set_success(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst GetBlockResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_getblockresponse_free(ptr >>> 0, 1));\n\nclass GetBlockResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GetBlockResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        GetBlockResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GetBlockResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_getblockresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {GetBlockResponse}\n     */\n    clone() {\n        const ret = wasm.getblockresponse_clone(this.__wbg_ptr);\n        return GetBlockResponse.__wrap(ret);\n    }\n    /**\n     * @param {FullBlock | null | undefined} block\n     * @param {string | null | undefined} error\n     * @param {boolean} success\n     */\n    constructor(block, error, success) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(block)) {\n                _assertClass(block, FullBlock);\n                ptr0 = block.__destroy_into_raw();\n            }\n            var ptr1 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.getblockresponse_new(retptr, ptr0, ptr1, len1, success);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            GetBlockResponseFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {FullBlock | undefined}\n     */\n    get block() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockresponse_block(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : FullBlock.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {FullBlock | null} [value]\n     */\n    set block(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, FullBlock);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.getblockresponse_set_block(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockresponse_error(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | null} [value]\n     */\n    set error(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getblockresponse_set_error(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get success() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockresponse_success(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set success(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockresponse_set_success(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst GetBlockSpendsResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_getblockspendsresponse_free(ptr >>> 0, 1));\n\nclass GetBlockSpendsResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GetBlockSpendsResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        GetBlockSpendsResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GetBlockSpendsResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_getblockspendsresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {GetBlockSpendsResponse}\n     */\n    clone() {\n        const ret = wasm.getblockspendsresponse_clone(this.__wbg_ptr);\n        return GetBlockSpendsResponse.__wrap(ret);\n    }\n    /**\n     * @param {CoinSpend[] | null | undefined} blockSpends\n     * @param {string | null | undefined} error\n     * @param {boolean} success\n     */\n    constructor(blockSpends, error, success) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(blockSpends) ? 0 : passArrayJsValueToWasm0(blockSpends, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.getblockspendsresponse_new(retptr, ptr0, len0, ptr1, len1, success);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            GetBlockSpendsResponseFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CoinSpend[] | undefined}\n     */\n    get blockSpends() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockspendsresponse_blockSpends(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {CoinSpend[] | null} [value]\n     */\n    set blockSpends(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getblockspendsresponse_set_blockSpends(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockspendsresponse_error(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | null} [value]\n     */\n    set error(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getblockspendsresponse_set_error(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get success() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordsresponse_success(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set success(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordsresponse_set_success(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst GetBlocksResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_getblocksresponse_free(ptr >>> 0, 1));\n\nclass GetBlocksResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GetBlocksResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        GetBlocksResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GetBlocksResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_getblocksresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {GetBlocksResponse}\n     */\n    clone() {\n        const ret = wasm.getblocksresponse_clone(this.__wbg_ptr);\n        return GetBlocksResponse.__wrap(ret);\n    }\n    /**\n     * @param {FullBlock[] | null | undefined} blocks\n     * @param {string | null | undefined} error\n     * @param {boolean} success\n     */\n    constructor(blocks, error, success) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(blocks) ? 0 : passArrayJsValueToWasm0(blocks, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.getblocksresponse_new(retptr, ptr0, len0, ptr1, len1, success);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            GetBlocksResponseFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {FullBlock[] | undefined}\n     */\n    get blocks() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblocksresponse_blocks(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {FullBlock[] | null} [value]\n     */\n    set blocks(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getblocksresponse_set_blocks(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblocksresponse_error(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | null} [value]\n     */\n    set error(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getblocksresponse_set_error(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get success() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordsresponse_success(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set success(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordsresponse_set_success(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst GetCoinRecordResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_getcoinrecordresponse_free(ptr >>> 0, 1));\n\nclass GetCoinRecordResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GetCoinRecordResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        GetCoinRecordResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GetCoinRecordResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_getcoinrecordresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {GetCoinRecordResponse}\n     */\n    clone() {\n        const ret = wasm.getcoinrecordresponse_clone(this.__wbg_ptr);\n        return GetCoinRecordResponse.__wrap(ret);\n    }\n    /**\n     * @param {CoinRecord | null | undefined} coinRecord\n     * @param {string | null | undefined} error\n     * @param {boolean} success\n     */\n    constructor(coinRecord, error, success) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(coinRecord)) {\n                _assertClass(coinRecord, CoinRecord);\n                ptr0 = coinRecord.__destroy_into_raw();\n            }\n            var ptr1 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.getcoinrecordresponse_new(retptr, ptr0, ptr1, len1, success);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            GetCoinRecordResponseFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CoinRecord | undefined}\n     */\n    get coinRecord() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getcoinrecordresponse_coinRecord(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : CoinRecord.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {CoinRecord | null} [value]\n     */\n    set coinRecord(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, CoinRecord);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.getcoinrecordresponse_set_coinRecord(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getcoinrecordresponse_error(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | null} [value]\n     */\n    set error(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getcoinrecordresponse_set_error(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get success() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getcoinrecordresponse_success(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set success(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getcoinrecordresponse_set_success(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst GetCoinRecordsResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_getcoinrecordsresponse_free(ptr >>> 0, 1));\n\nclass GetCoinRecordsResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GetCoinRecordsResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        GetCoinRecordsResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GetCoinRecordsResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_getcoinrecordsresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {GetCoinRecordsResponse}\n     */\n    clone() {\n        const ret = wasm.getcoinrecordsresponse_clone(this.__wbg_ptr);\n        return GetCoinRecordsResponse.__wrap(ret);\n    }\n    /**\n     * @param {CoinRecord[] | null | undefined} coinRecords\n     * @param {string | null | undefined} error\n     * @param {boolean} success\n     */\n    constructor(coinRecords, error, success) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(coinRecords) ? 0 : passArrayJsValueToWasm0(coinRecords, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.getcoinrecordsresponse_new(retptr, ptr0, len0, ptr1, len1, success);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            GetCoinRecordsResponseFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CoinRecord[] | undefined}\n     */\n    get coinRecords() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getcoinrecordsresponse_coinRecords(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {CoinRecord[] | null} [value]\n     */\n    set coinRecords(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getcoinrecordsresponse_set_coinRecords(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getcoinrecordsresponse_error(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | null} [value]\n     */\n    set error(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getcoinrecordsresponse_set_error(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get success() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordsresponse_success(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set success(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordsresponse_set_success(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst GetMempoolItemResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_getmempoolitemresponse_free(ptr >>> 0, 1));\n\nclass GetMempoolItemResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GetMempoolItemResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        GetMempoolItemResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GetMempoolItemResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_getmempoolitemresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {GetMempoolItemResponse}\n     */\n    clone() {\n        const ret = wasm.getmempoolitemresponse_clone(this.__wbg_ptr);\n        return GetMempoolItemResponse.__wrap(ret);\n    }\n    /**\n     * @param {MempoolItem | null | undefined} mempoolItem\n     * @param {string | null | undefined} error\n     * @param {boolean} success\n     */\n    constructor(mempoolItem, error, success) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(mempoolItem)) {\n                _assertClass(mempoolItem, MempoolItem);\n                ptr0 = mempoolItem.__destroy_into_raw();\n            }\n            var ptr1 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.getmempoolitemresponse_new(retptr, ptr0, ptr1, len1, success);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            GetMempoolItemResponseFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MempoolItem | undefined}\n     */\n    get mempoolItem() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getmempoolitemresponse_mempoolItem(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : MempoolItem.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MempoolItem | null} [value]\n     */\n    set mempoolItem(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, MempoolItem);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.getmempoolitemresponse_set_mempoolItem(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getmempoolitemresponse_error(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | null} [value]\n     */\n    set error(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getmempoolitemresponse_set_error(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get success() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getmempoolitemresponse_success(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set success(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getmempoolitemresponse_set_success(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst GetMempoolItemsResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_getmempoolitemsresponse_free(ptr >>> 0, 1));\n\nclass GetMempoolItemsResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GetMempoolItemsResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        GetMempoolItemsResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GetMempoolItemsResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_getmempoolitemsresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {GetMempoolItemsResponse}\n     */\n    clone() {\n        const ret = wasm.getmempoolitemsresponse_clone(this.__wbg_ptr);\n        return GetMempoolItemsResponse.__wrap(ret);\n    }\n    /**\n     * @param {MempoolItem[] | null | undefined} mempoolItems\n     * @param {string | null | undefined} error\n     * @param {boolean} success\n     */\n    constructor(mempoolItems, error, success) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(mempoolItems) ? 0 : passArrayJsValueToWasm0(mempoolItems, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.getmempoolitemsresponse_new(retptr, ptr0, len0, ptr1, len1, success);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            GetMempoolItemsResponseFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MempoolItem[] | undefined}\n     */\n    get mempoolItems() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getmempoolitemsresponse_mempoolItems(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MempoolItem[] | null} [value]\n     */\n    set mempoolItems(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getmempoolitemsresponse_set_mempoolItems(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getmempoolitemsresponse_error(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | null} [value]\n     */\n    set error(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getmempoolitemsresponse_set_error(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get success() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordsresponse_success(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set success(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordsresponse_set_success(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst GetNetworkInfoResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_getnetworkinforesponse_free(ptr >>> 0, 1));\n\nclass GetNetworkInfoResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GetNetworkInfoResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        GetNetworkInfoResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GetNetworkInfoResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_getnetworkinforesponse_free(ptr, 0);\n    }\n    /**\n     * @returns {GetNetworkInfoResponse}\n     */\n    clone() {\n        const ret = wasm.getnetworkinforesponse_clone(this.__wbg_ptr);\n        return GetNetworkInfoResponse.__wrap(ret);\n    }\n    /**\n     * @param {string | null | undefined} networkName\n     * @param {string | null | undefined} networkPrefix\n     * @param {Uint8Array | null | undefined} genesisChallenge\n     * @param {string | null | undefined} error\n     * @param {boolean} success\n     */\n    constructor(networkName, networkPrefix, genesisChallenge, error, success) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(networkName) ? 0 : passStringToWasm0(networkName, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(networkPrefix) ? 0 : passStringToWasm0(networkPrefix, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len1 = WASM_VECTOR_LEN;\n            var ptr2 = isLikeNone(genesisChallenge) ? 0 : passArray8ToWasm0(genesisChallenge, wasm.__wbindgen_export_1);\n            var len2 = WASM_VECTOR_LEN;\n            var ptr3 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len3 = WASM_VECTOR_LEN;\n            wasm.getnetworkinforesponse_new(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, success);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            GetNetworkInfoResponseFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get networkName() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getnetworkinforesponse_networkName(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | null} [value]\n     */\n    set networkName(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getnetworkinforesponse_set_networkName(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get networkPrefix() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getnetworkinforesponse_networkPrefix(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | null} [value]\n     */\n    set networkPrefix(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getnetworkinforesponse_set_networkPrefix(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get genesisChallenge() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getnetworkinforesponse_genesisChallenge(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set genesisChallenge(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getnetworkinforesponse_set_genesisChallenge(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getnetworkinforesponse_error(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | null} [value]\n     */\n    set error(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getnetworkinforesponse_set_error(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get success() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getnetworkinforesponse_success(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set success(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getnetworkinforesponse_set_success(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst GetPuzzleAndSolutionResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_getpuzzleandsolutionresponse_free(ptr >>> 0, 1));\n\nclass GetPuzzleAndSolutionResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GetPuzzleAndSolutionResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        GetPuzzleAndSolutionResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GetPuzzleAndSolutionResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_getpuzzleandsolutionresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {GetPuzzleAndSolutionResponse}\n     */\n    clone() {\n        const ret = wasm.getpuzzleandsolutionresponse_clone(this.__wbg_ptr);\n        return GetPuzzleAndSolutionResponse.__wrap(ret);\n    }\n    /**\n     * @param {CoinSpend | null | undefined} coinSolution\n     * @param {string | null | undefined} error\n     * @param {boolean} success\n     */\n    constructor(coinSolution, error, success) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(coinSolution)) {\n                _assertClass(coinSolution, CoinSpend);\n                ptr0 = coinSolution.__destroy_into_raw();\n            }\n            var ptr1 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.getpuzzleandsolutionresponse_new(retptr, ptr0, ptr1, len1, success);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            GetPuzzleAndSolutionResponseFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CoinSpend | undefined}\n     */\n    get coinSolution() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getpuzzleandsolutionresponse_coinSolution(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : CoinSpend.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {CoinSpend | null} [value]\n     */\n    set coinSolution(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, CoinSpend);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.getpuzzleandsolutionresponse_set_coinSolution(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getpuzzleandsolutionresponse_error(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | null} [value]\n     */\n    set error(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.getpuzzleandsolutionresponse_set_error(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get success() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getcoinrecordresponse_success(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set success(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getcoinrecordresponse_set_success(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst InfusedChallengeChainSubSlotFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_infusedchallengechainsubslot_free(ptr >>> 0, 1));\n\nclass InfusedChallengeChainSubSlot {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InfusedChallengeChainSubSlot.prototype);\n        obj.__wbg_ptr = ptr;\n        InfusedChallengeChainSubSlotFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InfusedChallengeChainSubSlotFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_infusedchallengechainsubslot_free(ptr, 0);\n    }\n    /**\n     * @returns {InfusedChallengeChainSubSlot}\n     */\n    clone() {\n        const ret = wasm.infusedchallengechainsubslot_clone(this.__wbg_ptr);\n        return InfusedChallengeChainSubSlot.__wrap(ret);\n    }\n    /**\n     * @param {VDFInfo} infusedChallengeChainEndOfSlotVdf\n     */\n    constructor(infusedChallengeChainEndOfSlotVdf) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(infusedChallengeChainEndOfSlotVdf, VDFInfo);\n            var ptr0 = infusedChallengeChainEndOfSlotVdf.__destroy_into_raw();\n            wasm.infusedchallengechainsubslot_new(retptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            InfusedChallengeChainSubSlotFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VDFInfo}\n     */\n    get infusedChallengeChainEndOfSlotVdf() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.infusedchallengechainsubslot_infusedChallengeChainEndOfSlotVdf(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VDFInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {VDFInfo} value\n     */\n    set infusedChallengeChainEndOfSlotVdf(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, VDFInfo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.infusedchallengechainsubslot_set_infusedChallengeChainEndOfSlotVdf(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst InnerPuzzleMemoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_innerpuzzlememo_free(ptr >>> 0, 1));\n\nclass InnerPuzzleMemo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InnerPuzzleMemo.prototype);\n        obj.__wbg_ptr = ptr;\n        InnerPuzzleMemoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof InnerPuzzleMemo)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InnerPuzzleMemoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_innerpuzzlememo_free(ptr, 0);\n    }\n    /**\n     * @returns {InnerPuzzleMemo}\n     */\n    clone() {\n        const ret = wasm.innerpuzzlememo_clone(this.__wbg_ptr);\n        return InnerPuzzleMemo.__wrap(ret);\n    }\n    /**\n     * @param {number} nonce\n     * @param {RestrictionMemo[]} restrictions\n     * @param {MemoKind} kind\n     */\n    constructor(nonce, restrictions, kind) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(restrictions, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(kind, MemoKind);\n            var ptr1 = kind.__destroy_into_raw();\n            wasm.innerpuzzlememo_new(retptr, nonce, ptr0, len0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            InnerPuzzleMemoFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get nonce() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.innerpuzzlememo_nonce(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set nonce(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.innerpuzzlememo_set_nonce(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {RestrictionMemo[]}\n     */\n    get restrictions() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.innerpuzzlememo_restrictions(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {RestrictionMemo[]} value\n     */\n    set restrictions(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.innerpuzzlememo_set_restrictions(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MemoKind}\n     */\n    get kind() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.innerpuzzlememo_kind(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MemoKind.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MemoKind} value\n     */\n    set kind(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, MemoKind);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.innerpuzzlememo_set_kind(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst K1PairFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_k1pair_free(ptr >>> 0, 1));\n\nclass K1Pair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(K1Pair.prototype);\n        obj.__wbg_ptr = ptr;\n        K1PairFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        K1PairFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_k1pair_free(ptr, 0);\n    }\n    /**\n     * @returns {K1Pair}\n     */\n    clone() {\n        const ret = wasm.k1pair_clone(this.__wbg_ptr);\n        return K1Pair.__wrap(ret);\n    }\n    /**\n     * @param {bigint} seed\n     * @returns {K1Pair}\n     */\n    static fromSeed(seed) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.k1pair_fromSeed(retptr, addHeapObject(seed));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return K1Pair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} seed\n     * @param {number} count\n     * @returns {K1Pair[]}\n     */\n    static manyFromSeed(seed, count) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.k1pair_manyFromSeed(retptr, addHeapObject(seed), count);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {K1SecretKey} sk\n     * @param {K1PublicKey} pk\n     */\n    constructor(sk, pk) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(sk, K1SecretKey);\n            var ptr0 = sk.__destroy_into_raw();\n            _assertClass(pk, K1PublicKey);\n            var ptr1 = pk.__destroy_into_raw();\n            wasm.k1pair_new(retptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            K1PairFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {K1SecretKey}\n     */\n    get sk() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.k1pair_sk(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return K1SecretKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {K1SecretKey} value\n     */\n    set sk(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, K1SecretKey);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.k1pair_set_sk(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {K1PublicKey}\n     */\n    get pk() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.k1pair_pk(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return K1PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {K1PublicKey} value\n     */\n    set pk(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, K1PublicKey);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.k1pair_set_pk(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst K1PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_k1publickey_free(ptr >>> 0, 1));\n\nclass K1PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(K1PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        K1PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        K1PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_k1publickey_free(ptr, 0);\n    }\n    /**\n     * @returns {K1PublicKey}\n     */\n    clone() {\n        const ret = wasm.k1publickey_clone(this.__wbg_ptr);\n        return K1PublicKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {K1PublicKey}\n     */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.k1publickey_fromBytes(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return K1PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.k1publickey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    fingerprint() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.k1publickey_fingerprint(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} prehashed\n     * @param {K1Signature} signature\n     * @returns {boolean}\n     */\n    verifyPrehashed(prehashed, signature) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(prehashed, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(signature, K1Signature);\n            var ptr1 = signature.__destroy_into_raw();\n            wasm.k1publickey_verifyPrehashed(retptr, this.__wbg_ptr, ptr0, len0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst K1SecretKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_k1secretkey_free(ptr >>> 0, 1));\n\nclass K1SecretKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(K1SecretKey.prototype);\n        obj.__wbg_ptr = ptr;\n        K1SecretKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        K1SecretKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_k1secretkey_free(ptr, 0);\n    }\n    /**\n     * @returns {K1SecretKey}\n     */\n    clone() {\n        const ret = wasm.k1secretkey_clone(this.__wbg_ptr);\n        return K1SecretKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {K1SecretKey}\n     */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.k1secretkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return K1SecretKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.k1secretkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {K1PublicKey}\n     */\n    publicKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.k1secretkey_publicKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return K1PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} prehashed\n     * @returns {K1Signature}\n     */\n    signPrehashed(prehashed) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(prehashed, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.k1secretkey_signPrehashed(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return K1Signature.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst K1SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_k1signature_free(ptr >>> 0, 1));\n\nclass K1Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(K1Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        K1SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        K1SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_k1signature_free(ptr, 0);\n    }\n    /**\n     * @returns {K1Signature}\n     */\n    clone() {\n        const ret = wasm.k1signature_clone(this.__wbg_ptr);\n        return K1Signature.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {K1Signature}\n     */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.k1signature_fromBytes(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return K1Signature.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.k1signature_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst LineageProofFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_lineageproof_free(ptr >>> 0, 1));\n\nclass LineageProof {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(LineageProof.prototype);\n        obj.__wbg_ptr = ptr;\n        LineageProofFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LineageProofFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_lineageproof_free(ptr, 0);\n    }\n    /**\n     * @returns {LineageProof}\n     */\n    clone() {\n        const ret = wasm.lineageproof_clone(this.__wbg_ptr);\n        return LineageProof.__wrap(ret);\n    }\n    /**\n     * @returns {Proof}\n     */\n    toProof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.lineageproof_toProof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Proof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} parentParentCoinInfo\n     * @param {Uint8Array} parentInnerPuzzleHash\n     * @param {bigint} parentAmount\n     */\n    constructor(parentParentCoinInfo, parentInnerPuzzleHash, parentAmount) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(parentParentCoinInfo, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(parentInnerPuzzleHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.coin_new(retptr, ptr0, len0, ptr1, len1, addHeapObject(parentAmount));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            LineageProofFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get parentParentCoinInfo() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawback_senderPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set parentParentCoinInfo(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clawback_set_senderPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get parentInnerPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawback_receiverPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set parentInnerPuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clawback_set_receiverPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get parentAmount() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawback_timelock(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set parentAmount(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawback_set_timelock(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MeltSingletonFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_meltsingleton_free(ptr >>> 0, 1));\n\nclass MeltSingleton {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MeltSingleton.prototype);\n        obj.__wbg_ptr = ptr;\n        MeltSingletonFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MeltSingletonFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_meltsingleton_free(ptr, 0);\n    }\n    /**\n     * @returns {MeltSingleton}\n     */\n    clone() {\n        const ret = wasm.assertephemeral_clone(this.__wbg_ptr);\n        return MeltSingleton.__wrap(ret);\n    }\n    constructor() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertephemeral_new(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            MeltSingletonFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MemberConfigFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_memberconfig_free(ptr >>> 0, 1));\n\nclass MemberConfig {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MemberConfig.prototype);\n        obj.__wbg_ptr = ptr;\n        MemberConfigFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MemberConfigFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_memberconfig_free(ptr, 0);\n    }\n    /**\n     * @returns {MemberConfig}\n     */\n    clone() {\n        const ret = wasm.memberconfig_clone(this.__wbg_ptr);\n        return MemberConfig.__wrap(ret);\n    }\n    constructor() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.memberconfig_new(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            MemberConfigFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} topLevel\n     * @returns {MemberConfig}\n     */\n    withTopLevel(topLevel) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.memberconfig_withTopLevel(retptr, this.__wbg_ptr, topLevel);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MemberConfig.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} nonce\n     * @returns {MemberConfig}\n     */\n    withNonce(nonce) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.memberconfig_withNonce(retptr, this.__wbg_ptr, nonce);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MemberConfig.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Restriction[]} restrictions\n     * @returns {MemberConfig}\n     */\n    withRestrictions(restrictions) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(restrictions, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.memberconfig_withRestrictions(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MemberConfig.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get topLevel() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.memberconfig_topLevel(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set topLevel(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.memberconfig_set_topLevel(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get nonce() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.innerpuzzlememo_nonce(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set nonce(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.innerpuzzlememo_set_nonce(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Restriction[]}\n     */\n    get restrictions() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.memberconfig_restrictions(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Restriction[]} value\n     */\n    set restrictions(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.memberconfig_set_restrictions(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MemberMemoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_membermemo_free(ptr >>> 0, 1));\n\nclass MemberMemo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MemberMemo.prototype);\n        obj.__wbg_ptr = ptr;\n        MemberMemoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MemberMemoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_membermemo_free(ptr, 0);\n    }\n    /**\n     * @returns {MemberMemo}\n     */\n    clone() {\n        const ret = wasm.membermemo_clone(this.__wbg_ptr);\n        return MemberMemo.__wrap(ret);\n    }\n    /**\n     * @param {Clvm} clvm\n     * @param {K1PublicKey} publicKey\n     * @param {boolean} fastForward\n     * @param {boolean} reveal\n     * @returns {MemberMemo}\n     */\n    static k1(clvm, publicKey, fastForward, reveal) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            _assertClass(publicKey, K1PublicKey);\n            var ptr1 = publicKey.__destroy_into_raw();\n            wasm.membermemo_k1(retptr, ptr0, ptr1, fastForward, reveal);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MemberMemo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Clvm} clvm\n     * @param {R1PublicKey} publicKey\n     * @param {boolean} fastForward\n     * @param {boolean} reveal\n     * @returns {MemberMemo}\n     */\n    static r1(clvm, publicKey, fastForward, reveal) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            _assertClass(publicKey, R1PublicKey);\n            var ptr1 = publicKey.__destroy_into_raw();\n            wasm.membermemo_r1(retptr, ptr0, ptr1, fastForward, reveal);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MemberMemo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Clvm} clvm\n     * @param {PublicKey} publicKey\n     * @param {boolean} taproot\n     * @param {boolean} reveal\n     * @returns {MemberMemo}\n     */\n    static bls(clvm, publicKey, taproot, reveal) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            _assertClass(publicKey, PublicKey);\n            var ptr1 = publicKey.__destroy_into_raw();\n            wasm.membermemo_bls(retptr, ptr0, ptr1, taproot, reveal);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MemberMemo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Clvm} clvm\n     * @param {R1PublicKey} publicKey\n     * @param {boolean} fastForward\n     * @param {boolean} reveal\n     * @returns {MemberMemo}\n     */\n    static passkey(clvm, publicKey, fastForward, reveal) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            _assertClass(publicKey, R1PublicKey);\n            var ptr1 = publicKey.__destroy_into_raw();\n            wasm.membermemo_passkey(retptr, ptr0, ptr1, fastForward, reveal);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MemberMemo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Clvm} clvm\n     * @param {Uint8Array} launcherId\n     * @param {boolean} reveal\n     * @returns {MemberMemo}\n     */\n    static singleton(clvm, launcherId, reveal) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(launcherId, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.membermemo_singleton(retptr, ptr0, ptr1, len1, reveal);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MemberMemo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Clvm} clvm\n     * @param {Uint8Array} puzzleHash\n     * @param {boolean} reveal\n     * @returns {MemberMemo}\n     */\n    static fixedPuzzle(clvm, puzzleHash, reveal) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.membermemo_fixedPuzzle(retptr, ptr0, ptr1, len1, reveal);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MemberMemo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} puzzleHash\n     * @param {Program} memo\n     */\n    constructor(puzzleHash, memo) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(memo, Program);\n            var ptr1 = memo.__destroy_into_raw();\n            wasm.membermemo_new(retptr, ptr0, len0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            MemberMemoFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.membermemo_puzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set puzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.membermemo_set_puzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get memo() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.membermemo_memo(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set memo(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.membermemo_set_memo(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MemoKindFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_memokind_free(ptr >>> 0, 1));\n\nclass MemoKind {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MemoKind.prototype);\n        obj.__wbg_ptr = ptr;\n        MemoKindFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MemoKindFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_memokind_free(ptr, 0);\n    }\n    /**\n     * @returns {MemoKind}\n     */\n    clone() {\n        const ret = wasm.memokind_clone(this.__wbg_ptr);\n        return MemoKind.__wrap(ret);\n    }\n    /**\n     * @param {MemberMemo} member\n     * @returns {MemoKind}\n     */\n    static member(member) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(member, MemberMemo);\n            var ptr0 = member.__destroy_into_raw();\n            wasm.memokind_member(retptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MemoKind.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MofNMemo} mOfN\n     * @returns {MemoKind}\n     */\n    static mOfN(mOfN) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(mOfN, MofNMemo);\n            var ptr0 = mOfN.__destroy_into_raw();\n            wasm.memokind_mOfN(retptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MemoKind.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MemberMemo | undefined}\n     */\n    asMember() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.memokind_asMember(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : MemberMemo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MofNMemo | undefined}\n     */\n    asMOfN() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.memokind_asMOfN(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : MofNMemo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MempoolItemFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_mempoolitem_free(ptr >>> 0, 1));\n\nclass MempoolItem {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MempoolItem.prototype);\n        obj.__wbg_ptr = ptr;\n        MempoolItemFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof MempoolItem)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MempoolItemFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mempoolitem_free(ptr, 0);\n    }\n    /**\n     * @returns {MempoolItem}\n     */\n    clone() {\n        const ret = wasm.mempoolitem_clone(this.__wbg_ptr);\n        return MempoolItem.__wrap(ret);\n    }\n    /**\n     * @param {SpendBundle} spendBundle\n     * @param {bigint} fee\n     */\n    constructor(spendBundle, fee) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(spendBundle, SpendBundle);\n            var ptr0 = spendBundle.__destroy_into_raw();\n            wasm.mempoolitem_new(retptr, ptr0, addHeapObject(fee));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            MempoolItemFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {SpendBundle}\n     */\n    get spendBundle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mempoolitem_spendBundle(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SpendBundle.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {SpendBundle} value\n     */\n    set spendBundle(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, SpendBundle);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.mempoolitem_set_spendBundle(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get fee() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mempoolitem_fee(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set fee(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mempoolitem_set_fee(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MempoolMinFeesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_mempoolminfees_free(ptr >>> 0, 1));\n\nclass MempoolMinFees {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MempoolMinFees.prototype);\n        obj.__wbg_ptr = ptr;\n        MempoolMinFeesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MempoolMinFeesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mempoolminfees_free(ptr, 0);\n    }\n    /**\n     * @returns {MempoolMinFees}\n     */\n    clone() {\n        const ret = wasm.assertbeforesecondsabsolute_clone(this.__wbg_ptr);\n        return MempoolMinFees.__wrap(ret);\n    }\n    /**\n     * @param {bigint} cost5000000\n     */\n    constructor(cost5000000) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_new(retptr, addHeapObject(cost5000000));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            MempoolMinFeesFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get cost5000000() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_seconds(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set cost5000000(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_set_seconds(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MintedNftsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_mintednfts_free(ptr >>> 0, 1));\n\nclass MintedNfts {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MintedNfts.prototype);\n        obj.__wbg_ptr = ptr;\n        MintedNftsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MintedNftsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mintednfts_free(ptr, 0);\n    }\n    /**\n     * @returns {MintedNfts}\n     */\n    clone() {\n        const ret = wasm.mintednfts_clone(this.__wbg_ptr);\n        return MintedNfts.__wrap(ret);\n    }\n    /**\n     * @param {Nft[]} nfts\n     * @param {Program[]} parentConditions\n     */\n    constructor(nfts, parentConditions) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(nfts, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArrayJsValueToWasm0(parentConditions, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.mintednfts_new(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            MintedNftsFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Nft[]}\n     */\n    get nfts() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mintednfts_nfts(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Nft[]} value\n     */\n    set nfts(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.mintednfts_set_nfts(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program[]}\n     */\n    get parentConditions() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mintednfts_parentConditions(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program[]} value\n     */\n    set parentConditions(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.mintednfts_set_parentConditions(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MipsMemoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_mipsmemo_free(ptr >>> 0, 1));\n\nclass MipsMemo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MipsMemo.prototype);\n        obj.__wbg_ptr = ptr;\n        MipsMemoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MipsMemoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mipsmemo_free(ptr, 0);\n    }\n    /**\n     * @returns {MipsMemo}\n     */\n    clone() {\n        const ret = wasm.mipsmemo_clone(this.__wbg_ptr);\n        return MipsMemo.__wrap(ret);\n    }\n    /**\n     * @param {InnerPuzzleMemo} innerPuzzle\n     */\n    constructor(innerPuzzle) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(innerPuzzle, InnerPuzzleMemo);\n            var ptr0 = innerPuzzle.__destroy_into_raw();\n            wasm.mipsmemo_new(retptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            MipsMemoFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {InnerPuzzleMemo}\n     */\n    get innerPuzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mipsmemo_innerPuzzle(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return InnerPuzzleMemo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {InnerPuzzleMemo} value\n     */\n    set innerPuzzle(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, InnerPuzzleMemo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.mipsmemo_set_innerPuzzle(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MipsSpendFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_mipsspend_free(ptr >>> 0, 1));\n\nclass MipsSpend {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MipsSpend.prototype);\n        obj.__wbg_ptr = ptr;\n        MipsSpendFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MipsSpendFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mipsspend_free(ptr, 0);\n    }\n    /**\n     * @returns {MipsSpend}\n     */\n    clone() {\n        const ret = wasm.mipsspend_clone(this.__wbg_ptr);\n        return MipsSpend.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} custodyHash\n     * @returns {Spend}\n     */\n    spend(custodyHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(custodyHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.mipsspend_spend(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Spend.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Vault} vault\n     */\n    spendVault(vault) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(vault, Vault);\n            var ptr0 = vault.__destroy_into_raw();\n            wasm.mipsspend_spendVault(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MemberConfig} config\n     * @param {number} required\n     * @param {Array<any>} items\n     */\n    mOfN(config, required, items) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(config, MemberConfig);\n            var ptr0 = config.__destroy_into_raw();\n            wasm.mipsspend_mOfN(retptr, this.__wbg_ptr, ptr0, required, addHeapObject(items));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MemberConfig} config\n     * @param {K1PublicKey} publicKey\n     * @param {K1Signature} signature\n     * @param {boolean} fastForward\n     */\n    k1Member(config, publicKey, signature, fastForward) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(config, MemberConfig);\n            var ptr0 = config.__destroy_into_raw();\n            _assertClass(publicKey, K1PublicKey);\n            var ptr1 = publicKey.__destroy_into_raw();\n            _assertClass(signature, K1Signature);\n            var ptr2 = signature.__destroy_into_raw();\n            wasm.mipsspend_k1Member(retptr, this.__wbg_ptr, ptr0, ptr1, ptr2, fastForward);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MemberConfig} config\n     * @param {R1PublicKey} publicKey\n     * @param {R1Signature} signature\n     * @param {boolean} fastForward\n     */\n    r1Member(config, publicKey, signature, fastForward) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(config, MemberConfig);\n            var ptr0 = config.__destroy_into_raw();\n            _assertClass(publicKey, R1PublicKey);\n            var ptr1 = publicKey.__destroy_into_raw();\n            _assertClass(signature, R1Signature);\n            var ptr2 = signature.__destroy_into_raw();\n            wasm.mipsspend_r1Member(retptr, this.__wbg_ptr, ptr0, ptr1, ptr2, fastForward);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MemberConfig} config\n     * @param {PublicKey} publicKey\n     */\n    blsMember(config, publicKey) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(config, MemberConfig);\n            var ptr0 = config.__destroy_into_raw();\n            _assertClass(publicKey, PublicKey);\n            var ptr1 = publicKey.__destroy_into_raw();\n            wasm.mipsspend_blsMember(retptr, this.__wbg_ptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MemberConfig} config\n     * @param {R1PublicKey} publicKey\n     * @param {R1Signature} signature\n     * @param {Uint8Array} authenticatorData\n     * @param {Uint8Array} clientDataJson\n     * @param {number} challengeIndex\n     * @param {boolean} fastForward\n     */\n    passkeyMember(config, publicKey, signature, authenticatorData, clientDataJson, challengeIndex, fastForward) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(config, MemberConfig);\n            var ptr0 = config.__destroy_into_raw();\n            _assertClass(publicKey, R1PublicKey);\n            var ptr1 = publicKey.__destroy_into_raw();\n            _assertClass(signature, R1Signature);\n            var ptr2 = signature.__destroy_into_raw();\n            const ptr3 = passArray8ToWasm0(authenticatorData, wasm.__wbindgen_export_1);\n            const len3 = WASM_VECTOR_LEN;\n            const ptr4 = passArray8ToWasm0(clientDataJson, wasm.__wbindgen_export_1);\n            const len4 = WASM_VECTOR_LEN;\n            wasm.mipsspend_passkeyMember(retptr, this.__wbg_ptr, ptr0, ptr1, ptr2, ptr3, len3, ptr4, len4, challengeIndex, fastForward);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MemberConfig} config\n     * @param {Uint8Array} launcherId\n     * @param {Uint8Array} singletonInnerPuzzleHash\n     * @param {bigint} singletonAmount\n     */\n    singletonMember(config, launcherId, singletonInnerPuzzleHash, singletonAmount) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(config, MemberConfig);\n            var ptr0 = config.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(launcherId, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passArray8ToWasm0(singletonInnerPuzzleHash, wasm.__wbindgen_export_1);\n            const len2 = WASM_VECTOR_LEN;\n            wasm.mipsspend_singletonMember(retptr, this.__wbg_ptr, ptr0, ptr1, len1, ptr2, len2, addHeapObject(singletonAmount));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MemberConfig} config\n     * @param {Uint8Array} fixedPuzzleHash\n     */\n    fixedPuzzleMember(config, fixedPuzzleHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(config, MemberConfig);\n            var ptr0 = config.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(fixedPuzzleHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.mipsspend_fixedPuzzleMember(retptr, this.__wbg_ptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MemberConfig} config\n     * @param {Spend} spend\n     */\n    customMember(config, spend) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(config, MemberConfig);\n            var ptr0 = config.__destroy_into_raw();\n            _assertClass(spend, Spend);\n            var ptr1 = spend.__destroy_into_raw();\n            wasm.mipsspend_customMember(retptr, this.__wbg_ptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} timelock\n     */\n    timelock(timelock) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mipsspend_timelock(retptr, this.__wbg_ptr, addHeapObject(timelock));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} leftSideSubtreeHash\n     * @param {number} nonce\n     * @param {Uint8Array} memberValidatorListHash\n     * @param {Uint8Array} delegatedPuzzleValidatorListHash\n     * @param {Uint8Array} newRightSideMemberHash\n     */\n    force1Of2RestrictedVariable(leftSideSubtreeHash, nonce, memberValidatorListHash, delegatedPuzzleValidatorListHash, newRightSideMemberHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(leftSideSubtreeHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(memberValidatorListHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passArray8ToWasm0(delegatedPuzzleValidatorListHash, wasm.__wbindgen_export_1);\n            const len2 = WASM_VECTOR_LEN;\n            const ptr3 = passArray8ToWasm0(newRightSideMemberHash, wasm.__wbindgen_export_1);\n            const len3 = WASM_VECTOR_LEN;\n            wasm.mipsspend_force1Of2RestrictedVariable(retptr, this.__wbg_ptr, ptr0, len0, nonce, ptr1, len1, ptr2, len2, ptr3, len3);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} conditionOpcode\n     */\n    preventConditionOpcode(conditionOpcode) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mipsspend_preventConditionOpcode(retptr, this.__wbg_ptr, conditionOpcode);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    preventMultipleCreateCoins() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mipsspend_preventMultipleCreateCoins(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    preventVaultSideEffects() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mipsspend_preventVaultSideEffects(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MnemonicFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_mnemonic_free(ptr >>> 0, 1));\n\nclass Mnemonic {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Mnemonic.prototype);\n        obj.__wbg_ptr = ptr;\n        MnemonicFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MnemonicFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mnemonic_free(ptr, 0);\n    }\n    /**\n     * @returns {Mnemonic}\n     */\n    clone() {\n        const ret = wasm.mnemonic_clone(this.__wbg_ptr);\n        return Mnemonic.__wrap(ret);\n    }\n    /**\n     * @param {string} mnemonic\n     */\n    constructor(mnemonic) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(mnemonic, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.mnemonic_new(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            MnemonicFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} entropy\n     * @returns {Mnemonic}\n     */\n    static fromEntropy(entropy) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(entropy, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.mnemonic_fromEntropy(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Mnemonic.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} use24\n     * @returns {Mnemonic}\n     */\n    static generate(use24) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mnemonic_generate(retptr, use24);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Mnemonic.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} mnemonic\n     * @returns {boolean}\n     */\n    static verify(mnemonic) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(mnemonic, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.mnemonic_verify(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    toString() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mnemonic_toString(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_export_4(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    toEntropy() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mnemonic_toEntropy(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} password\n     * @returns {Uint8Array}\n     */\n    toSeed(password) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(password, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.mnemonic_toSeed(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v2 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst MofNMemoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_mofnmemo_free(ptr >>> 0, 1));\n\nclass MofNMemo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MofNMemo.prototype);\n        obj.__wbg_ptr = ptr;\n        MofNMemoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MofNMemoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mofnmemo_free(ptr, 0);\n    }\n    /**\n     * @returns {MofNMemo}\n     */\n    clone() {\n        const ret = wasm.mofnmemo_clone(this.__wbg_ptr);\n        return MofNMemo.__wrap(ret);\n    }\n    /**\n     * @param {number} required\n     * @param {InnerPuzzleMemo[]} items\n     */\n    constructor(required, items) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(items, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.mofnmemo_new(retptr, required, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            MofNMemoFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get required() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.innerpuzzlememo_nonce(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set required(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.innerpuzzlememo_set_nonce(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {InnerPuzzleMemo[]}\n     */\n    get items() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mofnmemo_items(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {InnerPuzzleMemo[]} value\n     */\n    set items(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.mofnmemo_set_items(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst NftFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_nft_free(ptr >>> 0, 1));\n\nclass Nft {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Nft.prototype);\n        obj.__wbg_ptr = ptr;\n        NftFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof Nft)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        NftFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nft_free(ptr, 0);\n    }\n    /**\n     * @returns {Nft}\n     */\n    clone() {\n        const ret = wasm.nft_clone(this.__wbg_ptr);\n        return Nft.__wrap(ret);\n    }\n    /**\n     * @returns {Proof}\n     */\n    childProof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nft_childProof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Proof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} p2PuzzleHash\n     * @param {Uint8Array | null | undefined} currentOwner\n     * @param {Program} metadata\n     * @returns {Nft}\n     */\n    child(p2PuzzleHash, currentOwner, metadata) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(p2PuzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(currentOwner) ? 0 : passArray8ToWasm0(currentOwner, wasm.__wbindgen_export_1);\n            var len1 = WASM_VECTOR_LEN;\n            _assertClass(metadata, Program);\n            var ptr2 = metadata.__destroy_into_raw();\n            wasm.nft_child(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Nft.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {NftInfo} info\n     * @returns {Nft}\n     */\n    childWith(info) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(info, NftInfo);\n            var ptr0 = info.__destroy_into_raw();\n            wasm.nft_childWith(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Nft.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} coin\n     * @param {Proof} proof\n     * @param {NftInfo} info\n     */\n    constructor(coin, proof, info) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(coin, Coin);\n            var ptr0 = coin.__destroy_into_raw();\n            _assertClass(proof, Proof);\n            var ptr1 = proof.__destroy_into_raw();\n            _assertClass(info, NftInfo);\n            var ptr2 = info.__destroy_into_raw();\n            wasm.nft_new(retptr, ptr0, ptr1, ptr2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            NftFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Coin}\n     */\n    get coin() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coinrecord_coin(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Coin.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} value\n     */\n    set coin(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Coin);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.nft_set_coin(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Proof}\n     */\n    get proof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.did_proof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Proof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Proof} value\n     */\n    set proof(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Proof);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.nft_set_proof(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {NftInfo}\n     */\n    get info() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nft_info(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NftInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {NftInfo} value\n     */\n    set info(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, NftInfo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.nft_set_info(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst NftInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_nftinfo_free(ptr >>> 0, 1));\n\nclass NftInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(NftInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        NftInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        NftInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nftinfo_free(ptr, 0);\n    }\n    /**\n     * @returns {NftInfo}\n     */\n    clone() {\n        const ret = wasm.nftinfo_clone(this.__wbg_ptr);\n        return NftInfo.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    innerPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftinfo_innerPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftinfo_puzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} launcherId\n     * @param {Program} metadata\n     * @param {Uint8Array} metadataUpdaterPuzzleHash\n     * @param {Uint8Array | null | undefined} currentOwner\n     * @param {Uint8Array} royaltyPuzzleHash\n     * @param {number} royaltyBasisPoints\n     * @param {Uint8Array} p2PuzzleHash\n     */\n    constructor(launcherId, metadata, metadataUpdaterPuzzleHash, currentOwner, royaltyPuzzleHash, royaltyBasisPoints, p2PuzzleHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(launcherId, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(metadata, Program);\n            var ptr1 = metadata.__destroy_into_raw();\n            const ptr2 = passArray8ToWasm0(metadataUpdaterPuzzleHash, wasm.__wbindgen_export_1);\n            const len2 = WASM_VECTOR_LEN;\n            var ptr3 = isLikeNone(currentOwner) ? 0 : passArray8ToWasm0(currentOwner, wasm.__wbindgen_export_1);\n            var len3 = WASM_VECTOR_LEN;\n            const ptr4 = passArray8ToWasm0(royaltyPuzzleHash, wasm.__wbindgen_export_1);\n            const len4 = WASM_VECTOR_LEN;\n            const ptr5 = passArray8ToWasm0(p2PuzzleHash, wasm.__wbindgen_export_1);\n            const len5 = WASM_VECTOR_LEN;\n            wasm.nftinfo_new(retptr, ptr0, len0, ptr1, ptr2, len2, ptr3, len3, ptr4, len4, royaltyBasisPoints, ptr5, len5);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            NftInfoFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get launcherId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftinfo_launcherId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set launcherId(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nftinfo_set_launcherId(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get metadata() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftinfo_metadata(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set metadata(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.nftinfo_set_metadata(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get metadataUpdaterPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftinfo_metadataUpdaterPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set metadataUpdaterPuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nftinfo_set_metadataUpdaterPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get currentOwner() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftinfo_currentOwner(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set currentOwner(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.nftinfo_set_currentOwner(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get royaltyPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftinfo_royaltyPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set royaltyPuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nftinfo_set_royaltyPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get royaltyBasisPoints() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftinfo_royaltyBasisPoints(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set royaltyBasisPoints(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftinfo_set_royaltyBasisPoints(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get p2PuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftinfo_p2PuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set p2PuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nftinfo_set_p2PuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst NftMetadataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_nftmetadata_free(ptr >>> 0, 1));\n\nclass NftMetadata {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(NftMetadata.prototype);\n        obj.__wbg_ptr = ptr;\n        NftMetadataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        NftMetadataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nftmetadata_free(ptr, 0);\n    }\n    /**\n     * @returns {NftMetadata}\n     */\n    clone() {\n        const ret = wasm.nftmetadata_clone(this.__wbg_ptr);\n        return NftMetadata.__wrap(ret);\n    }\n    /**\n     * @param {bigint} editionNumber\n     * @param {bigint} editionTotal\n     * @param {string[]} dataUris\n     * @param {Uint8Array | null | undefined} dataHash\n     * @param {string[]} metadataUris\n     * @param {Uint8Array | null | undefined} metadataHash\n     * @param {string[]} licenseUris\n     * @param {Uint8Array | null} [licenseHash]\n     */\n    constructor(editionNumber, editionTotal, dataUris, dataHash, metadataUris, metadataHash, licenseUris, licenseHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(dataUris, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(dataHash) ? 0 : passArray8ToWasm0(dataHash, wasm.__wbindgen_export_1);\n            var len1 = WASM_VECTOR_LEN;\n            const ptr2 = passArrayJsValueToWasm0(metadataUris, wasm.__wbindgen_export_1);\n            const len2 = WASM_VECTOR_LEN;\n            var ptr3 = isLikeNone(metadataHash) ? 0 : passArray8ToWasm0(metadataHash, wasm.__wbindgen_export_1);\n            var len3 = WASM_VECTOR_LEN;\n            const ptr4 = passArrayJsValueToWasm0(licenseUris, wasm.__wbindgen_export_1);\n            const len4 = WASM_VECTOR_LEN;\n            var ptr5 = isLikeNone(licenseHash) ? 0 : passArray8ToWasm0(licenseHash, wasm.__wbindgen_export_1);\n            var len5 = WASM_VECTOR_LEN;\n            wasm.nftmetadata_new(retptr, addHeapObject(editionNumber), addHeapObject(editionTotal), ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4, ptr5, len5);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            NftMetadataFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get editionNumber() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftmetadata_editionNumber(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set editionNumber(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftmetadata_set_editionNumber(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get editionTotal() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftmetadata_editionTotal(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set editionTotal(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftmetadata_set_editionTotal(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string[]}\n     */\n    get dataUris() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftmetadata_dataUris(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string[]} value\n     */\n    set dataUris(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nftmetadata_set_dataUris(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get dataHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftmetadata_dataHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set dataHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.nftmetadata_set_dataHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string[]}\n     */\n    get metadataUris() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftmetadata_metadataUris(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string[]} value\n     */\n    set metadataUris(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nftmetadata_set_metadataUris(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get metadataHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftmetadata_metadataHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set metadataHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.nftmetadata_set_metadataHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string[]}\n     */\n    get licenseUris() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftmetadata_licenseUris(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string[]} value\n     */\n    set licenseUris(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nftmetadata_set_licenseUris(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get licenseHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftmetadata_licenseHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set licenseHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.nftmetadata_set_licenseHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst NftMintFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_nftmint_free(ptr >>> 0, 1));\n\nclass NftMint {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(NftMint.prototype);\n        obj.__wbg_ptr = ptr;\n        NftMintFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof NftMint)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        NftMintFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nftmint_free(ptr, 0);\n    }\n    /**\n     * @returns {NftMint}\n     */\n    clone() {\n        const ret = wasm.nftmint_clone(this.__wbg_ptr);\n        return NftMint.__wrap(ret);\n    }\n    /**\n     * @param {Program} metadata\n     * @param {Uint8Array} metadataUpdaterPuzzleHash\n     * @param {Uint8Array} p2PuzzleHash\n     * @param {Uint8Array} royaltyPuzzleHash\n     * @param {number} royaltyBasisPoints\n     * @param {TransferNft | null} [transferCondition]\n     */\n    constructor(metadata, metadataUpdaterPuzzleHash, p2PuzzleHash, royaltyPuzzleHash, royaltyBasisPoints, transferCondition) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(metadata, Program);\n            var ptr0 = metadata.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(metadataUpdaterPuzzleHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passArray8ToWasm0(p2PuzzleHash, wasm.__wbindgen_export_1);\n            const len2 = WASM_VECTOR_LEN;\n            const ptr3 = passArray8ToWasm0(royaltyPuzzleHash, wasm.__wbindgen_export_1);\n            const len3 = WASM_VECTOR_LEN;\n            let ptr4 = 0;\n            if (!isLikeNone(transferCondition)) {\n                _assertClass(transferCondition, TransferNft);\n                ptr4 = transferCondition.__destroy_into_raw();\n            }\n            wasm.nftmint_new(retptr, ptr0, ptr1, len1, ptr2, len2, ptr3, len3, royaltyBasisPoints, ptr4);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            NftMintFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get metadata() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftmint_metadata(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set metadata(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.nftmint_set_metadata(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get metadataUpdaterPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftmint_metadataUpdaterPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set metadataUpdaterPuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nftmint_set_metadataUpdaterPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get p2PuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftmint_p2PuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set p2PuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nftmint_set_p2PuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get royaltyPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftmint_royaltyPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set royaltyPuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nftmint_set_royaltyPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get royaltyBasisPoints() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftmint_royaltyBasisPoints(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set royaltyBasisPoints(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftmint_set_royaltyBasisPoints(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransferNft | undefined}\n     */\n    get transferCondition() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nftmint_transferCondition(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : TransferNft.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {TransferNft | null} [value]\n     */\n    set transferCondition(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, TransferNft);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.nftmint_set_transferCondition(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst OutputFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_output_free(ptr >>> 0, 1));\n\nclass Output {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Output.prototype);\n        obj.__wbg_ptr = ptr;\n        OutputFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OutputFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_output_free(ptr, 0);\n    }\n    /**\n     * @returns {Output}\n     */\n    clone() {\n        const ret = wasm.output_clone(this.__wbg_ptr);\n        return Output.__wrap(ret);\n    }\n    /**\n     * @param {Program} value\n     * @param {bigint} cost\n     */\n    constructor(value, cost) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.output_new(retptr, ptr0, addHeapObject(cost));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            OutputFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.output_value(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set value(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.output_set_value(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get cost() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.output_cost(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set cost(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.output_set_cost(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PairFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pair_free(ptr >>> 0, 1));\n\nclass Pair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Pair.prototype);\n        obj.__wbg_ptr = ptr;\n        PairFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PairFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pair_free(ptr, 0);\n    }\n    /**\n     * @returns {Pair}\n     */\n    clone() {\n        const ret = wasm.pair_clone(this.__wbg_ptr);\n        return Pair.__wrap(ret);\n    }\n    /**\n     * @param {Program} first\n     * @param {Program} rest\n     */\n    constructor(first, rest) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(first, Program);\n            var ptr0 = first.__destroy_into_raw();\n            _assertClass(rest, Program);\n            var ptr1 = rest.__destroy_into_raw();\n            wasm.pair_new(retptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            PairFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get first() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pair_first(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set first(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.pair_set_first(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get rest() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pair_rest(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set rest(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.pair_set_rest(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ParsedCatFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_parsedcat_free(ptr >>> 0, 1));\n\nclass ParsedCat {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ParsedCat.prototype);\n        obj.__wbg_ptr = ptr;\n        ParsedCatFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ParsedCatFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_parsedcat_free(ptr, 0);\n    }\n    /**\n     * @returns {ParsedCat}\n     */\n    clone() {\n        const ret = wasm.parsedcat_clone(this.__wbg_ptr);\n        return ParsedCat.__wrap(ret);\n    }\n    /**\n     * @param {CatInfo} info\n     * @param {Puzzle | null} [p2Puzzle]\n     */\n    constructor(info, p2Puzzle) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(info, CatInfo);\n            var ptr0 = info.__destroy_into_raw();\n            let ptr1 = 0;\n            if (!isLikeNone(p2Puzzle)) {\n                _assertClass(p2Puzzle, Puzzle);\n                ptr1 = p2Puzzle.__destroy_into_raw();\n            }\n            wasm.parsedcat_new(retptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            ParsedCatFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CatInfo}\n     */\n    get info() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.parsedcat_info(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CatInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {CatInfo} value\n     */\n    set info(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, CatInfo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.parsedcat_set_info(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Puzzle | undefined}\n     */\n    get p2Puzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.parsedcat_p2Puzzle(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : Puzzle.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Puzzle | null} [value]\n     */\n    set p2Puzzle(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, Puzzle);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.parsedcat_set_p2Puzzle(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ParsedDidFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_parseddid_free(ptr >>> 0, 1));\n\nclass ParsedDid {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ParsedDid.prototype);\n        obj.__wbg_ptr = ptr;\n        ParsedDidFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ParsedDidFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_parseddid_free(ptr, 0);\n    }\n    /**\n     * @returns {ParsedDid}\n     */\n    clone() {\n        const ret = wasm.parseddid_clone(this.__wbg_ptr);\n        return ParsedDid.__wrap(ret);\n    }\n    /**\n     * @param {DidInfo} info\n     * @param {Puzzle} p2Puzzle\n     */\n    constructor(info, p2Puzzle) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(info, DidInfo);\n            var ptr0 = info.__destroy_into_raw();\n            _assertClass(p2Puzzle, Puzzle);\n            var ptr1 = p2Puzzle.__destroy_into_raw();\n            wasm.parseddid_new(retptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            ParsedDidFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {DidInfo}\n     */\n    get info() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.parseddid_info(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DidInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {DidInfo} value\n     */\n    set info(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, DidInfo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.parseddid_set_info(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Puzzle}\n     */\n    get p2Puzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.parseddid_p2Puzzle(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Puzzle.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Puzzle} value\n     */\n    set p2Puzzle(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Puzzle);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.parseddid_set_p2Puzzle(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ParsedNftFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_parsednft_free(ptr >>> 0, 1));\n\nclass ParsedNft {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ParsedNft.prototype);\n        obj.__wbg_ptr = ptr;\n        ParsedNftFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ParsedNftFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_parsednft_free(ptr, 0);\n    }\n    /**\n     * @returns {ParsedNft}\n     */\n    clone() {\n        const ret = wasm.parsednft_clone(this.__wbg_ptr);\n        return ParsedNft.__wrap(ret);\n    }\n    /**\n     * @param {NftInfo} info\n     * @param {Puzzle} p2Puzzle\n     */\n    constructor(info, p2Puzzle) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(info, NftInfo);\n            var ptr0 = info.__destroy_into_raw();\n            _assertClass(p2Puzzle, Puzzle);\n            var ptr1 = p2Puzzle.__destroy_into_raw();\n            wasm.parsednft_new(retptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            ParsedNftFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {NftInfo}\n     */\n    get info() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.parsednft_info(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NftInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {NftInfo} value\n     */\n    set info(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, NftInfo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.parsednft_set_info(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Puzzle}\n     */\n    get p2Puzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.parsednft_p2Puzzle(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Puzzle.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Puzzle} value\n     */\n    set p2Puzzle(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Puzzle);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.parsednft_set_p2Puzzle(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PoolTargetFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pooltarget_free(ptr >>> 0, 1));\n\nclass PoolTarget {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PoolTarget.prototype);\n        obj.__wbg_ptr = ptr;\n        PoolTargetFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PoolTargetFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pooltarget_free(ptr, 0);\n    }\n    /**\n     * @returns {PoolTarget}\n     */\n    clone() {\n        const ret = wasm.pooltarget_clone(this.__wbg_ptr);\n        return PoolTarget.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} puzzleHash\n     * @param {number} maxHeight\n     */\n    constructor(puzzleHash, maxHeight) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.pooltarget_new(retptr, ptr0, len0, maxHeight);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            PoolTargetFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pooltarget_puzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set puzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.pooltarget_set_puzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get maxHeight() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pooltarget_maxHeight(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set maxHeight(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pooltarget_set_maxHeight(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ProgramFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_program_free(ptr >>> 0, 1));\n\nclass Program {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Program.prototype);\n        obj.__wbg_ptr = ptr;\n        ProgramFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof Program)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProgramFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_program_free(ptr, 0);\n    }\n    /**\n     * @returns {Program}\n     */\n    clone() {\n        const ret = wasm.program_clone(this.__wbg_ptr);\n        return Program.__wrap(ret);\n    }\n    /**\n     * @returns {Output}\n     */\n    compile() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_compile(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Output.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    unparse() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_unparse(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_export_4(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    serialize() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_serialize(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    serializeWithBackrefs() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_serializeWithBackrefs(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} solution\n     * @param {bigint} maxCost\n     * @param {boolean} mempoolMode\n     * @returns {Output}\n     */\n    run(solution, maxCost, mempoolMode) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(solution, Program);\n            var ptr0 = solution.__destroy_into_raw();\n            wasm.program_run(retptr, this.__wbg_ptr, ptr0, addHeapObject(maxCost), mempoolMode);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Output.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program[]} args\n     * @returns {Program}\n     */\n    curry(args) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(args, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_curry(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CurriedProgram | undefined}\n     */\n    uncurry() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_uncurry(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : CurriedProgram.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    treeHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_treeHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    isAtom() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_isAtom(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    isPair() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_isPair(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    isNull() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_isNull(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    length() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_length(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    first() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_first(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    rest() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_rest(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint | undefined}\n     */\n    toInt() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toInt(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    toString() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toString(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean | undefined}\n     */\n    toBool() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toBool(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0xFFFFFF ? undefined : r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    toAtom() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toAtom(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program[] | undefined}\n     */\n    toList() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toList(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Pair | undefined}\n     */\n    toPair() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toPair(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : Pair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Puzzle}\n     */\n    puzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_puzzle(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Puzzle.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {NftMetadata | undefined}\n     */\n    parseNftMetadata() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseNftMetadata(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : NftMetadata.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Remark | undefined}\n     */\n    parseRemark() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseRemark(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : Remark.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AggSigParent | undefined}\n     */\n    parseAggSigParent() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAggSigParent(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AggSigParent.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AggSigPuzzle | undefined}\n     */\n    parseAggSigPuzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAggSigPuzzle(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AggSigPuzzle.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AggSigAmount | undefined}\n     */\n    parseAggSigAmount() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAggSigAmount(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AggSigAmount.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AggSigPuzzleAmount | undefined}\n     */\n    parseAggSigPuzzleAmount() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAggSigPuzzleAmount(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AggSigPuzzleAmount.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AggSigParentAmount | undefined}\n     */\n    parseAggSigParentAmount() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAggSigParentAmount(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AggSigParentAmount.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AggSigParentPuzzle | undefined}\n     */\n    parseAggSigParentPuzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAggSigParentPuzzle(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AggSigParentPuzzle.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AggSigUnsafe | undefined}\n     */\n    parseAggSigUnsafe() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAggSigUnsafe(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AggSigUnsafe.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AggSigMe | undefined}\n     */\n    parseAggSigMe() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAggSigMe(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AggSigMe.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CreateCoin | undefined}\n     */\n    parseCreateCoin() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseCreateCoin(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : CreateCoin.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ReserveFee | undefined}\n     */\n    parseReserveFee() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseReserveFee(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : ReserveFee.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CreateCoinAnnouncement | undefined}\n     */\n    parseCreateCoinAnnouncement() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseCreateCoinAnnouncement(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : CreateCoinAnnouncement.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CreatePuzzleAnnouncement | undefined}\n     */\n    parseCreatePuzzleAnnouncement() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseCreatePuzzleAnnouncement(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : CreatePuzzleAnnouncement.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertCoinAnnouncement | undefined}\n     */\n    parseAssertCoinAnnouncement() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertCoinAnnouncement(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertCoinAnnouncement.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertPuzzleAnnouncement | undefined}\n     */\n    parseAssertPuzzleAnnouncement() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertPuzzleAnnouncement(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertPuzzleAnnouncement.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertConcurrentSpend | undefined}\n     */\n    parseAssertConcurrentSpend() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertConcurrentSpend(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertConcurrentSpend.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertConcurrentPuzzle | undefined}\n     */\n    parseAssertConcurrentPuzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertConcurrentPuzzle(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertConcurrentPuzzle.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertSecondsRelative | undefined}\n     */\n    parseAssertSecondsRelative() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertSecondsRelative(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertSecondsRelative.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertSecondsAbsolute | undefined}\n     */\n    parseAssertSecondsAbsolute() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertSecondsAbsolute(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertSecondsAbsolute.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertHeightRelative | undefined}\n     */\n    parseAssertHeightRelative() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertHeightRelative(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertHeightRelative.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertHeightAbsolute | undefined}\n     */\n    parseAssertHeightAbsolute() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertHeightAbsolute(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertHeightAbsolute.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertBeforeSecondsRelative | undefined}\n     */\n    parseAssertBeforeSecondsRelative() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertBeforeSecondsRelative(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertBeforeSecondsRelative.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertBeforeSecondsAbsolute | undefined}\n     */\n    parseAssertBeforeSecondsAbsolute() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertBeforeSecondsAbsolute(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertBeforeSecondsAbsolute.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertBeforeHeightRelative | undefined}\n     */\n    parseAssertBeforeHeightRelative() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertBeforeHeightRelative(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertBeforeHeightRelative.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertBeforeHeightAbsolute | undefined}\n     */\n    parseAssertBeforeHeightAbsolute() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertBeforeHeightAbsolute(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertBeforeHeightAbsolute.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertMyCoinId | undefined}\n     */\n    parseAssertMyCoinId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertMyCoinId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertMyCoinId.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertMyParentId | undefined}\n     */\n    parseAssertMyParentId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertMyParentId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertMyParentId.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertMyPuzzleHash | undefined}\n     */\n    parseAssertMyPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertMyPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertMyPuzzleHash.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertMyAmount | undefined}\n     */\n    parseAssertMyAmount() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertMyAmount(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertMyAmount.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertMyBirthSeconds | undefined}\n     */\n    parseAssertMyBirthSeconds() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertMyBirthSeconds(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertMyBirthSeconds.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertMyBirthHeight | undefined}\n     */\n    parseAssertMyBirthHeight() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertMyBirthHeight(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertMyBirthHeight.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssertEphemeral | undefined}\n     */\n    parseAssertEphemeral() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseAssertEphemeral(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : AssertEphemeral.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {SendMessage | undefined}\n     */\n    parseSendMessage() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseSendMessage(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : SendMessage.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ReceiveMessage | undefined}\n     */\n    parseReceiveMessage() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseReceiveMessage(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : ReceiveMessage.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Softfork | undefined}\n     */\n    parseSoftfork() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseSoftfork(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : Softfork.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MeltSingleton | undefined}\n     */\n    parseMeltSingleton() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseMeltSingleton(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : MeltSingleton.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransferNft | undefined}\n     */\n    parseTransferNft() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseTransferNft(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : TransferNft.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {RunCatTail | undefined}\n     */\n    parseRunCatTail() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseRunCatTail(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : RunCatTail.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {UpdateNftMetadata | undefined}\n     */\n    parseUpdateNftMetadata() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseUpdateNftMetadata(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : UpdateNftMetadata.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {UpdateDataStoreMerkleRoot | undefined}\n     */\n    parseUpdateDataStoreMerkleRoot() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_parseUpdateDataStoreMerkleRoot(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : UpdateDataStoreMerkleRoot.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    toBoundCheckedNumber() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-32);\n            wasm.program_toBoundCheckedNumber(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r2 = getDataViewMemory0().getFloat64(retptr + 8 * 1, true);\n            var r4 = getDataViewMemory0().getInt32(retptr + 4 * 4, true);\n            var r5 = getDataViewMemory0().getInt32(retptr + 4 * 5, true);\n            if (r5) {\n                throw takeObject(r4);\n            }\n            return r0 === 0 ? undefined : r2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(32);\n        }\n    }\n}\n\nconst ProofFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_proof_free(ptr >>> 0, 1));\n\nclass Proof {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Proof.prototype);\n        obj.__wbg_ptr = ptr;\n        ProofFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProofFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_proof_free(ptr, 0);\n    }\n    /**\n     * @returns {Proof}\n     */\n    clone() {\n        const ret = wasm.proof_clone(this.__wbg_ptr);\n        return Proof.__wrap(ret);\n    }\n    /**\n     * @returns {LineageProof | undefined}\n     */\n    toLineageProof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proof_toLineageProof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : LineageProof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} parentParentCoinInfo\n     * @param {Uint8Array | null | undefined} parentInnerPuzzleHash\n     * @param {bigint} parentAmount\n     */\n    constructor(parentParentCoinInfo, parentInnerPuzzleHash, parentAmount) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(parentParentCoinInfo, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(parentInnerPuzzleHash) ? 0 : passArray8ToWasm0(parentInnerPuzzleHash, wasm.__wbindgen_export_1);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.proof_new(retptr, ptr0, len0, ptr1, len1, addHeapObject(parentAmount));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            ProofFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get parentParentCoinInfo() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proof_parentParentCoinInfo(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set parentParentCoinInfo(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.proof_set_parentParentCoinInfo(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get parentInnerPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proof_parentInnerPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set parentInnerPuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.proof_set_parentInnerPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get parentAmount() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proof_parentAmount(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set parentAmount(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proof_set_parentAmount(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ProofOfSpaceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_proofofspace_free(ptr >>> 0, 1));\n\nclass ProofOfSpace {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProofOfSpace.prototype);\n        obj.__wbg_ptr = ptr;\n        ProofOfSpaceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ProofOfSpaceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_proofofspace_free(ptr, 0);\n    }\n    /**\n     * @returns {ProofOfSpace}\n     */\n    clone() {\n        const ret = wasm.proofofspace_clone(this.__wbg_ptr);\n        return ProofOfSpace.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} challenge\n     * @param {PublicKey | null | undefined} poolPublicKey\n     * @param {Uint8Array | null | undefined} poolContractPuzzleHash\n     * @param {PublicKey} plotPublicKey\n     * @param {number} versionAndSize\n     * @param {Uint8Array} proof\n     */\n    constructor(challenge, poolPublicKey, poolContractPuzzleHash, plotPublicKey, versionAndSize, proof) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(challenge, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            let ptr1 = 0;\n            if (!isLikeNone(poolPublicKey)) {\n                _assertClass(poolPublicKey, PublicKey);\n                ptr1 = poolPublicKey.__destroy_into_raw();\n            }\n            var ptr2 = isLikeNone(poolContractPuzzleHash) ? 0 : passArray8ToWasm0(poolContractPuzzleHash, wasm.__wbindgen_export_1);\n            var len2 = WASM_VECTOR_LEN;\n            _assertClass(plotPublicKey, PublicKey);\n            var ptr3 = plotPublicKey.__destroy_into_raw();\n            const ptr4 = passArray8ToWasm0(proof, wasm.__wbindgen_export_1);\n            const len4 = WASM_VECTOR_LEN;\n            wasm.proofofspace_new(retptr, ptr0, len0, ptr1, ptr2, len2, ptr3, versionAndSize, ptr4, len4);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            ProofOfSpaceFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get challenge() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proofofspace_challenge(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set challenge(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.proofofspace_set_challenge(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PublicKey | undefined}\n     */\n    get poolPublicKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proofofspace_poolPublicKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey | null} [value]\n     */\n    set poolPublicKey(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, PublicKey);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.proofofspace_set_poolPublicKey(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get poolContractPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proofofspace_poolContractPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set poolContractPuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.proofofspace_set_poolContractPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    get plotPublicKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proofofspace_plotPublicKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} value\n     */\n    set plotPublicKey(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, PublicKey);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.proofofspace_set_plotPublicKey(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get versionAndSize() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proofofspace_versionAndSize(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set versionAndSize(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proofofspace_set_versionAndSize(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get proof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proofofspace_proof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set proof(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.proofofspace_set_proof(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_publickey_free(ptr >>> 0, 1));\n\nclass PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PublicKey)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_publickey_free(ptr, 0);\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    clone() {\n        const ret = wasm.publickey_clone(this.__wbg_ptr);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    static infinity() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.publickey_infinity(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey[]} publicKeys\n     * @returns {PublicKey}\n     */\n    static aggregate(publicKeys) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(publicKeys, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.publickey_aggregate(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey[]} publicKeys\n     * @param {Array<any>} messages\n     * @param {Signature} signature\n     * @returns {boolean}\n     */\n    static aggregateVerify(publicKeys, messages, signature) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(publicKeys, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(signature, Signature);\n            var ptr1 = signature.__destroy_into_raw();\n            wasm.publickey_aggregateVerify(retptr, ptr0, len0, addHeapObject(messages), ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PublicKey}\n     */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.publickey_fromBytes(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.publickey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} message\n     * @param {Signature} signature\n     * @returns {boolean}\n     */\n    verify(message, signature) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(signature, Signature);\n            var ptr1 = signature.__destroy_into_raw();\n            wasm.publickey_verify(retptr, this.__wbg_ptr, ptr0, len0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    fingerprint() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.publickey_fingerprint(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    isInfinity() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.publickey_isInfinity(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    isValid() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.publickey_isValid(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} index\n     * @returns {PublicKey}\n     */\n    deriveUnhardened(index) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.publickey_deriveUnhardened(retptr, this.__wbg_ptr, index);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint32Array} path\n     * @returns {PublicKey}\n     */\n    deriveUnhardenedPath(path) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray32ToWasm0(path, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.publickey_deriveUnhardenedPath(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    deriveSynthetic() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.publickey_deriveSynthetic(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} hiddenPuzzleHash\n     * @returns {PublicKey}\n     */\n    deriveSyntheticHidden(hiddenPuzzleHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(hiddenPuzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.publickey_deriveSyntheticHidden(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PushTxResponseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pushtxresponse_free(ptr >>> 0, 1));\n\nclass PushTxResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PushTxResponse.prototype);\n        obj.__wbg_ptr = ptr;\n        PushTxResponseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PushTxResponseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pushtxresponse_free(ptr, 0);\n    }\n    /**\n     * @returns {PushTxResponse}\n     */\n    clone() {\n        const ret = wasm.pushtxresponse_clone(this.__wbg_ptr);\n        return PushTxResponse.__wrap(ret);\n    }\n    /**\n     * @param {string} status\n     * @param {string | null | undefined} error\n     * @param {boolean} success\n     */\n    constructor(status, error, success) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(status, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            const len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(error) ? 0 : passStringToWasm0(error, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.pushtxresponse_new(retptr, ptr0, len0, ptr1, len1, success);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            PushTxResponseFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    get status() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pushtxresponse_status(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_export_4(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * @param {string} value\n     */\n    set status(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.pushtxresponse_set_status(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get error() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pushtxresponse_error(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | null} [value]\n     */\n    set error(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.pushtxresponse_set_error(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get success() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordsresponse_success(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set success(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.getblockrecordsresponse_set_success(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst PuzzleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_puzzle_free(ptr >>> 0, 1));\n\nclass Puzzle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Puzzle.prototype);\n        obj.__wbg_ptr = ptr;\n        PuzzleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PuzzleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_puzzle_free(ptr, 0);\n    }\n    /**\n     * @returns {Puzzle}\n     */\n    clone() {\n        const ret = wasm.puzzle_clone(this.__wbg_ptr);\n        return Puzzle.__wrap(ret);\n    }\n    /**\n     * @returns {ParsedCat | undefined}\n     */\n    parseCat() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.puzzle_parseCat(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : ParsedCat.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} parentCoin\n     * @param {Program} parentSolution\n     * @returns {Cat[] | undefined}\n     */\n    parseChildCats(parentCoin, parentSolution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(parentCoin, Coin);\n            var ptr0 = parentCoin.__destroy_into_raw();\n            _assertClass(parentSolution, Program);\n            var ptr1 = parentSolution.__destroy_into_raw();\n            wasm.puzzle_parseChildCats(retptr, this.__wbg_ptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v3;\n            if (r0 !== 0) {\n                v3 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            }\n            return v3;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ParsedNft | undefined}\n     */\n    parseNft() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.puzzle_parseNft(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : ParsedNft.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} parentCoin\n     * @param {Program} parentSolution\n     * @returns {Nft | undefined}\n     */\n    parseChildNft(parentCoin, parentSolution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(parentCoin, Coin);\n            var ptr0 = parentCoin.__destroy_into_raw();\n            _assertClass(parentSolution, Program);\n            var ptr1 = parentSolution.__destroy_into_raw();\n            wasm.puzzle_parseChildNft(retptr, this.__wbg_ptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : Nft.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ParsedDid | undefined}\n     */\n    parseDid() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.puzzle_parseDid(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : ParsedDid.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} parentCoin\n     * @param {Program} parentSolution\n     * @param {Coin} coin\n     * @returns {Did | undefined}\n     */\n    parseChildDid(parentCoin, parentSolution, coin) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(parentCoin, Coin);\n            var ptr0 = parentCoin.__destroy_into_raw();\n            _assertClass(parentSolution, Program);\n            var ptr1 = parentSolution.__destroy_into_raw();\n            _assertClass(coin, Coin);\n            var ptr2 = coin.__destroy_into_raw();\n            wasm.puzzle_parseChildDid(retptr, this.__wbg_ptr, ptr0, ptr1, ptr2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : Did.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {StreamingPuzzleInfo | undefined}\n     */\n    parseInnerStreamingPuzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.puzzle_parseInnerStreamingPuzzle(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : StreamingPuzzleInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} parentCoin\n     * @param {Program} parentSolution\n     * @returns {StreamedCatParsingResult}\n     */\n    parseChildStreamedCat(parentCoin, parentSolution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(parentCoin, Coin);\n            var ptr0 = parentCoin.__destroy_into_raw();\n            _assertClass(parentSolution, Program);\n            var ptr1 = parentSolution.__destroy_into_raw();\n            wasm.puzzle_parseChildStreamedCat(retptr, this.__wbg_ptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StreamedCatParsingResult.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} parentSolution\n     * @returns {Clawback[] | undefined}\n     */\n    parseChildClawbacks(parentSolution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(parentSolution, Program);\n            var ptr0 = parentSolution.__destroy_into_raw();\n            wasm.puzzle_parseChildClawbacks(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v2;\n            if (r0 !== 0) {\n                v2 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            }\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} puzzleHash\n     * @param {Program} program\n     * @param {Uint8Array} modHash\n     * @param {Program | null} [args]\n     */\n    constructor(puzzleHash, program, modHash, args) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(program, Program);\n            var ptr1 = program.__destroy_into_raw();\n            const ptr2 = passArray8ToWasm0(modHash, wasm.__wbindgen_export_1);\n            const len2 = WASM_VECTOR_LEN;\n            let ptr3 = 0;\n            if (!isLikeNone(args)) {\n                _assertClass(args, Program);\n                ptr3 = args.__destroy_into_raw();\n            }\n            wasm.puzzle_new(retptr, ptr0, len0, ptr1, ptr2, len2, ptr3);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            PuzzleFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.puzzle_puzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set puzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.puzzle_set_puzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get program() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.puzzle_program(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set program(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.puzzle_set_program(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get modHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.puzzle_modHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set modHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.puzzle_set_modHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program | undefined}\n     */\n    get args() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.puzzle_args(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program | null} [value]\n     */\n    set args(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, Program);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.puzzle_set_args(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst R1PairFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_r1pair_free(ptr >>> 0, 1));\n\nclass R1Pair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(R1Pair.prototype);\n        obj.__wbg_ptr = ptr;\n        R1PairFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        R1PairFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_r1pair_free(ptr, 0);\n    }\n    /**\n     * @returns {R1Pair}\n     */\n    clone() {\n        const ret = wasm.r1pair_clone(this.__wbg_ptr);\n        return R1Pair.__wrap(ret);\n    }\n    /**\n     * @param {bigint} seed\n     * @returns {R1Pair}\n     */\n    static fromSeed(seed) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.r1pair_fromSeed(retptr, addHeapObject(seed));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return R1Pair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} seed\n     * @param {number} count\n     * @returns {R1Pair[]}\n     */\n    static manyFromSeed(seed, count) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.r1pair_manyFromSeed(retptr, addHeapObject(seed), count);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {R1SecretKey} sk\n     * @param {R1PublicKey} pk\n     */\n    constructor(sk, pk) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(sk, R1SecretKey);\n            var ptr0 = sk.__destroy_into_raw();\n            _assertClass(pk, R1PublicKey);\n            var ptr1 = pk.__destroy_into_raw();\n            wasm.r1pair_new(retptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            R1PairFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {R1SecretKey}\n     */\n    get sk() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.r1pair_sk(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return R1SecretKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {R1SecretKey} value\n     */\n    set sk(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, R1SecretKey);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.r1pair_set_sk(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {R1PublicKey}\n     */\n    get pk() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.r1pair_pk(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return R1PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {R1PublicKey} value\n     */\n    set pk(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, R1PublicKey);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.r1pair_set_pk(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst R1PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_r1publickey_free(ptr >>> 0, 1));\n\nclass R1PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(R1PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        R1PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        R1PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_r1publickey_free(ptr, 0);\n    }\n    /**\n     * @returns {R1PublicKey}\n     */\n    clone() {\n        const ret = wasm.r1publickey_clone(this.__wbg_ptr);\n        return R1PublicKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {R1PublicKey}\n     */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.r1publickey_fromBytes(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return R1PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.r1publickey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    fingerprint() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.r1publickey_fingerprint(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} prehashed\n     * @param {R1Signature} signature\n     * @returns {boolean}\n     */\n    verifyPrehashed(prehashed, signature) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(prehashed, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(signature, R1Signature);\n            var ptr1 = signature.__destroy_into_raw();\n            wasm.r1publickey_verifyPrehashed(retptr, this.__wbg_ptr, ptr0, len0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst R1SecretKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_r1secretkey_free(ptr >>> 0, 1));\n\nclass R1SecretKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(R1SecretKey.prototype);\n        obj.__wbg_ptr = ptr;\n        R1SecretKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        R1SecretKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_r1secretkey_free(ptr, 0);\n    }\n    /**\n     * @returns {R1SecretKey}\n     */\n    clone() {\n        const ret = wasm.r1secretkey_clone(this.__wbg_ptr);\n        return R1SecretKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {R1SecretKey}\n     */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.r1secretkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return R1SecretKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.r1secretkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {R1PublicKey}\n     */\n    publicKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.r1secretkey_publicKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return R1PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} prehashed\n     * @returns {R1Signature}\n     */\n    signPrehashed(prehashed) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(prehashed, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.r1secretkey_signPrehashed(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return R1Signature.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst R1SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_r1signature_free(ptr >>> 0, 1));\n\nclass R1Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(R1Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        R1SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        R1SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_r1signature_free(ptr, 0);\n    }\n    /**\n     * @returns {R1Signature}\n     */\n    clone() {\n        const ret = wasm.k1signature_clone(this.__wbg_ptr);\n        return R1Signature.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {R1Signature}\n     */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.r1signature_fromBytes(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return R1Signature.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.k1signature_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ReceiveMessageFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_receivemessage_free(ptr >>> 0, 1));\n\nclass ReceiveMessage {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ReceiveMessage.prototype);\n        obj.__wbg_ptr = ptr;\n        ReceiveMessageFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ReceiveMessageFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_receivemessage_free(ptr, 0);\n    }\n    /**\n     * @returns {ReceiveMessage}\n     */\n    clone() {\n        const ret = wasm.receivemessage_clone(this.__wbg_ptr);\n        return ReceiveMessage.__wrap(ret);\n    }\n    /**\n     * @param {number} mode\n     * @param {Uint8Array} message\n     * @param {Program[]} data\n     */\n    constructor(mode, message, data) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArrayJsValueToWasm0(data, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.receivemessage_new(retptr, mode, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            ReceiveMessageFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get mode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.receivemessage_mode(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set mode(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.receivemessage_set_mode(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get message() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.receivemessage_message(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set message(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.receivemessage_set_message(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program[]}\n     */\n    get data() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.receivemessage_data(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program[]} value\n     */\n    set data(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.receivemessage_set_data(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst RemarkFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_remark_free(ptr >>> 0, 1));\n\nclass Remark {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Remark.prototype);\n        obj.__wbg_ptr = ptr;\n        RemarkFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RemarkFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_remark_free(ptr, 0);\n    }\n    /**\n     * @returns {Remark}\n     */\n    clone() {\n        const ret = wasm.remark_clone(this.__wbg_ptr);\n        return Remark.__wrap(ret);\n    }\n    /**\n     * @param {Program} rest\n     */\n    constructor(rest) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(rest, Program);\n            var ptr0 = rest.__destroy_into_raw();\n            wasm.remark_new(retptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            RemarkFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get rest() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.remark_rest(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set rest(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.remark_set_rest(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst ReserveFeeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_reservefee_free(ptr >>> 0, 1));\n\nclass ReserveFee {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ReserveFee.prototype);\n        obj.__wbg_ptr = ptr;\n        ReserveFeeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ReserveFeeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_reservefee_free(ptr, 0);\n    }\n    /**\n     * @returns {ReserveFee}\n     */\n    clone() {\n        const ret = wasm.assertbeforesecondsabsolute_clone(this.__wbg_ptr);\n        return ReserveFee.__wrap(ret);\n    }\n    /**\n     * @param {bigint} amount\n     */\n    constructor(amount) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_new(retptr, addHeapObject(amount));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            ReserveFeeFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get amount() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_seconds(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set amount(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforesecondsabsolute_set_seconds(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst RestrictionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_restriction_free(ptr >>> 0, 1));\n\nclass Restriction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Restriction.prototype);\n        obj.__wbg_ptr = ptr;\n        RestrictionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof Restriction)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RestrictionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_restriction_free(ptr, 0);\n    }\n    /**\n     * @returns {Restriction}\n     */\n    clone() {\n        const ret = wasm.restriction_clone(this.__wbg_ptr);\n        return Restriction.__wrap(ret);\n    }\n    /**\n     * @param {RestrictionKind} kind\n     * @param {Uint8Array} puzzleHash\n     */\n    constructor(kind, puzzleHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.restriction_new(retptr, kind, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            RestrictionFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {RestrictionKind}\n     */\n    get kind() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.restriction_kind(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {RestrictionKind} value\n     */\n    set kind(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.restriction_set_kind(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.restriction_puzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set puzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.restriction_set_puzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst RestrictionMemoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_restrictionmemo_free(ptr >>> 0, 1));\n\nclass RestrictionMemo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RestrictionMemo.prototype);\n        obj.__wbg_ptr = ptr;\n        RestrictionMemoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof RestrictionMemo)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RestrictionMemoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_restrictionmemo_free(ptr, 0);\n    }\n    /**\n     * @returns {RestrictionMemo}\n     */\n    clone() {\n        const ret = wasm.restrictionmemo_clone(this.__wbg_ptr);\n        return RestrictionMemo.__wrap(ret);\n    }\n    /**\n     * @param {Clvm} clvm\n     * @param {Uint8Array} leftSideSubtreeHash\n     * @param {number} nonce\n     * @param {Uint8Array} memberValidatorListHash\n     * @param {Uint8Array} delegatedPuzzleValidatorListHash\n     * @returns {RestrictionMemo}\n     */\n    static force1Of2RestrictedVariable(clvm, leftSideSubtreeHash, nonce, memberValidatorListHash, delegatedPuzzleValidatorListHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(leftSideSubtreeHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passArray8ToWasm0(memberValidatorListHash, wasm.__wbindgen_export_1);\n            const len2 = WASM_VECTOR_LEN;\n            const ptr3 = passArray8ToWasm0(delegatedPuzzleValidatorListHash, wasm.__wbindgen_export_1);\n            const len3 = WASM_VECTOR_LEN;\n            wasm.restrictionmemo_force1Of2RestrictedVariable(retptr, ptr0, ptr1, len1, nonce, ptr2, len2, ptr3, len3);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RestrictionMemo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Clvm} clvm\n     * @param {WrapperMemo[]} wrapperMemos\n     * @returns {RestrictionMemo}\n     */\n    static enforceDelegatedPuzzleWrappers(clvm, wrapperMemos) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            const ptr1 = passArrayJsValueToWasm0(wrapperMemos, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.restrictionmemo_enforceDelegatedPuzzleWrappers(retptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RestrictionMemo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Clvm} clvm\n     * @param {bigint} seconds\n     * @param {boolean} reveal\n     * @returns {RestrictionMemo}\n     */\n    static timelock(clvm, seconds, reveal) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            wasm.restrictionmemo_timelock(retptr, ptr0, addHeapObject(seconds), reveal);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RestrictionMemo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} memberConditionValidator\n     * @param {Uint8Array} puzzleHash\n     * @param {Program} memo\n     */\n    constructor(memberConditionValidator, puzzleHash, memo) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(memo, Program);\n            var ptr1 = memo.__destroy_into_raw();\n            wasm.restrictionmemo_new(retptr, memberConditionValidator, ptr0, len0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            RestrictionMemoFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get memberConditionValidator() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.restrictionmemo_memberConditionValidator(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set memberConditionValidator(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.restrictionmemo_set_memberConditionValidator(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.restrictionmemo_puzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set puzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.restrictionmemo_set_puzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get memo() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.restrictionmemo_memo(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set memo(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.restrictionmemo_set_memo(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst RewardChainBlockFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rewardchainblock_free(ptr >>> 0, 1));\n\nclass RewardChainBlock {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RewardChainBlock.prototype);\n        obj.__wbg_ptr = ptr;\n        RewardChainBlockFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RewardChainBlockFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rewardchainblock_free(ptr, 0);\n    }\n    /**\n     * @returns {RewardChainBlock}\n     */\n    clone() {\n        const ret = wasm.rewardchainblock_clone(this.__wbg_ptr);\n        return RewardChainBlock.__wrap(ret);\n    }\n    /**\n     * @param {bigint} weight\n     * @param {number} height\n     * @param {bigint} totalIters\n     * @param {number} signagePointIndex\n     * @param {Uint8Array} posSsCcChallengeHash\n     * @param {ProofOfSpace} proofOfSpace\n     * @param {VDFInfo | null | undefined} challengeChainSpVdf\n     * @param {Signature} challengeChainSpSignature\n     * @param {VDFInfo} challengeChainIpVdf\n     * @param {VDFInfo | null | undefined} rewardChainSpVdf\n     * @param {Signature} rewardChainSpSignature\n     * @param {VDFInfo} rewardChainIpVdf\n     * @param {VDFInfo | null | undefined} infusedChallengeChainIpVdf\n     * @param {boolean} isTransactionBlock\n     */\n    constructor(weight, height, totalIters, signagePointIndex, posSsCcChallengeHash, proofOfSpace, challengeChainSpVdf, challengeChainSpSignature, challengeChainIpVdf, rewardChainSpVdf, rewardChainSpSignature, rewardChainIpVdf, infusedChallengeChainIpVdf, isTransactionBlock) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(posSsCcChallengeHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(proofOfSpace, ProofOfSpace);\n            var ptr1 = proofOfSpace.__destroy_into_raw();\n            let ptr2 = 0;\n            if (!isLikeNone(challengeChainSpVdf)) {\n                _assertClass(challengeChainSpVdf, VDFInfo);\n                ptr2 = challengeChainSpVdf.__destroy_into_raw();\n            }\n            _assertClass(challengeChainSpSignature, Signature);\n            var ptr3 = challengeChainSpSignature.__destroy_into_raw();\n            _assertClass(challengeChainIpVdf, VDFInfo);\n            var ptr4 = challengeChainIpVdf.__destroy_into_raw();\n            let ptr5 = 0;\n            if (!isLikeNone(rewardChainSpVdf)) {\n                _assertClass(rewardChainSpVdf, VDFInfo);\n                ptr5 = rewardChainSpVdf.__destroy_into_raw();\n            }\n            _assertClass(rewardChainSpSignature, Signature);\n            var ptr6 = rewardChainSpSignature.__destroy_into_raw();\n            _assertClass(rewardChainIpVdf, VDFInfo);\n            var ptr7 = rewardChainIpVdf.__destroy_into_raw();\n            let ptr8 = 0;\n            if (!isLikeNone(infusedChallengeChainIpVdf)) {\n                _assertClass(infusedChallengeChainIpVdf, VDFInfo);\n                ptr8 = infusedChallengeChainIpVdf.__destroy_into_raw();\n            }\n            wasm.rewardchainblock_new(retptr, addHeapObject(weight), height, addHeapObject(totalIters), signagePointIndex, ptr0, len0, ptr1, ptr2, ptr3, ptr4, ptr5, ptr6, ptr7, ptr8, isTransactionBlock);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            RewardChainBlockFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get weight() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_weight(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set weight(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_set_weight(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get height() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_height(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set height(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_set_height(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get totalIters() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_totalIters(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set totalIters(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_set_totalIters(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get signagePointIndex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_signagePointIndex(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set signagePointIndex(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_set_signagePointIndex(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get posSsCcChallengeHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_posSsCcChallengeHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set posSsCcChallengeHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.rewardchainblock_set_posSsCcChallengeHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ProofOfSpace}\n     */\n    get proofOfSpace() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_proofOfSpace(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProofOfSpace.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {ProofOfSpace} value\n     */\n    set proofOfSpace(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, ProofOfSpace);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.rewardchainblock_set_proofOfSpace(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VDFInfo | undefined}\n     */\n    get challengeChainSpVdf() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_challengeChainSpVdf(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : VDFInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {VDFInfo | null} [value]\n     */\n    set challengeChainSpVdf(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, VDFInfo);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.rewardchainblock_set_challengeChainSpVdf(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Signature}\n     */\n    get challengeChainSpSignature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_challengeChainSpSignature(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Signature.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Signature} value\n     */\n    set challengeChainSpSignature(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Signature);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.rewardchainblock_set_challengeChainSpSignature(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VDFInfo}\n     */\n    get challengeChainIpVdf() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_challengeChainIpVdf(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VDFInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {VDFInfo} value\n     */\n    set challengeChainIpVdf(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, VDFInfo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.rewardchainblock_set_challengeChainIpVdf(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VDFInfo | undefined}\n     */\n    get rewardChainSpVdf() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_rewardChainSpVdf(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : VDFInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {VDFInfo | null} [value]\n     */\n    set rewardChainSpVdf(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, VDFInfo);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.rewardchainblock_set_rewardChainSpVdf(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Signature}\n     */\n    get rewardChainSpSignature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_rewardChainSpSignature(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Signature.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Signature} value\n     */\n    set rewardChainSpSignature(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Signature);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.rewardchainblock_set_rewardChainSpSignature(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VDFInfo}\n     */\n    get rewardChainIpVdf() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_rewardChainIpVdf(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VDFInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {VDFInfo} value\n     */\n    set rewardChainIpVdf(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, VDFInfo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.rewardchainblock_set_rewardChainIpVdf(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VDFInfo | undefined}\n     */\n    get infusedChallengeChainIpVdf() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_infusedChallengeChainIpVdf(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : VDFInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {VDFInfo | null} [value]\n     */\n    set infusedChallengeChainIpVdf(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, VDFInfo);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.rewardchainblock_set_infusedChallengeChainIpVdf(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get isTransactionBlock() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_isTransactionBlock(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set isTransactionBlock(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainblock_set_isTransactionBlock(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst RewardChainSubSlotFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rewardchainsubslot_free(ptr >>> 0, 1));\n\nclass RewardChainSubSlot {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RewardChainSubSlot.prototype);\n        obj.__wbg_ptr = ptr;\n        RewardChainSubSlotFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RewardChainSubSlotFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rewardchainsubslot_free(ptr, 0);\n    }\n    /**\n     * @returns {RewardChainSubSlot}\n     */\n    clone() {\n        const ret = wasm.rewardchainsubslot_clone(this.__wbg_ptr);\n        return RewardChainSubSlot.__wrap(ret);\n    }\n    /**\n     * @param {VDFInfo} endOfSlotVdf\n     * @param {Uint8Array} challengeChainSubSlotHash\n     * @param {Uint8Array | null | undefined} infusedChallengeChainSubSlotHash\n     * @param {number} deficit\n     */\n    constructor(endOfSlotVdf, challengeChainSubSlotHash, infusedChallengeChainSubSlotHash, deficit) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(endOfSlotVdf, VDFInfo);\n            var ptr0 = endOfSlotVdf.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(challengeChainSubSlotHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            var ptr2 = isLikeNone(infusedChallengeChainSubSlotHash) ? 0 : passArray8ToWasm0(infusedChallengeChainSubSlotHash, wasm.__wbindgen_export_1);\n            var len2 = WASM_VECTOR_LEN;\n            wasm.rewardchainsubslot_new(retptr, ptr0, ptr1, len1, ptr2, len2, deficit);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            RewardChainSubSlotFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VDFInfo}\n     */\n    get endOfSlotVdf() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.challengechainsubslot_challengeChainEndOfSlotVdf(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VDFInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {VDFInfo} value\n     */\n    set endOfSlotVdf(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, VDFInfo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.rewardchainsubslot_set_endOfSlotVdf(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get challengeChainSubSlotHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainsubslot_challengeChainSubSlotHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set challengeChainSubSlotHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.rewardchainsubslot_set_challengeChainSubSlotHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get infusedChallengeChainSubSlotHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainsubslot_infusedChallengeChainSubSlotHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set infusedChallengeChainSubSlotHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.rewardchainsubslot_set_infusedChallengeChainSubSlotHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get deficit() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainsubslot_deficit(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set deficit(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainsubslot_set_deficit(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst RunCatTailFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_runcattail_free(ptr >>> 0, 1));\n\nclass RunCatTail {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RunCatTail.prototype);\n        obj.__wbg_ptr = ptr;\n        RunCatTailFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RunCatTailFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_runcattail_free(ptr, 0);\n    }\n    /**\n     * @returns {RunCatTail}\n     */\n    clone() {\n        const ret = wasm.pair_clone(this.__wbg_ptr);\n        return RunCatTail.__wrap(ret);\n    }\n    /**\n     * @param {Program} program\n     * @param {Program} solution\n     */\n    constructor(program, solution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(program, Program);\n            var ptr0 = program.__destroy_into_raw();\n            _assertClass(solution, Program);\n            var ptr1 = solution.__destroy_into_raw();\n            wasm.pair_new(retptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            RunCatTailFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get program() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pair_first(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set program(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.pair_set_first(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get solution() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pair_rest(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set solution(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.pair_set_rest(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst SecretKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_secretkey_free(ptr >>> 0, 1));\n\nclass SecretKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SecretKey.prototype);\n        obj.__wbg_ptr = ptr;\n        SecretKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof SecretKey)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SecretKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_secretkey_free(ptr, 0);\n    }\n    /**\n     * @returns {SecretKey}\n     */\n    clone() {\n        const ret = wasm.assertcoinannouncement_clone(this.__wbg_ptr);\n        return SecretKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} seed\n     * @returns {SecretKey}\n     */\n    static fromSeed(seed) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.secretkey_fromSeed(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SecretKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SecretKey}\n     */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.secretkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SecretKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.secretkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    publicKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.secretkey_publicKey(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} message\n     * @returns {Signature}\n     */\n    sign(message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.secretkey_sign(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Signature.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} index\n     * @returns {SecretKey}\n     */\n    deriveUnhardened(index) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.secretkey_deriveUnhardened(retptr, this.__wbg_ptr, index);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SecretKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} index\n     * @returns {SecretKey}\n     */\n    deriveHardened(index) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.secretkey_deriveHardened(retptr, this.__wbg_ptr, index);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SecretKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint32Array} path\n     * @returns {SecretKey}\n     */\n    deriveUnhardenedPath(path) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray32ToWasm0(path, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.secretkey_deriveUnhardenedPath(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SecretKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint32Array} path\n     * @returns {SecretKey}\n     */\n    deriveHardenedPath(path) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray32ToWasm0(path, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.secretkey_deriveHardenedPath(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SecretKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {SecretKey}\n     */\n    deriveSynthetic() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.secretkey_deriveSynthetic(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SecretKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} hiddenPuzzleHash\n     * @returns {SecretKey}\n     */\n    deriveSyntheticHidden(hiddenPuzzleHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(hiddenPuzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.secretkey_deriveSyntheticHidden(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SecretKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst SendMessageFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_sendmessage_free(ptr >>> 0, 1));\n\nclass SendMessage {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SendMessage.prototype);\n        obj.__wbg_ptr = ptr;\n        SendMessageFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SendMessageFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sendmessage_free(ptr, 0);\n    }\n    /**\n     * @returns {SendMessage}\n     */\n    clone() {\n        const ret = wasm.receivemessage_clone(this.__wbg_ptr);\n        return SendMessage.__wrap(ret);\n    }\n    /**\n     * @param {number} mode\n     * @param {Uint8Array} message\n     * @param {Program[]} data\n     */\n    constructor(mode, message, data) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArrayJsValueToWasm0(data, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.receivemessage_new(retptr, mode, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            SendMessageFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get mode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.receivemessage_mode(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set mode(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.receivemessage_set_mode(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get message() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.receivemessage_message(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set message(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.receivemessage_set_message(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program[]}\n     */\n    get data() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.receivemessage_data(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program[]} value\n     */\n    set data(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.receivemessage_set_data(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0, 1));\n\nclass Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof Signature)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr, 0);\n    }\n    /**\n     * @returns {Signature}\n     */\n    clone() {\n        const ret = wasm.signature_clone(this.__wbg_ptr);\n        return Signature.__wrap(ret);\n    }\n    /**\n     * @returns {Signature}\n     */\n    static infinity() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_infinity(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Signature.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Signature[]} signatures\n     * @returns {Signature}\n     */\n    static aggregate(signatures) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(signatures, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.signature_aggregate(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Signature.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Signature}\n     */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.signature_fromBytes(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Signature.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    isInfinity() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_isInfinity(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    isValid() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_isValid(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst SimulatorFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_simulator_free(ptr >>> 0, 1));\n\nclass Simulator {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Simulator.prototype);\n        obj.__wbg_ptr = ptr;\n        SimulatorFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SimulatorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_simulator_free(ptr, 0);\n    }\n    /**\n     * @returns {Simulator}\n     */\n    clone() {\n        const ret = wasm.simulator_clone(this.__wbg_ptr);\n        return Simulator.__wrap(ret);\n    }\n    constructor() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.simulator_new(retptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            SimulatorFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} puzzleHash\n     * @param {bigint} amount\n     * @returns {Coin}\n     */\n    newCoin(puzzleHash, amount) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.simulator_newCoin(retptr, this.__wbg_ptr, ptr0, len0, addHeapObject(amount));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Coin.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} amount\n     * @returns {BlsPairWithCoin}\n     */\n    bls(amount) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.simulator_bls(retptr, this.__wbg_ptr, addHeapObject(amount));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BlsPairWithCoin.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {CoinSpend[]} coinSpends\n     * @param {SecretKey[]} secretKeys\n     */\n    spendCoins(coinSpends, secretKeys) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(coinSpends, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArrayJsValueToWasm0(secretKeys, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.simulator_spendCoins(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} time\n     */\n    passTime(time) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.simulator_passTime(retptr, this.__wbg_ptr, addHeapObject(time));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst SoftforkFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_softfork_free(ptr >>> 0, 1));\n\nclass Softfork {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Softfork.prototype);\n        obj.__wbg_ptr = ptr;\n        SoftforkFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SoftforkFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_softfork_free(ptr, 0);\n    }\n    /**\n     * @returns {Softfork}\n     */\n    clone() {\n        const ret = wasm.softfork_clone(this.__wbg_ptr);\n        return Softfork.__wrap(ret);\n    }\n    /**\n     * @param {bigint} cost\n     * @param {Program} rest\n     */\n    constructor(cost, rest) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(rest, Program);\n            var ptr0 = rest.__destroy_into_raw();\n            wasm.softfork_new(retptr, addHeapObject(cost), ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            SoftforkFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get cost() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.output_cost(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set cost(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.output_set_cost(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get rest() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.output_value(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set rest(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.output_set_value(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst SpendFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_spend_free(ptr >>> 0, 1));\n\nclass Spend {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Spend.prototype);\n        obj.__wbg_ptr = ptr;\n        SpendFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SpendFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_spend_free(ptr, 0);\n    }\n    /**\n     * @returns {Spend}\n     */\n    clone() {\n        const ret = wasm.pair_clone(this.__wbg_ptr);\n        return Spend.__wrap(ret);\n    }\n    /**\n     * @param {Program} puzzle\n     * @param {Program} solution\n     */\n    constructor(puzzle, solution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(puzzle, Program);\n            var ptr0 = puzzle.__destroy_into_raw();\n            _assertClass(solution, Program);\n            var ptr1 = solution.__destroy_into_raw();\n            wasm.pair_new(retptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            SpendFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get puzzle() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pair_first(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set puzzle(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.pair_set_first(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get solution() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pair_rest(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set solution(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.pair_set_rest(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst SpendBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_spendbundle_free(ptr >>> 0, 1));\n\nclass SpendBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SpendBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        SpendBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SpendBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_spendbundle_free(ptr, 0);\n    }\n    /**\n     * @returns {SpendBundle}\n     */\n    clone() {\n        const ret = wasm.spendbundle_clone(this.__wbg_ptr);\n        return SpendBundle.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.spendbundle_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SpendBundle}\n     */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.spendbundle_fromBytes(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SpendBundle.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    hash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.spendbundle_hash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {CoinSpend[]} coinSpends\n     * @param {Signature} aggregatedSignature\n     */\n    constructor(coinSpends, aggregatedSignature) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(coinSpends, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(aggregatedSignature, Signature);\n            var ptr1 = aggregatedSignature.__destroy_into_raw();\n            wasm.spendbundle_new(retptr, ptr0, len0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            SpendBundleFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CoinSpend[]}\n     */\n    get coinSpends() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.spendbundle_coinSpends(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {CoinSpend[]} value\n     */\n    set coinSpends(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.spendbundle_set_coinSpends(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Signature}\n     */\n    get aggregatedSignature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.spendbundle_aggregatedSignature(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Signature.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Signature} value\n     */\n    set aggregatedSignature(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Signature);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.spendbundle_set_aggregatedSignature(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst StreamedCatFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_streamedcat_free(ptr >>> 0, 1));\n\nclass StreamedCat {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StreamedCat.prototype);\n        obj.__wbg_ptr = ptr;\n        StreamedCatFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StreamedCatFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_streamedcat_free(ptr, 0);\n    }\n    /**\n     * @returns {StreamedCat}\n     */\n    clone() {\n        const ret = wasm.streamedcat_clone(this.__wbg_ptr);\n        return StreamedCat.__wrap(ret);\n    }\n    /**\n     * @param {Coin} coin\n     * @param {Uint8Array} assetId\n     * @param {LineageProof} proof\n     * @param {StreamingPuzzleInfo} info\n     */\n    constructor(coin, assetId, proof, info) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(coin, Coin);\n            var ptr0 = coin.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(assetId, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            _assertClass(proof, LineageProof);\n            var ptr2 = proof.__destroy_into_raw();\n            _assertClass(info, StreamingPuzzleInfo);\n            var ptr3 = info.__destroy_into_raw();\n            wasm.streamedcat_new(retptr, ptr0, ptr1, len1, ptr2, ptr3);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            StreamedCatFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Coin}\n     */\n    get coin() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamedcat_coin(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Coin.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} value\n     */\n    set coin(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Coin);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.streamedcat_set_coin(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get assetId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamedcat_assetId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set assetId(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.streamedcat_set_assetId(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {LineageProof}\n     */\n    get proof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamedcat_proof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return LineageProof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {LineageProof} value\n     */\n    set proof(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, LineageProof);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.streamedcat_set_proof(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {StreamingPuzzleInfo}\n     */\n    get info() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamedcat_info(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StreamingPuzzleInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {StreamingPuzzleInfo} value\n     */\n    set info(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, StreamingPuzzleInfo);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.streamedcat_set_info(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst StreamedCatParsingResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_streamedcatparsingresult_free(ptr >>> 0, 1));\n\nclass StreamedCatParsingResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StreamedCatParsingResult.prototype);\n        obj.__wbg_ptr = ptr;\n        StreamedCatParsingResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StreamedCatParsingResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_streamedcatparsingresult_free(ptr, 0);\n    }\n    /**\n     * @returns {StreamedCatParsingResult}\n     */\n    clone() {\n        const ret = wasm.streamedcatparsingresult_clone(this.__wbg_ptr);\n        return StreamedCatParsingResult.__wrap(ret);\n    }\n    /**\n     * @param {StreamedCat | null | undefined} streamedCat\n     * @param {boolean} lastSpendWasClawback\n     * @param {bigint} lastPaymentAmountIfClawback\n     */\n    constructor(streamedCat, lastSpendWasClawback, lastPaymentAmountIfClawback) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(streamedCat)) {\n                _assertClass(streamedCat, StreamedCat);\n                ptr0 = streamedCat.__destroy_into_raw();\n            }\n            wasm.streamedcatparsingresult_new(retptr, ptr0, lastSpendWasClawback, addHeapObject(lastPaymentAmountIfClawback));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            StreamedCatParsingResultFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {StreamedCat | undefined}\n     */\n    get streamedCat() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamedcatparsingresult_streamedCat(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : StreamedCat.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {StreamedCat | null} [value]\n     */\n    set streamedCat(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, StreamedCat);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.streamedcatparsingresult_set_streamedCat(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get lastSpendWasClawback() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamedcatparsingresult_lastSpendWasClawback(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set lastSpendWasClawback(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamedcatparsingresult_set_lastSpendWasClawback(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get lastPaymentAmountIfClawback() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamedcatparsingresult_lastPaymentAmountIfClawback(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set lastPaymentAmountIfClawback(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamedcatparsingresult_set_lastPaymentAmountIfClawback(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst StreamingPuzzleInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_streamingpuzzleinfo_free(ptr >>> 0, 1));\n\nclass StreamingPuzzleInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StreamingPuzzleInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        StreamingPuzzleInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StreamingPuzzleInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_streamingpuzzleinfo_free(ptr, 0);\n    }\n    /**\n     * @returns {StreamingPuzzleInfo}\n     */\n    clone() {\n        const ret = wasm.clawbackv2_clone(this.__wbg_ptr);\n        return StreamingPuzzleInfo.__wrap(ret);\n    }\n    /**\n     * @param {bigint} myCoinAmount\n     * @param {bigint} paymentTime\n     * @returns {bigint}\n     */\n    amountToBePaid(myCoinAmount, paymentTime) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamingpuzzleinfo_amountToBePaid(retptr, this.__wbg_ptr, addHeapObject(myCoinAmount), addHeapObject(paymentTime));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} recipient\n     * @returns {Uint8Array}\n     */\n    static getHint(recipient) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(recipient, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.streamingpuzzleinfo_getHint(retptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v2 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Array<any>}\n     */\n    getLaunchHints() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamingpuzzleinfo_getLaunchHints(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    innerPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamingpuzzleinfo_innerPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Array<any>} memos\n     * @returns {StreamingPuzzleInfo | undefined}\n     */\n    static fromMemos(memos) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamingpuzzleinfo_fromMemos(retptr, addHeapObject(memos));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : StreamingPuzzleInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} recipient\n     * @param {Uint8Array | null | undefined} clawbackPh\n     * @param {bigint} endTime\n     * @param {bigint} lastPaymentTime\n     */\n    constructor(recipient, clawbackPh, endTime, lastPaymentTime) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(recipient, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(clawbackPh) ? 0 : passArray8ToWasm0(clawbackPh, wasm.__wbindgen_export_1);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.streamingpuzzleinfo_new(retptr, ptr0, len0, ptr1, len1, addHeapObject(endTime), addHeapObject(lastPaymentTime));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            StreamingPuzzleInfoFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get recipient() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.clawbackv2_senderPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set recipient(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.clawbackv2_set_senderPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get clawbackPh() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamingpuzzleinfo_clawbackPh(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set clawbackPh(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.streamingpuzzleinfo_set_clawbackPh(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get endTime() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamingpuzzleinfo_endTime(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set endTime(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamingpuzzleinfo_set_endTime(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get lastPaymentTime() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamingpuzzleinfo_lastPaymentTime(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set lastPaymentTime(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.streamingpuzzleinfo_set_lastPaymentTime(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst SubEpochSummaryFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_subepochsummary_free(ptr >>> 0, 1));\n\nclass SubEpochSummary {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SubEpochSummary.prototype);\n        obj.__wbg_ptr = ptr;\n        SubEpochSummaryFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SubEpochSummaryFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_subepochsummary_free(ptr, 0);\n    }\n    /**\n     * @returns {SubEpochSummary}\n     */\n    clone() {\n        const ret = wasm.subepochsummary_clone(this.__wbg_ptr);\n        return SubEpochSummary.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} prevSubepochSummaryHash\n     * @param {Uint8Array} rewardChainHash\n     * @param {number} numBlocksOverflow\n     * @param {bigint | null} [newDifficulty]\n     * @param {bigint | null} [newSubSlotIters]\n     */\n    constructor(prevSubepochSummaryHash, rewardChainHash, numBlocksOverflow, newDifficulty, newSubSlotIters) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(prevSubepochSummaryHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(rewardChainHash, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.subepochsummary_new(retptr, ptr0, len0, ptr1, len1, numBlocksOverflow, isLikeNone(newDifficulty) ? 0 : addHeapObject(newDifficulty), isLikeNone(newSubSlotIters) ? 0 : addHeapObject(newSubSlotIters));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            SubEpochSummaryFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get prevSubepochSummaryHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.subepochsummary_prevSubepochSummaryHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set prevSubepochSummaryHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.subepochsummary_set_prevSubepochSummaryHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get rewardChainHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.subepochsummary_rewardChainHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set rewardChainHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.subepochsummary_set_rewardChainHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get numBlocksOverflow() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.subepochsummary_numBlocksOverflow(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set numBlocksOverflow(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.subepochsummary_set_numBlocksOverflow(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint | undefined}\n     */\n    get newDifficulty() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.subepochsummary_newDifficulty(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint | null} [value]\n     */\n    set newDifficulty(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.subepochsummary_set_newDifficulty(retptr, this.__wbg_ptr, isLikeNone(value) ? 0 : addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint | undefined}\n     */\n    get newSubSlotIters() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.subepochsummary_newSubSlotIters(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint | null} [value]\n     */\n    set newSubSlotIters(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.subepochsummary_set_newSubSlotIters(retptr, this.__wbg_ptr, isLikeNone(value) ? 0 : addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst SubSlotProofsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_subslotproofs_free(ptr >>> 0, 1));\n\nclass SubSlotProofs {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SubSlotProofs.prototype);\n        obj.__wbg_ptr = ptr;\n        SubSlotProofsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SubSlotProofsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_subslotproofs_free(ptr, 0);\n    }\n    /**\n     * @returns {SubSlotProofs}\n     */\n    clone() {\n        const ret = wasm.subslotproofs_clone(this.__wbg_ptr);\n        return SubSlotProofs.__wrap(ret);\n    }\n    /**\n     * @param {VDFProof} challengeChainSlotProof\n     * @param {VDFProof | null | undefined} infusedChallengeChainSlotProof\n     * @param {VDFProof} rewardChainSlotProof\n     */\n    constructor(challengeChainSlotProof, infusedChallengeChainSlotProof, rewardChainSlotProof) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(challengeChainSlotProof, VDFProof);\n            var ptr0 = challengeChainSlotProof.__destroy_into_raw();\n            let ptr1 = 0;\n            if (!isLikeNone(infusedChallengeChainSlotProof)) {\n                _assertClass(infusedChallengeChainSlotProof, VDFProof);\n                ptr1 = infusedChallengeChainSlotProof.__destroy_into_raw();\n            }\n            _assertClass(rewardChainSlotProof, VDFProof);\n            var ptr2 = rewardChainSlotProof.__destroy_into_raw();\n            wasm.subslotproofs_new(retptr, ptr0, ptr1, ptr2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            SubSlotProofsFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VDFProof}\n     */\n    get challengeChainSlotProof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.subslotproofs_challengeChainSlotProof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VDFProof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {VDFProof} value\n     */\n    set challengeChainSlotProof(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, VDFProof);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.subslotproofs_set_challengeChainSlotProof(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VDFProof | undefined}\n     */\n    get infusedChallengeChainSlotProof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.subslotproofs_infusedChallengeChainSlotProof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : VDFProof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {VDFProof | null} [value]\n     */\n    set infusedChallengeChainSlotProof(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            let ptr0 = 0;\n            if (!isLikeNone(value)) {\n                _assertClass(value, VDFProof);\n                ptr0 = value.__destroy_into_raw();\n            }\n            wasm.subslotproofs_set_infusedChallengeChainSlotProof(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VDFProof}\n     */\n    get rewardChainSlotProof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.subslotproofs_rewardChainSlotProof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VDFProof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {VDFProof} value\n     */\n    set rewardChainSlotProof(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, VDFProof);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.subslotproofs_set_rewardChainSlotProof(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst SyncStateFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_syncstate_free(ptr >>> 0, 1));\n\nclass SyncState {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SyncState.prototype);\n        obj.__wbg_ptr = ptr;\n        SyncStateFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SyncStateFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_syncstate_free(ptr, 0);\n    }\n    /**\n     * @returns {SyncState}\n     */\n    clone() {\n        const ret = wasm.syncstate_clone(this.__wbg_ptr);\n        return SyncState.__wrap(ret);\n    }\n    /**\n     * @param {boolean} syncMode\n     * @param {number} syncProgressHeight\n     * @param {number} syncTipHeight\n     * @param {boolean} synced\n     */\n    constructor(syncMode, syncProgressHeight, syncTipHeight, synced) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.syncstate_new(retptr, syncMode, syncProgressHeight, syncTipHeight, synced);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            SyncStateFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get syncMode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.syncstate_syncMode(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set syncMode(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.syncstate_set_syncMode(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get syncProgressHeight() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforeheightabsolute_height(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set syncProgressHeight(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assertbeforeheightabsolute_set_height(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get syncTipHeight() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.syncstate_syncTipHeight(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set syncTipHeight(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.syncstate_set_syncTipHeight(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get synced() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.syncstate_synced(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set synced(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.syncstate_set_synced(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst TradePriceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_tradeprice_free(ptr >>> 0, 1));\n\nclass TradePrice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(TradePrice.prototype);\n        obj.__wbg_ptr = ptr;\n        TradePriceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof TradePrice)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TradePriceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_tradeprice_free(ptr, 0);\n    }\n    /**\n     * @returns {TradePrice}\n     */\n    clone() {\n        const ret = wasm.tradeprice_clone(this.__wbg_ptr);\n        return TradePrice.__wrap(ret);\n    }\n    /**\n     * @param {bigint} amount\n     * @param {Uint8Array} puzzleHash\n     */\n    constructor(amount, puzzleHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.tradeprice_new(retptr, addHeapObject(amount), ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            TradePriceFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get amount() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.tradeprice_amount(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set amount(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.tradeprice_set_amount(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.tradeprice_puzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set puzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.tradeprice_set_puzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst TransactionsInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_transactionsinfo_free(ptr >>> 0, 1));\n\nclass TransactionsInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(TransactionsInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        TransactionsInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TransactionsInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionsinfo_free(ptr, 0);\n    }\n    /**\n     * @returns {TransactionsInfo}\n     */\n    clone() {\n        const ret = wasm.transactionsinfo_clone(this.__wbg_ptr);\n        return TransactionsInfo.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} generatorRoot\n     * @param {Uint8Array} generatorRefsRoot\n     * @param {Signature} aggregatedSignature\n     * @param {bigint} fees\n     * @param {bigint} cost\n     * @param {Coin[]} rewardClaimsIncorporated\n     */\n    constructor(generatorRoot, generatorRefsRoot, aggregatedSignature, fees, cost, rewardClaimsIncorporated) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(generatorRoot, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(generatorRefsRoot, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            _assertClass(aggregatedSignature, Signature);\n            var ptr2 = aggregatedSignature.__destroy_into_raw();\n            const ptr3 = passArrayJsValueToWasm0(rewardClaimsIncorporated, wasm.__wbindgen_export_1);\n            const len3 = WASM_VECTOR_LEN;\n            wasm.transactionsinfo_new(retptr, ptr0, len0, ptr1, len1, ptr2, addHeapObject(fees), addHeapObject(cost), ptr3, len3);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            TransactionsInfoFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get generatorRoot() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionsinfo_generatorRoot(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set generatorRoot(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionsinfo_set_generatorRoot(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get generatorRefsRoot() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionsinfo_generatorRefsRoot(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set generatorRefsRoot(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionsinfo_set_generatorRefsRoot(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Signature}\n     */\n    get aggregatedSignature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionsinfo_aggregatedSignature(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Signature.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Signature} value\n     */\n    set aggregatedSignature(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Signature);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.transactionsinfo_set_aggregatedSignature(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get fees() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionsinfo_fees(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set fees(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionsinfo_set_fees(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get cost() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionsinfo_cost(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set cost(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionsinfo_set_cost(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Coin[]}\n     */\n    get rewardClaimsIncorporated() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionsinfo_rewardClaimsIncorporated(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin[]} value\n     */\n    set rewardClaimsIncorporated(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionsinfo_set_rewardClaimsIncorporated(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst TransferNftFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_transfernft_free(ptr >>> 0, 1));\n\nclass TransferNft {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(TransferNft.prototype);\n        obj.__wbg_ptr = ptr;\n        TransferNftFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TransferNftFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transfernft_free(ptr, 0);\n    }\n    /**\n     * @returns {TransferNft}\n     */\n    clone() {\n        const ret = wasm.transfernft_clone(this.__wbg_ptr);\n        return TransferNft.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array | null | undefined} launcherId\n     * @param {TradePrice[]} tradePrices\n     * @param {Uint8Array | null} [singletonInnerPuzzleHash]\n     */\n    constructor(launcherId, tradePrices, singletonInnerPuzzleHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(launcherId) ? 0 : passArray8ToWasm0(launcherId, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArrayJsValueToWasm0(tradePrices, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            var ptr2 = isLikeNone(singletonInnerPuzzleHash) ? 0 : passArray8ToWasm0(singletonInnerPuzzleHash, wasm.__wbindgen_export_1);\n            var len2 = WASM_VECTOR_LEN;\n            wasm.transfernft_new(retptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            TransferNftFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get launcherId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transfernft_launcherId(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set launcherId(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.transfernft_set_launcherId(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TradePrice[]}\n     */\n    get tradePrices() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transfernft_tradePrices(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {TradePrice[]} value\n     */\n    set tradePrices(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transfernft_set_tradePrices(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get singletonInnerPuzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transfernft_singletonInnerPuzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array | null} [value]\n     */\n    set singletonInnerPuzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.transfernft_set_singletonInnerPuzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst UpdateDataStoreMerkleRootFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_updatedatastoremerkleroot_free(ptr >>> 0, 1));\n\nclass UpdateDataStoreMerkleRoot {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UpdateDataStoreMerkleRoot.prototype);\n        obj.__wbg_ptr = ptr;\n        UpdateDataStoreMerkleRootFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UpdateDataStoreMerkleRootFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_updatedatastoremerkleroot_free(ptr, 0);\n    }\n    /**\n     * @returns {UpdateDataStoreMerkleRoot}\n     */\n    clone() {\n        const ret = wasm.updatedatastoremerkleroot_clone(this.__wbg_ptr);\n        return UpdateDataStoreMerkleRoot.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} newMerkleRoot\n     * @param {Array<any>} memos\n     */\n    constructor(newMerkleRoot, memos) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(newMerkleRoot, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.updatedatastoremerkleroot_new(retptr, ptr0, len0, addHeapObject(memos));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            UpdateDataStoreMerkleRootFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get newMerkleRoot() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.updatedatastoremerkleroot_newMerkleRoot(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set newMerkleRoot(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.updatedatastoremerkleroot_set_newMerkleRoot(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Array<any>}\n     */\n    get memos() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.updatedatastoremerkleroot_memos(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Array<any>} value\n     */\n    set memos(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.updatedatastoremerkleroot_set_memos(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst UpdateNftMetadataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_updatenftmetadata_free(ptr >>> 0, 1));\n\nclass UpdateNftMetadata {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UpdateNftMetadata.prototype);\n        obj.__wbg_ptr = ptr;\n        UpdateNftMetadataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UpdateNftMetadataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_updatenftmetadata_free(ptr, 0);\n    }\n    /**\n     * @returns {UpdateNftMetadata}\n     */\n    clone() {\n        const ret = wasm.pair_clone(this.__wbg_ptr);\n        return UpdateNftMetadata.__wrap(ret);\n    }\n    /**\n     * @param {Program} updaterPuzzleReveal\n     * @param {Program} updaterSolution\n     */\n    constructor(updaterPuzzleReveal, updaterSolution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(updaterPuzzleReveal, Program);\n            var ptr0 = updaterPuzzleReveal.__destroy_into_raw();\n            _assertClass(updaterSolution, Program);\n            var ptr1 = updaterSolution.__destroy_into_raw();\n            wasm.pair_new(retptr, ptr0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            UpdateNftMetadataFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get updaterPuzzleReveal() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pair_first(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set updaterPuzzleReveal(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.pair_set_first(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get updaterSolution() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pair_rest(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set updaterSolution(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.pair_set_rest(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst VDFInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_vdfinfo_free(ptr >>> 0, 1));\n\nclass VDFInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VDFInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        VDFInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VDFInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vdfinfo_free(ptr, 0);\n    }\n    /**\n     * @returns {VDFInfo}\n     */\n    clone() {\n        const ret = wasm.infusedchallengechainsubslot_clone(this.__wbg_ptr);\n        return VDFInfo.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} challenge\n     * @param {bigint} numberOfIterations\n     * @param {Uint8Array} output\n     */\n    constructor(challenge, numberOfIterations, output) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(challenge, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(output, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.vdfinfo_new(retptr, ptr0, len0, addHeapObject(numberOfIterations), ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            VDFInfoFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get challenge() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vdfinfo_challenge(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set challenge(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vdfinfo_set_challenge(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {bigint}\n     */\n    get numberOfIterations() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vdfinfo_numberOfIterations(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {bigint} value\n     */\n    set numberOfIterations(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vdfinfo_set_numberOfIterations(retptr, this.__wbg_ptr, addHeapObject(value));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get output() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vdfinfo_output(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set output(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vdfinfo_set_output(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst VDFProofFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_vdfproof_free(ptr >>> 0, 1));\n\nclass VDFProof {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VDFProof.prototype);\n        obj.__wbg_ptr = ptr;\n        VDFProofFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VDFProofFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vdfproof_free(ptr, 0);\n    }\n    /**\n     * @returns {VDFProof}\n     */\n    clone() {\n        const ret = wasm.vdfproof_clone(this.__wbg_ptr);\n        return VDFProof.__wrap(ret);\n    }\n    /**\n     * @param {number} witnessType\n     * @param {Uint8Array} witness\n     * @param {boolean} normalizedToIdentity\n     */\n    constructor(witnessType, witness, normalizedToIdentity) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(witness, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vdfproof_new(retptr, witnessType, ptr0, len0, normalizedToIdentity);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            VDFProofFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    get witnessType() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vdfproof_witnessType(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} value\n     */\n    set witnessType(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vdfproof_set_witnessType(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get witness() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vdfproof_witness(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set witness(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vdfproof_set_witness(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {boolean}\n     */\n    get normalizedToIdentity() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vdfproof_normalizedToIdentity(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {boolean} value\n     */\n    set normalizedToIdentity(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vdfproof_set_normalizedToIdentity(retptr, this.__wbg_ptr, value);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst VaultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_vault_free(ptr >>> 0, 1));\n\nclass Vault {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Vault.prototype);\n        obj.__wbg_ptr = ptr;\n        VaultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VaultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vault_free(ptr, 0);\n    }\n    /**\n     * @returns {Vault}\n     */\n    clone() {\n        const ret = wasm.vault_clone(this.__wbg_ptr);\n        return Vault.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} custodyHash\n     * @returns {Vault}\n     */\n    child(custodyHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(custodyHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vault_child(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Vault.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} coin\n     * @param {Uint8Array} launcherId\n     * @param {Proof} proof\n     * @param {Uint8Array} custodyHash\n     */\n    constructor(coin, launcherId, proof, custodyHash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(coin, Coin);\n            var ptr0 = coin.__destroy_into_raw();\n            const ptr1 = passArray8ToWasm0(launcherId, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            _assertClass(proof, Proof);\n            var ptr2 = proof.__destroy_into_raw();\n            const ptr3 = passArray8ToWasm0(custodyHash, wasm.__wbindgen_export_1);\n            const len3 = WASM_VECTOR_LEN;\n            wasm.vault_new(retptr, ptr0, ptr1, len1, ptr2, ptr3, len3);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            VaultFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Coin}\n     */\n    get coin() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vault_coin(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Coin.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Coin} value\n     */\n    set coin(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Coin);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.vault_set_coin(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get launcherId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardchainsubslot_challengeChainSubSlotHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set launcherId(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.rewardchainsubslot_set_challengeChainSubSlotHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Proof}\n     */\n    get proof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vault_proof(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Proof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Proof} value\n     */\n    set proof(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Proof);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.vault_set_proof(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get custodyHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vault_custodyHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set custodyHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vault_set_custodyHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst VaultMintFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_vaultmint_free(ptr >>> 0, 1));\n\nclass VaultMint {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VaultMint.prototype);\n        obj.__wbg_ptr = ptr;\n        VaultMintFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VaultMintFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vaultmint_free(ptr, 0);\n    }\n    /**\n     * @returns {VaultMint}\n     */\n    clone() {\n        const ret = wasm.vaultmint_clone(this.__wbg_ptr);\n        return VaultMint.__wrap(ret);\n    }\n    /**\n     * @param {Vault} vault\n     * @param {Program[]} parentConditions\n     */\n    constructor(vault, parentConditions) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(vault, Vault);\n            var ptr0 = vault.__destroy_into_raw();\n            const ptr1 = passArrayJsValueToWasm0(parentConditions, wasm.__wbindgen_export_1);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.vaultmint_new(retptr, ptr0, ptr1, len1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            VaultMintFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Vault}\n     */\n    get vault() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vaultmint_vault(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Vault.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Vault} value\n     */\n    set vault(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Vault);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.vaultmint_set_vault(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program[]}\n     */\n    get parentConditions() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vaultmint_parentConditions(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program[]} value\n     */\n    set parentConditions(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vaultmint_set_parentConditions(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst WrapperMemoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_wrappermemo_free(ptr >>> 0, 1));\n\nclass WrapperMemo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WrapperMemo.prototype);\n        obj.__wbg_ptr = ptr;\n        WrapperMemoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof WrapperMemo)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WrapperMemoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wrappermemo_free(ptr, 0);\n    }\n    /**\n     * @returns {WrapperMemo}\n     */\n    clone() {\n        const ret = wasm.membermemo_clone(this.__wbg_ptr);\n        return WrapperMemo.__wrap(ret);\n    }\n    /**\n     * @param {Clvm} clvm\n     * @param {boolean} reveal\n     * @returns {WrapperMemo[]}\n     */\n    static preventVaultSideEffects(clvm, reveal) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            wasm.wrappermemo_preventVaultSideEffects(retptr, ptr0, reveal);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v2 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 4, 4);\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Clvm} clvm\n     * @returns {WrapperMemo}\n     */\n    static forceCoinAnnouncement(clvm) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            wasm.wrappermemo_forceCoinAnnouncement(retptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return WrapperMemo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Clvm} clvm\n     * @returns {WrapperMemo}\n     */\n    static forceCoinMessage(clvm) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            wasm.wrappermemo_forceCoinAnnouncement(retptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return WrapperMemo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Clvm} clvm\n     * @returns {WrapperMemo}\n     */\n    static preventMultipleCreateCoins(clvm) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            wasm.wrappermemo_preventMultipleCreateCoins(retptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return WrapperMemo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Clvm} clvm\n     * @param {bigint} seconds\n     * @param {boolean} reveal\n     * @returns {WrapperMemo}\n     */\n    static timelock(clvm, seconds, reveal) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            wasm.wrappermemo_timelock(retptr, ptr0, addHeapObject(seconds), reveal);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return WrapperMemo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Clvm} clvm\n     * @param {number} opcode\n     * @param {boolean} reveal\n     * @returns {WrapperMemo}\n     */\n    static preventConditionOpcode(clvm, opcode, reveal) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(clvm, Clvm);\n            var ptr0 = clvm.__destroy_into_raw();\n            wasm.wrappermemo_preventConditionOpcode(retptr, ptr0, opcode, reveal);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return WrapperMemo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} puzzleHash\n     * @param {Program} memo\n     */\n    constructor(puzzleHash, memo) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(puzzleHash, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(memo, Program);\n            var ptr1 = memo.__destroy_into_raw();\n            wasm.membermemo_new(retptr, ptr0, len0, ptr1);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            WrapperMemoFinalization.register(this, this.__wbg_ptr, this);\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    get puzzleHash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.membermemo_puzzleHash(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_4(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} value\n     */\n    set puzzleHash(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(value, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.membermemo_set_puzzleHash(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Program}\n     */\n    get memo() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.membermemo_memo(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Program} value\n     */\n    set memo(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(value, Program);\n            var ptr0 = value.__destroy_into_raw();\n            wasm.membermemo_set_memo(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nfunction __wbg_BigInt_ddea6d2f55558acb() { return handleError(function (arg0) {\n    const ret = BigInt(getObject(arg0));\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_abort_410ec47a64ac6117(arg0, arg1) {\n    getObject(arg0).abort(getObject(arg1));\n};\n\nfunction __wbg_abort_775ef1d17fc65868(arg0) {\n    getObject(arg0).abort();\n};\n\nfunction __wbg_additionsandremovalsresponse_new(arg0) {\n    const ret = AdditionsAndRemovalsResponse.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_append_8c7dd8d641a5f01b() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n}, arguments) };\n\nfunction __wbg_arrayBuffer_d1b44c4390db422f() { return handleError(function (arg0) {\n    const ret = getObject(arg0).arrayBuffer();\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_blockchainstateresponse_new(arg0) {\n    const ret = BlockchainStateResponse.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_blockrecord_new(arg0) {\n    const ret = BlockRecord.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_blockrecord_unwrap(arg0) {\n    const ret = BlockRecord.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_blspair_new(arg0) {\n    const ret = BlsPair.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_buffer_609cc3eee51ed158(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_call_672a4d21634d4a24() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_call_7cccdd69e0791ae2() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_cat_new(arg0) {\n    const ret = Cat.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_catspend_unwrap(arg0) {\n    const ret = CatSpend.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_clawback_new(arg0) {\n    const ret = Clawback.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_clearTimeout_b1115618e821c3b2(arg0) {\n    const ret = clearTimeout(takeObject(arg0));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_coin_new(arg0) {\n    const ret = Coin.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_coin_unwrap(arg0) {\n    const ret = Coin.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_coinrecord_new(arg0) {\n    const ret = CoinRecord.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_coinrecord_unwrap(arg0) {\n    const ret = CoinRecord.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_coinspend_new(arg0) {\n    const ret = CoinSpend.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_coinspend_unwrap(arg0) {\n    const ret = CoinSpend.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_crypto_ed58b8e10a292839(arg0) {\n    const ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_done_769e5ede4b31c67b(arg0) {\n    const ret = getObject(arg0).done;\n    return ret;\n};\n\nfunction __wbg_endofsubslotbundle_new(arg0) {\n    const ret = EndOfSubSlotBundle.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_endofsubslotbundle_unwrap(arg0) {\n    const ret = EndOfSubSlotBundle.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_fetch_3afbdcc7ddbf16fe(arg0) {\n    const ret = fetch(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_fetch_509096533071c657(arg0, arg1) {\n    const ret = getObject(arg0).fetch(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_fullblock_new(arg0) {\n    const ret = FullBlock.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_fullblock_unwrap(arg0) {\n    const ret = FullBlock.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_getRandomValues_bcb4912f16000dc4() { return handleError(function (arg0, arg1) {\n    getObject(arg0).getRandomValues(getObject(arg1));\n}, arguments) };\n\nfunction __wbg_get_67b2ba62fc30de12() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(getObject(arg0), getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_getblockrecordresponse_new(arg0) {\n    const ret = GetBlockRecordResponse.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_getblockrecordsresponse_new(arg0) {\n    const ret = GetBlockRecordsResponse.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_getblockresponse_new(arg0) {\n    const ret = GetBlockResponse.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_getblockspendsresponse_new(arg0) {\n    const ret = GetBlockSpendsResponse.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_getblocksresponse_new(arg0) {\n    const ret = GetBlocksResponse.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_getcoinrecordresponse_new(arg0) {\n    const ret = GetCoinRecordResponse.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_getcoinrecordsresponse_new(arg0) {\n    const ret = GetCoinRecordsResponse.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_getmempoolitemresponse_new(arg0) {\n    const ret = GetMempoolItemResponse.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_getmempoolitemsresponse_new(arg0) {\n    const ret = GetMempoolItemsResponse.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_getnetworkinforesponse_new(arg0) {\n    const ret = GetNetworkInfoResponse.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_getpuzzleandsolutionresponse_new(arg0) {\n    const ret = GetPuzzleAndSolutionResponse.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_has_a5ea9117f258a0ec() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.has(getObject(arg0), getObject(arg1));\n    return ret;\n}, arguments) };\n\nfunction __wbg_headers_9cb51cfd2ac780a4(arg0) {\n    const ret = getObject(arg0).headers;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_innerpuzzlememo_new(arg0) {\n    const ret = InnerPuzzleMemo.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_innerpuzzlememo_unwrap(arg0) {\n    const ret = InnerPuzzleMemo.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_instanceof_Response_f2cc20d9f7dfd644(arg0) {\n    let result;\n    try {\n        result = getObject(arg0) instanceof Response;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nfunction __wbg_iterator_9a24c88df860dc65() {\n    const ret = Symbol.iterator;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_k1pair_new(arg0) {\n    const ret = K1Pair.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_length_a446193dc22c12f8(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nfunction __wbg_mempoolitem_new(arg0) {\n    const ret = MempoolItem.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_mempoolitem_unwrap(arg0) {\n    const ret = MempoolItem.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_msCrypto_0a36e2ec3a343d26(arg0) {\n    const ret = getObject(arg0).msCrypto;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_new_018dcc2d6c8c2f6a() { return handleError(function () {\n    const ret = new Headers();\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_new_23a2665fac83c611(arg0, arg1) {\n    try {\n        var state0 = {a: arg0, b: arg1};\n        var cb0 = (arg0, arg1) => {\n            const a = state0.a;\n            state0.a = 0;\n            try {\n                return __wbg_adapter_1673(a, state0.b, arg0, arg1);\n            } finally {\n                state0.a = a;\n            }\n        };\n        const ret = new Promise(cb0);\n        return addHeapObject(ret);\n    } finally {\n        state0.a = state0.b = 0;\n    }\n};\n\nfunction __wbg_new_405e22f390576ce2() {\n    const ret = new Object();\n    return addHeapObject(ret);\n};\n\nfunction __wbg_new_78feb108b6472713() {\n    const ret = new Array();\n    return addHeapObject(ret);\n};\n\nfunction __wbg_new_a12002a7f91c75be(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_new_e25e5aab09ff45db() { return handleError(function () {\n    const ret = new AbortController();\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_newnoargs_105ed471475aaf50(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_newwithbyteoffsetandlength_d97e637ebe145a9a(arg0, arg1, arg2) {\n    const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_newwithlength_a381634e90c276d4(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_newwithstrandinit_06c535e0a867c635() { return handleError(function (arg0, arg1, arg2) {\n    const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_next_25feadfc0913fea9(arg0) {\n    const ret = getObject(arg0).next;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_next_6574e1a8a62d1055() { return handleError(function (arg0) {\n    const ret = getObject(arg0).next();\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_nft_new(arg0) {\n    const ret = Nft.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_nft_unwrap(arg0) {\n    const ret = Nft.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_nftmint_unwrap(arg0) {\n    const ret = NftMint.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_node_02999533c4ea02e3(arg0) {\n    const ret = getObject(arg0).node;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_process_5c1d670bc53614b8(arg0) {\n    const ret = getObject(arg0).process;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_program_new(arg0) {\n    const ret = Program.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_program_unwrap(arg0) {\n    const ret = Program.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_publickey_unwrap(arg0) {\n    const ret = PublicKey.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_push_737cfc8c1432c2c6(arg0, arg1) {\n    const ret = getObject(arg0).push(getObject(arg1));\n    return ret;\n};\n\nfunction __wbg_pushtxresponse_new(arg0) {\n    const ret = PushTxResponse.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_queueMicrotask_97d92b4fcc8a61c5(arg0) {\n    queueMicrotask(getObject(arg0));\n};\n\nfunction __wbg_queueMicrotask_d3219def82552485(arg0) {\n    const ret = getObject(arg0).queueMicrotask;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_r1pair_new(arg0) {\n    const ret = R1Pair.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_randomFillSync_ab2cfe79ebbf2740() { return handleError(function (arg0, arg1) {\n    getObject(arg0).randomFillSync(takeObject(arg1));\n}, arguments) };\n\nfunction __wbg_require_79b1e9274cde3c87() { return handleError(function () {\n    const ret = module.require;\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_resolve_4851785c9c5f573d(arg0) {\n    const ret = Promise.resolve(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_restriction_new(arg0) {\n    const ret = Restriction.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_restriction_unwrap(arg0) {\n    const ret = Restriction.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_restrictionmemo_new(arg0) {\n    const ret = RestrictionMemo.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_restrictionmemo_unwrap(arg0) {\n    const ret = RestrictionMemo.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_secretkey_unwrap(arg0) {\n    const ret = SecretKey.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_setTimeout_ca12ead8b48245e2(arg0, arg1) {\n    const ret = setTimeout(getObject(arg0), arg1);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_set_65595bdd868b3009(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nfunction __wbg_setbody_5923b78a95eedf29(arg0, arg1) {\n    getObject(arg0).body = getObject(arg1);\n};\n\nfunction __wbg_setcredentials_c3a22f1cd105a2c6(arg0, arg1) {\n    getObject(arg0).credentials = __wbindgen_enum_RequestCredentials[arg1];\n};\n\nfunction __wbg_setheaders_834c0bdb6a8949ad(arg0, arg1) {\n    getObject(arg0).headers = getObject(arg1);\n};\n\nfunction __wbg_setmethod_3c5280fe5d890842(arg0, arg1, arg2) {\n    getObject(arg0).method = getStringFromWasm0(arg1, arg2);\n};\n\nfunction __wbg_setmode_5dc300b865044b65(arg0, arg1) {\n    getObject(arg0).mode = __wbindgen_enum_RequestMode[arg1];\n};\n\nfunction __wbg_setsignal_75b21ef3a81de905(arg0, arg1) {\n    getObject(arg0).signal = getObject(arg1);\n};\n\nfunction __wbg_signal_aaf9ad74119f20a4(arg0) {\n    const ret = getObject(arg0).signal;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_signature_unwrap(arg0) {\n    const ret = Signature.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_static_accessor_GLOBAL_88a902d13a557d07() {\n    const ret = typeof global === 'undefined' ? null : global;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n};\n\nfunction __wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0() {\n    const ret = typeof globalThis === 'undefined' ? null : globalThis;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n};\n\nfunction __wbg_static_accessor_SELF_37c5d418e4bf5819() {\n    const ret = typeof self === 'undefined' ? null : self;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n};\n\nfunction __wbg_static_accessor_WINDOW_5de37043a91a9c40() {\n    const ret = typeof window === 'undefined' ? null : window;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n};\n\nfunction __wbg_status_f6360336ca686bf0(arg0) {\n    const ret = getObject(arg0).status;\n    return ret;\n};\n\nfunction __wbg_stringify_f7ed6987935b4a24() { return handleError(function (arg0) {\n    const ret = JSON.stringify(getObject(arg0));\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_subarray_aa9065fa9dc5df96(arg0, arg1, arg2) {\n    const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_then_44b73946d2fb3e7d(arg0, arg1) {\n    const ret = getObject(arg0).then(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_then_48b406749878a531(arg0, arg1, arg2) {\n    const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_toString_b5d4438bc26b267c() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).toString(arg1);\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_tradeprice_new(arg0) {\n    const ret = TradePrice.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_tradeprice_unwrap(arg0) {\n    const ret = TradePrice.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbg_url_ae10c34ca209681d(arg0, arg1) {\n    const ret = getObject(arg1).url;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nfunction __wbg_value_cd1ffa7b1ab794f1(arg0) {\n    const ret = getObject(arg0).value;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_values_99f7a68c7f313d66(arg0) {\n    const ret = getObject(arg0).values();\n    return addHeapObject(ret);\n};\n\nfunction __wbg_versions_c71aa1626a93e0a1(arg0) {\n    const ret = getObject(arg0).versions;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_wrappermemo_new(arg0) {\n    const ret = WrapperMemo.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_wrappermemo_unwrap(arg0) {\n    const ret = WrapperMemo.__unwrap(takeObject(arg0));\n    return ret;\n};\n\nfunction __wbindgen_bigint_from_u128(arg0, arg1) {\n    const ret = BigInt.asUintN(64, arg0) << BigInt(64) | BigInt.asUintN(64, arg1);\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_bigint_from_u64(arg0) {\n    const ret = BigInt.asUintN(64, arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_cb_drop(arg0) {\n    const obj = takeObject(arg0).original;\n    if (obj.cnt-- == 1) {\n        obj.a = 0;\n        return true;\n    }\n    const ret = false;\n    return ret;\n};\n\nfunction __wbindgen_closure_wrapper4648(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 161, __wbg_adapter_34);\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_closure_wrapper4750(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 161, __wbg_adapter_37);\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(getObject(arg1));\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nfunction __wbindgen_error_new(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_is_function(arg0) {\n    const ret = typeof(getObject(arg0)) === 'function';\n    return ret;\n};\n\nfunction __wbindgen_is_object(arg0) {\n    const val = getObject(arg0);\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nfunction __wbindgen_is_string(arg0) {\n    const ret = typeof(getObject(arg0)) === 'string';\n    return ret;\n};\n\nfunction __wbindgen_is_undefined(arg0) {\n    const ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nfunction __wbindgen_memory() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_object_clone_ref(arg0) {\n    const ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nfunction __wbindgen_string_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nfunction __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nfunction __wbindgen_uint8_array_new(arg0, arg1) {\n    var v0 = getArrayU8FromWasm0(arg0, arg1).slice();\n    wasm.__wbindgen_export_4(arg0, arg1 * 1, 1);\n    const ret = v0;\n    return addHeapObject(ret);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/chia-wallet-sdk-wasm/chia_wallet_sdk_wasm_bg.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/chia-wallet-sdk-wasm/chia_wallet_sdk_wasm_bg.wasm":
/*!************************************************************************!*\
  !*** ./node_modules/chia-wallet-sdk-wasm/chia_wallet_sdk_wasm_bg.wasm ***!
  \************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
/* harmony import */ var WEBPACK_IMPORTED_MODULE_0 = __webpack_require__(/*! ./chia_wallet_sdk_wasm_bg.js */ "(app-pages-browser)/./node_modules/chia-wallet-sdk-wasm/chia_wallet_sdk_wasm_bg.js");
module.exports = __webpack_require__.v(exports, module.id, "71513b8241397311", {
	"./chia_wallet_sdk_wasm_bg.js": {
		"__wbindgen_object_drop_ref": WEBPACK_IMPORTED_MODULE_0.__wbindgen_object_drop_ref,
		"__wbg_signature_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_signature_unwrap,
		"__wbg_catspend_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_catspend_unwrap,
		"__wbg_nftmint_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_nftmint_unwrap,
		"__wbindgen_bigint_from_u64": WEBPACK_IMPORTED_MODULE_0.__wbindgen_bigint_from_u64,
		"__wbg_new_23a2665fac83c611": WEBPACK_IMPORTED_MODULE_0.__wbg_new_23a2665fac83c611,
		"__wbindgen_bigint_from_u128": WEBPACK_IMPORTED_MODULE_0.__wbindgen_bigint_from_u128,
		"__wbg_blockrecord_new": WEBPACK_IMPORTED_MODULE_0.__wbg_blockrecord_new,
		"__wbg_fullblock_new": WEBPACK_IMPORTED_MODULE_0.__wbg_fullblock_new,
		"__wbg_mempoolitem_new": WEBPACK_IMPORTED_MODULE_0.__wbg_mempoolitem_new,
		"__wbg_endofsubslotbundle_new": WEBPACK_IMPORTED_MODULE_0.__wbg_endofsubslotbundle_new,
		"__wbg_tradeprice_new": WEBPACK_IMPORTED_MODULE_0.__wbg_tradeprice_new,
		"__wbg_restrictionmemo_new": WEBPACK_IMPORTED_MODULE_0.__wbg_restrictionmemo_new,
		"__wbg_wrappermemo_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_wrappermemo_unwrap,
		"__wbg_wrappermemo_new": WEBPACK_IMPORTED_MODULE_0.__wbg_wrappermemo_new,
		"__wbg_innerpuzzlememo_new": WEBPACK_IMPORTED_MODULE_0.__wbg_innerpuzzlememo_new,
		"__wbindgen_string_new": WEBPACK_IMPORTED_MODULE_0.__wbindgen_string_new,
		"__wbg_BigInt_ddea6d2f55558acb": WEBPACK_IMPORTED_MODULE_0.__wbg_BigInt_ddea6d2f55558acb,
		"__wbg_clawback_new": WEBPACK_IMPORTED_MODULE_0.__wbg_clawback_new,
		"__wbg_nft_new": WEBPACK_IMPORTED_MODULE_0.__wbg_nft_new,
		"__wbg_secretkey_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_secretkey_unwrap,
		"__wbg_blspair_new": WEBPACK_IMPORTED_MODULE_0.__wbg_blspair_new,
		"__wbg_k1pair_new": WEBPACK_IMPORTED_MODULE_0.__wbg_k1pair_new,
		"__wbg_r1pair_new": WEBPACK_IMPORTED_MODULE_0.__wbg_r1pair_new,
		"__wbg_getblockspendsresponse_new": WEBPACK_IMPORTED_MODULE_0.__wbg_getblockspendsresponse_new,
		"__wbg_call_7cccdd69e0791ae2": WEBPACK_IMPORTED_MODULE_0.__wbg_call_7cccdd69e0791ae2,
		"__wbg_new_405e22f390576ce2": WEBPACK_IMPORTED_MODULE_0.__wbg_new_405e22f390576ce2,
		"__wbg_setmethod_3c5280fe5d890842": WEBPACK_IMPORTED_MODULE_0.__wbg_setmethod_3c5280fe5d890842,
		"__wbg_new_018dcc2d6c8c2f6a": WEBPACK_IMPORTED_MODULE_0.__wbg_new_018dcc2d6c8c2f6a,
		"__wbg_setheaders_834c0bdb6a8949ad": WEBPACK_IMPORTED_MODULE_0.__wbg_setheaders_834c0bdb6a8949ad,
		"__wbg_setmode_5dc300b865044b65": WEBPACK_IMPORTED_MODULE_0.__wbg_setmode_5dc300b865044b65,
		"__wbg_setcredentials_c3a22f1cd105a2c6": WEBPACK_IMPORTED_MODULE_0.__wbg_setcredentials_c3a22f1cd105a2c6,
		"__wbg_setbody_5923b78a95eedf29": WEBPACK_IMPORTED_MODULE_0.__wbg_setbody_5923b78a95eedf29,
		"__wbg_new_e25e5aab09ff45db": WEBPACK_IMPORTED_MODULE_0.__wbg_new_e25e5aab09ff45db,
		"__wbg_signal_aaf9ad74119f20a4": WEBPACK_IMPORTED_MODULE_0.__wbg_signal_aaf9ad74119f20a4,
		"__wbg_setsignal_75b21ef3a81de905": WEBPACK_IMPORTED_MODULE_0.__wbg_setsignal_75b21ef3a81de905,
		"__wbg_newwithstrandinit_06c535e0a867c635": WEBPACK_IMPORTED_MODULE_0.__wbg_newwithstrandinit_06c535e0a867c635,
		"__wbg_append_8c7dd8d641a5f01b": WEBPACK_IMPORTED_MODULE_0.__wbg_append_8c7dd8d641a5f01b,
		"__wbg_instanceof_Response_f2cc20d9f7dfd644": WEBPACK_IMPORTED_MODULE_0.__wbg_instanceof_Response_f2cc20d9f7dfd644,
		"__wbg_status_f6360336ca686bf0": WEBPACK_IMPORTED_MODULE_0.__wbg_status_f6360336ca686bf0,
		"__wbg_url_ae10c34ca209681d": WEBPACK_IMPORTED_MODULE_0.__wbg_url_ae10c34ca209681d,
		"__wbg_headers_9cb51cfd2ac780a4": WEBPACK_IMPORTED_MODULE_0.__wbg_headers_9cb51cfd2ac780a4,
		"__wbg_iterator_9a24c88df860dc65": WEBPACK_IMPORTED_MODULE_0.__wbg_iterator_9a24c88df860dc65,
		"__wbg_get_67b2ba62fc30de12": WEBPACK_IMPORTED_MODULE_0.__wbg_get_67b2ba62fc30de12,
		"__wbindgen_is_function": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_function,
		"__wbg_call_672a4d21634d4a24": WEBPACK_IMPORTED_MODULE_0.__wbg_call_672a4d21634d4a24,
		"__wbindgen_is_object": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_object,
		"__wbg_next_25feadfc0913fea9": WEBPACK_IMPORTED_MODULE_0.__wbg_next_25feadfc0913fea9,
		"__wbg_next_6574e1a8a62d1055": WEBPACK_IMPORTED_MODULE_0.__wbg_next_6574e1a8a62d1055,
		"__wbg_done_769e5ede4b31c67b": WEBPACK_IMPORTED_MODULE_0.__wbg_done_769e5ede4b31c67b,
		"__wbg_value_cd1ffa7b1ab794f1": WEBPACK_IMPORTED_MODULE_0.__wbg_value_cd1ffa7b1ab794f1,
		"__wbindgen_cb_drop": WEBPACK_IMPORTED_MODULE_0.__wbindgen_cb_drop,
		"__wbg_stringify_f7ed6987935b4a24": WEBPACK_IMPORTED_MODULE_0.__wbg_stringify_f7ed6987935b4a24,
		"__wbindgen_string_get": WEBPACK_IMPORTED_MODULE_0.__wbindgen_string_get,
		"__wbg_arrayBuffer_d1b44c4390db422f": WEBPACK_IMPORTED_MODULE_0.__wbg_arrayBuffer_d1b44c4390db422f,
		"__wbg_new_a12002a7f91c75be": WEBPACK_IMPORTED_MODULE_0.__wbg_new_a12002a7f91c75be,
		"__wbg_length_a446193dc22c12f8": WEBPACK_IMPORTED_MODULE_0.__wbg_length_a446193dc22c12f8,
		"__wbindgen_memory": WEBPACK_IMPORTED_MODULE_0.__wbindgen_memory,
		"__wbg_buffer_609cc3eee51ed158": WEBPACK_IMPORTED_MODULE_0.__wbg_buffer_609cc3eee51ed158,
		"__wbg_set_65595bdd868b3009": WEBPACK_IMPORTED_MODULE_0.__wbg_set_65595bdd868b3009,
		"__wbg_additionsandremovalsresponse_new": WEBPACK_IMPORTED_MODULE_0.__wbg_additionsandremovalsresponse_new,
		"__wbg_getblockrecordresponse_new": WEBPACK_IMPORTED_MODULE_0.__wbg_getblockrecordresponse_new,
		"__wbg_getmempoolitemresponse_new": WEBPACK_IMPORTED_MODULE_0.__wbg_getmempoolitemresponse_new,
		"__wbg_getmempoolitemsresponse_new": WEBPACK_IMPORTED_MODULE_0.__wbg_getmempoolitemsresponse_new,
		"__wbg_pushtxresponse_new": WEBPACK_IMPORTED_MODULE_0.__wbg_pushtxresponse_new,
		"__wbg_getnetworkinforesponse_new": WEBPACK_IMPORTED_MODULE_0.__wbg_getnetworkinforesponse_new,
		"__wbg_getcoinrecordsresponse_new": WEBPACK_IMPORTED_MODULE_0.__wbg_getcoinrecordsresponse_new,
		"__wbg_getcoinrecordresponse_new": WEBPACK_IMPORTED_MODULE_0.__wbg_getcoinrecordresponse_new,
		"__wbg_getpuzzleandsolutionresponse_new": WEBPACK_IMPORTED_MODULE_0.__wbg_getpuzzleandsolutionresponse_new,
		"__wbg_getblockrecordsresponse_new": WEBPACK_IMPORTED_MODULE_0.__wbg_getblockrecordsresponse_new,
		"__wbg_getblocksresponse_new": WEBPACK_IMPORTED_MODULE_0.__wbg_getblocksresponse_new,
		"__wbg_blockchainstateresponse_new": WEBPACK_IMPORTED_MODULE_0.__wbg_blockchainstateresponse_new,
		"__wbg_getblockresponse_new": WEBPACK_IMPORTED_MODULE_0.__wbg_getblockresponse_new,
		"__wbg_toString_b5d4438bc26b267c": WEBPACK_IMPORTED_MODULE_0.__wbg_toString_b5d4438bc26b267c,
		"__wbg_new_78feb108b6472713": WEBPACK_IMPORTED_MODULE_0.__wbg_new_78feb108b6472713,
		"__wbindgen_uint8_array_new": WEBPACK_IMPORTED_MODULE_0.__wbindgen_uint8_array_new,
		"__wbg_push_737cfc8c1432c2c6": WEBPACK_IMPORTED_MODULE_0.__wbg_push_737cfc8c1432c2c6,
		"__wbg_values_99f7a68c7f313d66": WEBPACK_IMPORTED_MODULE_0.__wbg_values_99f7a68c7f313d66,
		"__wbindgen_error_new": WEBPACK_IMPORTED_MODULE_0.__wbindgen_error_new,
		"__wbg_coinspend_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_coinspend_unwrap,
		"__wbg_innerpuzzlememo_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_innerpuzzlememo_unwrap,
		"__wbg_restrictionmemo_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_restrictionmemo_unwrap,
		"__wbg_endofsubslotbundle_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_endofsubslotbundle_unwrap,
		"__wbg_tradeprice_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_tradeprice_unwrap,
		"__wbg_publickey_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_publickey_unwrap,
		"__wbg_program_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_program_unwrap,
		"__wbg_restriction_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_restriction_unwrap,
		"__wbg_coin_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_coin_unwrap,
		"__wbg_nft_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_nft_unwrap,
		"__wbg_blockrecord_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_blockrecord_unwrap,
		"__wbg_fullblock_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_fullblock_unwrap,
		"__wbg_coinrecord_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_coinrecord_unwrap,
		"__wbg_mempoolitem_unwrap": WEBPACK_IMPORTED_MODULE_0.__wbg_mempoolitem_unwrap,
		"__wbg_program_new": WEBPACK_IMPORTED_MODULE_0.__wbg_program_new,
		"__wbg_coin_new": WEBPACK_IMPORTED_MODULE_0.__wbg_coin_new,
		"__wbg_cat_new": WEBPACK_IMPORTED_MODULE_0.__wbg_cat_new,
		"__wbg_restriction_new": WEBPACK_IMPORTED_MODULE_0.__wbg_restriction_new,
		"__wbg_coinspend_new": WEBPACK_IMPORTED_MODULE_0.__wbg_coinspend_new,
		"__wbg_coinrecord_new": WEBPACK_IMPORTED_MODULE_0.__wbg_coinrecord_new,
		"__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a": WEBPACK_IMPORTED_MODULE_0.__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a,
		"__wbg_randomFillSync_ab2cfe79ebbf2740": WEBPACK_IMPORTED_MODULE_0.__wbg_randomFillSync_ab2cfe79ebbf2740,
		"__wbg_subarray_aa9065fa9dc5df96": WEBPACK_IMPORTED_MODULE_0.__wbg_subarray_aa9065fa9dc5df96,
		"__wbg_getRandomValues_bcb4912f16000dc4": WEBPACK_IMPORTED_MODULE_0.__wbg_getRandomValues_bcb4912f16000dc4,
		"__wbg_crypto_ed58b8e10a292839": WEBPACK_IMPORTED_MODULE_0.__wbg_crypto_ed58b8e10a292839,
		"__wbg_process_5c1d670bc53614b8": WEBPACK_IMPORTED_MODULE_0.__wbg_process_5c1d670bc53614b8,
		"__wbg_versions_c71aa1626a93e0a1": WEBPACK_IMPORTED_MODULE_0.__wbg_versions_c71aa1626a93e0a1,
		"__wbg_node_02999533c4ea02e3": WEBPACK_IMPORTED_MODULE_0.__wbg_node_02999533c4ea02e3,
		"__wbindgen_is_string": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_string,
		"__wbg_require_79b1e9274cde3c87": WEBPACK_IMPORTED_MODULE_0.__wbg_require_79b1e9274cde3c87,
		"__wbg_msCrypto_0a36e2ec3a343d26": WEBPACK_IMPORTED_MODULE_0.__wbg_msCrypto_0a36e2ec3a343d26,
		"__wbg_newwithlength_a381634e90c276d4": WEBPACK_IMPORTED_MODULE_0.__wbg_newwithlength_a381634e90c276d4,
		"__wbindgen_object_clone_ref": WEBPACK_IMPORTED_MODULE_0.__wbindgen_object_clone_ref,
		"__wbindgen_is_undefined": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_undefined,
		"__wbg_newnoargs_105ed471475aaf50": WEBPACK_IMPORTED_MODULE_0.__wbg_newnoargs_105ed471475aaf50,
		"__wbg_static_accessor_GLOBAL_88a902d13a557d07": WEBPACK_IMPORTED_MODULE_0.__wbg_static_accessor_GLOBAL_88a902d13a557d07,
		"__wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0": WEBPACK_IMPORTED_MODULE_0.__wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0,
		"__wbg_static_accessor_WINDOW_5de37043a91a9c40": WEBPACK_IMPORTED_MODULE_0.__wbg_static_accessor_WINDOW_5de37043a91a9c40,
		"__wbg_static_accessor_SELF_37c5d418e4bf5819": WEBPACK_IMPORTED_MODULE_0.__wbg_static_accessor_SELF_37c5d418e4bf5819,
		"__wbg_setTimeout_ca12ead8b48245e2": WEBPACK_IMPORTED_MODULE_0.__wbg_setTimeout_ca12ead8b48245e2,
		"__wbg_clearTimeout_b1115618e821c3b2": WEBPACK_IMPORTED_MODULE_0.__wbg_clearTimeout_b1115618e821c3b2,
		"__wbg_abort_410ec47a64ac6117": WEBPACK_IMPORTED_MODULE_0.__wbg_abort_410ec47a64ac6117,
		"__wbg_abort_775ef1d17fc65868": WEBPACK_IMPORTED_MODULE_0.__wbg_abort_775ef1d17fc65868,
		"__wbg_has_a5ea9117f258a0ec": WEBPACK_IMPORTED_MODULE_0.__wbg_has_a5ea9117f258a0ec,
		"__wbg_fetch_3afbdcc7ddbf16fe": WEBPACK_IMPORTED_MODULE_0.__wbg_fetch_3afbdcc7ddbf16fe,
		"__wbg_fetch_509096533071c657": WEBPACK_IMPORTED_MODULE_0.__wbg_fetch_509096533071c657,
		"__wbindgen_debug_string": WEBPACK_IMPORTED_MODULE_0.__wbindgen_debug_string,
		"__wbindgen_throw": WEBPACK_IMPORTED_MODULE_0.__wbindgen_throw,
		"__wbg_then_48b406749878a531": WEBPACK_IMPORTED_MODULE_0.__wbg_then_48b406749878a531,
		"__wbg_then_44b73946d2fb3e7d": WEBPACK_IMPORTED_MODULE_0.__wbg_then_44b73946d2fb3e7d,
		"__wbg_queueMicrotask_97d92b4fcc8a61c5": WEBPACK_IMPORTED_MODULE_0.__wbg_queueMicrotask_97d92b4fcc8a61c5,
		"__wbg_queueMicrotask_d3219def82552485": WEBPACK_IMPORTED_MODULE_0.__wbg_queueMicrotask_d3219def82552485,
		"__wbg_resolve_4851785c9c5f573d": WEBPACK_IMPORTED_MODULE_0.__wbg_resolve_4851785c9c5f573d,
		"__wbindgen_closure_wrapper4648": WEBPACK_IMPORTED_MODULE_0.__wbindgen_closure_wrapper4648,
		"__wbindgen_closure_wrapper4750": WEBPACK_IMPORTED_MODULE_0.__wbindgen_closure_wrapper4750
	}
});

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/Icon.js":
/*!****************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/Icon.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Icon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _defaultAttributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaultAttributes.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/defaultAttributes.js\");\n/* harmony import */ var _shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/src/utils.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/shared/src/utils.js\");\n/**\n * @license lucide-react v0.522.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \n\n\nconst Icon = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(_c = (param, ref)=>{\n    let { color = \"currentColor\", size = 24, strokeWidth = 2, absoluteStrokeWidth, className = \"\", children, iconNode, ...rest } = param;\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"svg\", {\n        ref,\n        ..._defaultAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n        width: size,\n        height: size,\n        stroke: color,\n        strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n        className: (0,_shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.mergeClasses)(\"lucide\", className),\n        ...!children && !(0,_shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.hasA11yProp)(rest) && {\n            \"aria-hidden\": \"true\"\n        },\n        ...rest\n    }, [\n        ...iconNode.map((param)=>{\n            let [tag, attrs] = param;\n            return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(tag, attrs);\n        }),\n        ...Array.isArray(children) ? children : [\n            children\n        ]\n    ]);\n});\n_c1 = Icon;\n //# sourceMappingURL=Icon.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"Icon$forwardRef\");\n$RefreshReg$(_c1, \"Icon\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vSWNvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBLENBQU0sU0FBTyx3RUFDWCxRQVdFLENBRUE7UUFaQSxFQUNFLEtBQVEsbUJBQ1IsSUFBTyxPQUNQLFdBQWMsTUFDZCxxQkFDQSxTQUFZLE9BQ1osVUFDQSxVQUNBLENBQUc7eUJBSUwscURBQ0UsT0FDQTtRQUNFO1FBQ0EsR0FBRztRQUNILEtBQU87UUFDUCxNQUFRO1FBQ1IsTUFBUTtRQUNSLFlBQWEscUJBQXVCLFFBQU8sRUFBVyxZQUFJLElBQU0sVUFBTyxDQUFJLElBQUk7UUFDL0UsVUFBVyxtRUFBYSxXQUFVLFNBQVM7UUFDM0MsQ0FBSSxHQUFDLENBQVksWUFBQyxpRUFBVyxDQUFDLENBQUksS0FBSztZQUFFLGVBQWUsTUFBTztRQUFBO1FBQy9ELENBQUc7SUFDTCxHQUNBO1dBQ0ssQ0FBUyxZQUFJO2dCQUFDLENBQUMsQ0FBSyxLQUFLLEtBQU07aUNBQUEscURBQWMsR0FBSyxPQUFLLENBQUM7O1dBQ3ZELENBQU0sYUFBUSxDQUFRLFFBQUksWUFBVztZQUFDLENBQVE7U0FBQTtLQUFBIiwic291cmNlcyI6WyIvaG9tZS9rZXYvcmVwb3MvT1NTL3NyYy9JY29uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZGVmYXVsdEF0dHJpYnV0ZXMgZnJvbSAnLi9kZWZhdWx0QXR0cmlidXRlcyc7XG5pbXBvcnQgeyBJY29uTm9kZSwgTHVjaWRlUHJvcHMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IG1lcmdlQ2xhc3NlcywgaGFzQTExeVByb3AgfSBmcm9tICdAbHVjaWRlL3NoYXJlZCc7XG5cbmludGVyZmFjZSBJY29uQ29tcG9uZW50UHJvcHMgZXh0ZW5kcyBMdWNpZGVQcm9wcyB7XG4gIGljb25Ob2RlOiBJY29uTm9kZTtcbn1cblxuLyoqXG4gKiBMdWNpZGUgaWNvbiBjb21wb25lbnRcbiAqXG4gKiBAY29tcG9uZW50IEljb25cbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICogQHBhcmFtIHtzdHJpbmd9IHByb3BzLmNvbG9yIC0gVGhlIGNvbG9yIG9mIHRoZSBpY29uXG4gKiBAcGFyYW0ge251bWJlcn0gcHJvcHMuc2l6ZSAtIFRoZSBzaXplIG9mIHRoZSBpY29uXG4gKiBAcGFyYW0ge251bWJlcn0gcHJvcHMuc3Ryb2tlV2lkdGggLSBUaGUgc3Ryb2tlIHdpZHRoIG9mIHRoZSBpY29uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHByb3BzLmFic29sdXRlU3Ryb2tlV2lkdGggLSBXaGV0aGVyIHRvIHVzZSBhYnNvbHV0ZSBzdHJva2Ugd2lkdGhcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wcy5jbGFzc05hbWUgLSBUaGUgY2xhc3MgbmFtZSBvZiB0aGUgaWNvblxuICogQHBhcmFtIHtJY29uTm9kZX0gcHJvcHMuY2hpbGRyZW4gLSBUaGUgY2hpbGRyZW4gb2YgdGhlIGljb25cbiAqIEBwYXJhbSB7SWNvbk5vZGV9IHByb3BzLmljb25Ob2RlIC0gVGhlIGljb24gbm9kZSBvZiB0aGUgaWNvblxuICpcbiAqIEByZXR1cm5zIHtGb3J3YXJkUmVmRXhvdGljQ29tcG9uZW50fSBMdWNpZGVJY29uXG4gKi9cbmNvbnN0IEljb24gPSBmb3J3YXJkUmVmPFNWR1NWR0VsZW1lbnQsIEljb25Db21wb25lbnRQcm9wcz4oXG4gIChcbiAgICB7XG4gICAgICBjb2xvciA9ICdjdXJyZW50Q29sb3InLFxuICAgICAgc2l6ZSA9IDI0LFxuICAgICAgc3Ryb2tlV2lkdGggPSAyLFxuICAgICAgYWJzb2x1dGVTdHJva2VXaWR0aCxcbiAgICAgIGNsYXNzTmFtZSA9ICcnLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBpY29uTm9kZSxcbiAgICAgIC4uLnJlc3RcbiAgICB9LFxuICAgIHJlZixcbiAgKSA9PlxuICAgIGNyZWF0ZUVsZW1lbnQoXG4gICAgICAnc3ZnJyxcbiAgICAgIHtcbiAgICAgICAgcmVmLFxuICAgICAgICAuLi5kZWZhdWx0QXR0cmlidXRlcyxcbiAgICAgICAgd2lkdGg6IHNpemUsXG4gICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgc3Ryb2tlOiBjb2xvcixcbiAgICAgICAgc3Ryb2tlV2lkdGg6IGFic29sdXRlU3Ryb2tlV2lkdGggPyAoTnVtYmVyKHN0cm9rZVdpZHRoKSAqIDI0KSAvIE51bWJlcihzaXplKSA6IHN0cm9rZVdpZHRoLFxuICAgICAgICBjbGFzc05hbWU6IG1lcmdlQ2xhc3NlcygnbHVjaWRlJywgY2xhc3NOYW1lKSxcbiAgICAgICAgLi4uKCFjaGlsZHJlbiAmJiAhaGFzQTExeVByb3AocmVzdCkgJiYgeyAnYXJpYS1oaWRkZW4nOiAndHJ1ZScgfSksXG4gICAgICAgIC4uLnJlc3QsXG4gICAgICB9LFxuICAgICAgW1xuICAgICAgICAuLi5pY29uTm9kZS5tYXAoKFt0YWcsIGF0dHJzXSkgPT4gY3JlYXRlRWxlbWVudCh0YWcsIGF0dHJzKSksXG4gICAgICAgIC4uLihBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuIDogW2NoaWxkcmVuXSksXG4gICAgICBdLFxuICAgICksXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBJY29uO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/Icon.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js":
/*!****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/createLucideIcon.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ createLucideIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/src/utils.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/shared/src/utils.js\");\n/* harmony import */ var _Icon_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Icon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/Icon.js\");\n/**\n * @license lucide-react v0.522.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \n\n\nconst createLucideIcon = (iconName, iconNode)=>{\n    const Component = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((param, ref)=>{\n        let { className, ...props } = param;\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_Icon_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n            ref,\n            iconNode,\n            className: (0,_shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.mergeClasses)(\"lucide-\".concat((0,_shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.toKebabCase)((0,_shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.toPascalCase)(iconName))), \"lucide-\".concat(iconName), className),\n            ...props\n        });\n    });\n    Component.displayName = (0,_shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.toPascalCase)(iconName);\n    return Component;\n};\n //# sourceMappingURL=createLucideIcon.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vY3JlYXRlTHVjaWRlSWNvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBV00sdUJBQW1CLEdBQUMsVUFBa0IsUUFBdUI7SUFDakUsTUFBTSxDQUFZLDJFQUF1QyxRQUEwQjtZQUF6QixFQUFFLENBQVcsV0FBRyxRQUFTOzZCQUNqRixvREFBYSxDQUFDLGdEQUFNO1lBQ2xCO1lBQ0E7WUFDQSxTQUFXLHFFQUNDLFVBQW1DLE9BQW5DLGtFQUFZLGtFQUFhLEVBQVEsUUFBQyxDQUFDLEdBQzdDLFFBQVUsRUFBUSxPQUFSLFFBQVEsR0FDbEI7WUFFRixDQUFHO1FBQ0o7O0lBR08sd0JBQWMsa0VBQVksQ0FBQyxRQUFRO0lBRXRDO0FBQ1QiLCJzb3VyY2VzIjpbIi9ob21lL2tldi9yZXBvcy9PU1Mvc3JjL2NyZWF0ZUx1Y2lkZUljb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1lcmdlQ2xhc3NlcywgdG9LZWJhYkNhc2UsIHRvUGFzY2FsQ2FzZSB9IGZyb20gJ0BsdWNpZGUvc2hhcmVkJztcbmltcG9ydCB7IEljb25Ob2RlLCBMdWNpZGVQcm9wcyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IEljb24gZnJvbSAnLi9JY29uJztcblxuLyoqXG4gKiBDcmVhdGUgYSBMdWNpZGUgaWNvbiBjb21wb25lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBpY29uTmFtZVxuICogQHBhcmFtIHthcnJheX0gaWNvbk5vZGVcbiAqIEByZXR1cm5zIHtGb3J3YXJkUmVmRXhvdGljQ29tcG9uZW50fSBMdWNpZGVJY29uXG4gKi9cbmNvbnN0IGNyZWF0ZUx1Y2lkZUljb24gPSAoaWNvbk5hbWU6IHN0cmluZywgaWNvbk5vZGU6IEljb25Ob2RlKSA9PiB7XG4gIGNvbnN0IENvbXBvbmVudCA9IGZvcndhcmRSZWY8U1ZHU1ZHRWxlbWVudCwgTHVjaWRlUHJvcHM+KCh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSwgcmVmKSA9PlxuICAgIGNyZWF0ZUVsZW1lbnQoSWNvbiwge1xuICAgICAgcmVmLFxuICAgICAgaWNvbk5vZGUsXG4gICAgICBjbGFzc05hbWU6IG1lcmdlQ2xhc3NlcyhcbiAgICAgICAgYGx1Y2lkZS0ke3RvS2ViYWJDYXNlKHRvUGFzY2FsQ2FzZShpY29uTmFtZSkpfWAsXG4gICAgICAgIGBsdWNpZGUtJHtpY29uTmFtZX1gLFxuICAgICAgICBjbGFzc05hbWUsXG4gICAgICApLFxuICAgICAgLi4ucHJvcHMsXG4gICAgfSksXG4gICk7XG5cbiAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gdG9QYXNjYWxDYXNlKGljb25OYW1lKTtcblxuICByZXR1cm4gQ29tcG9uZW50O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTHVjaWRlSWNvbjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/defaultAttributes.js":
/*!*****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/defaultAttributes.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ defaultAttributes)\n/* harmony export */ });\n/**\n * @license lucide-react v0.522.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ var defaultAttributes = {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n};\n //# sourceMappingURL=defaultAttributes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vZGVmYXVsdEF0dHJpYnV0ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0lBQUEsQ0FBZTtJQUNiLEtBQU87SUFDUCxLQUFPO0lBQ1AsTUFBUTtJQUNSLE9BQVM7SUFDVCxJQUFNO0lBQ04sTUFBUTtJQUNSLFdBQWE7SUFDYixhQUFlO0lBQ2YsY0FBZ0I7QUFDbEIiLCJzb3VyY2VzIjpbIi9ob21lL2tldi9yZXBvcy9PU1Mvc3JjL2RlZmF1bHRBdHRyaWJ1dGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgeG1sbnM6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gIHdpZHRoOiAyNCxcbiAgaGVpZ2h0OiAyNCxcbiAgdmlld0JveDogJzAgMCAyNCAyNCcsXG4gIGZpbGw6ICdub25lJyxcbiAgc3Ryb2tlOiAnY3VycmVudENvbG9yJyxcbiAgc3Ryb2tlV2lkdGg6IDIsXG4gIHN0cm9rZUxpbmVjYXA6ICdyb3VuZCcsXG4gIHN0cm9rZUxpbmVqb2luOiAncm91bmQnLFxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/defaultAttributes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/arrow-right.js":
/*!*****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/arrow-right.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __iconNode: () => (/* binding */ __iconNode),\n/* harmony export */   \"default\": () => (/* binding */ ArrowRight)\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.522.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst __iconNode = [\n    [\n        \"path\",\n        {\n            d: \"M5 12h14\",\n            key: \"1ays0h\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m12 5 7 7-7 7\",\n            key: \"xquz4c\"\n        }\n    ]\n];\nconst ArrowRight = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"arrow-right\", __iconNode);\n //# sourceMappingURL=arrow-right.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvYXJyb3ctcmlnaHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBR08sTUFBTSxVQUF1QjtJQUNsQztRQUFDLE1BQVE7UUFBQTtZQUFFLEdBQUcsQ0FBWTtZQUFBLEtBQUs7UUFBQSxDQUFVO0tBQUE7SUFDekM7UUFBQyxDQUFRO1FBQUEsQ0FBRTtZQUFBLEVBQUcsZ0JBQWlCO1lBQUEsSUFBSztRQUFVO0tBQUE7Q0FDaEQ7QUFhTSxpQkFBYSxrRUFBaUIsZ0JBQWUsQ0FBVSIsInNvdXJjZXMiOlsiL2hvbWUva2V2L3JlcG9zL3NyYy9pY29ucy9hcnJvdy1yaWdodC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTHVjaWRlSWNvbiBmcm9tICcuLi9jcmVhdGVMdWNpZGVJY29uJztcbmltcG9ydCB7IEljb25Ob2RlIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgX19pY29uTm9kZTogSWNvbk5vZGUgPSBbXG4gIFsncGF0aCcsIHsgZDogJ001IDEyaDE0Jywga2V5OiAnMWF5czBoJyB9XSxcbiAgWydwYXRoJywgeyBkOiAnbTEyIDUgNyA3LTcgNycsIGtleTogJ3hxdXo0YycgfV0sXG5dO1xuXG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgQXJyb3dSaWdodFxuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4Y0dGMGFDQmtQU0pOTlNBeE1tZ3hOQ0lnTHo0S0lDQThjR0YwYUNCa1BTSnRNVElnTlNBM0lEY3ROeUEzSWlBdlBnbzhMM04yWno0SykgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvYXJyb3ctcmlnaHRcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1yZWFjdCAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9IEpTWCBFbGVtZW50XG4gKlxuICovXG5jb25zdCBBcnJvd1JpZ2h0ID0gY3JlYXRlTHVjaWRlSWNvbignYXJyb3ctcmlnaHQnLCBfX2ljb25Ob2RlKTtcblxuZXhwb3J0IGRlZmF1bHQgQXJyb3dSaWdodDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/arrow-right.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/chevron-down.js":
/*!******************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/chevron-down.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __iconNode: () => (/* binding */ __iconNode),\n/* harmony export */   \"default\": () => (/* binding */ ChevronDown)\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.522.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst __iconNode = [\n    [\n        \"path\",\n        {\n            d: \"m6 9 6 6 6-6\",\n            key: \"qrunsl\"\n        }\n    ]\n];\nconst ChevronDown = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"chevron-down\", __iconNode);\n //# sourceMappingURL=chevron-down.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvY2hldnJvbi1kb3duLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUdhLG1CQUF1QjtJQUFDO1FBQUMsTUFBUTtRQUFBO1lBQUUsR0FBRyxjQUFnQjtZQUFBLElBQUssU0FBUztRQUFBLENBQUM7S0FBQztDQUFBO0FBYTdFLGtCQUFjLGtFQUFpQixpQkFBZ0IsQ0FBVSIsInNvdXJjZXMiOlsiL2hvbWUva2V2L3JlcG9zL3NyYy9pY29ucy9jaGV2cm9uLWRvd24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUx1Y2lkZUljb24gZnJvbSAnLi4vY3JlYXRlTHVjaWRlSWNvbic7XG5pbXBvcnQgeyBJY29uTm9kZSB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IF9faWNvbk5vZGU6IEljb25Ob2RlID0gW1sncGF0aCcsIHsgZDogJ202IDkgNiA2IDYtNicsIGtleTogJ3FydW5zbCcgfV1dO1xuXG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgQ2hldnJvbkRvd25cbiAqIEBkZXNjcmlwdGlvbiBMdWNpZGUgU1ZHIGljb24gY29tcG9uZW50LCByZW5kZXJzIFNWRyBFbGVtZW50IHdpdGggY2hpbGRyZW4uXG4gKlxuICogQHByZXZpZXcgIVtpbWddKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklnb2dJSGRwWkhSb1BTSXlOQ0lLSUNCb1pXbG5hSFE5SWpJMElnb2dJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lLSUNCbWFXeHNQU0p1YjI1bElnb2dJSE4wY205clpUMGlJekF3TUNJZ2MzUjViR1U5SW1KaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObVptWTdJR0p2Y21SbGNpMXlZV1JwZFhNNklESndlQ0lLSUNCemRISnZhMlV0ZDJsa2RHZzlJaklpQ2lBZ2MzUnliMnRsTFd4cGJtVmpZWEE5SW5KdmRXNWtJZ29nSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlDajRLSUNBOGNHRjBhQ0JrUFNKdE5pQTVJRFlnTmlBMkxUWWlJQzgrQ2p3dmMzWm5QZ289KSAtIGh0dHBzOi8vbHVjaWRlLmRldi9pY29ucy9jaGV2cm9uLWRvd25cbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1yZWFjdCAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9IEpTWCBFbGVtZW50XG4gKlxuICovXG5jb25zdCBDaGV2cm9uRG93biA9IGNyZWF0ZUx1Y2lkZUljb24oJ2NoZXZyb24tZG93bicsIF9faWNvbk5vZGUpO1xuXG5leHBvcnQgZGVmYXVsdCBDaGV2cm9uRG93bjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/chevron-down.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/chevron-up.js":
/*!****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/chevron-up.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __iconNode: () => (/* binding */ __iconNode),\n/* harmony export */   \"default\": () => (/* binding */ ChevronUp)\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.522.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst __iconNode = [\n    [\n        \"path\",\n        {\n            d: \"m18 15-6-6-6 6\",\n            key: \"153udz\"\n        }\n    ]\n];\nconst ChevronUp = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"chevron-up\", __iconNode);\n //# sourceMappingURL=chevron-up.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvY2hldnJvbi11cC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFHYSxtQkFBdUI7SUFBQztRQUFDLE1BQVE7UUFBQTtZQUFFLEdBQUcsZ0JBQWtCO1lBQUEsSUFBSyxTQUFTO1FBQUEsQ0FBQztLQUFDO0NBQUE7QUFhL0UsZ0JBQVksa0VBQWlCLGVBQWMsQ0FBVSIsInNvdXJjZXMiOlsiL2hvbWUva2V2L3JlcG9zL3NyYy9pY29ucy9jaGV2cm9uLXVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVMdWNpZGVJY29uIGZyb20gJy4uL2NyZWF0ZUx1Y2lkZUljb24nO1xuaW1wb3J0IHsgSWNvbk5vZGUgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBfX2ljb25Ob2RlOiBJY29uTm9kZSA9IFtbJ3BhdGgnLCB7IGQ6ICdtMTggMTUtNi02LTYgNicsIGtleTogJzE1M3VkeicgfV1dO1xuXG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgQ2hldnJvblVwXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThjR0YwYUNCa1BTSnRNVGdnTVRVdE5pMDJMVFlnTmlJZ0x6NEtQQzl6ZG1jK0NnPT0pIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL2NoZXZyb24tdXBcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1yZWFjdCAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9IEpTWCBFbGVtZW50XG4gKlxuICovXG5jb25zdCBDaGV2cm9uVXAgPSBjcmVhdGVMdWNpZGVJY29uKCdjaGV2cm9uLXVwJywgX19pY29uTm9kZSk7XG5cbmV4cG9ydCBkZWZhdWx0IENoZXZyb25VcDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/chevron-up.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/circle-x.js":
/*!**************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/circle-x.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __iconNode: () => (/* binding */ __iconNode),\n/* harmony export */   \"default\": () => (/* binding */ CircleX)\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.522.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst __iconNode = [\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\",\n            key: \"1mglay\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m15 9-6 6\",\n            key: \"1uzhvr\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m9 9 6 6\",\n            key: \"z0biqf\"\n        }\n    ]\n];\nconst CircleX = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"circle-x\", __iconNode);\n //# sourceMappingURL=circle-x.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvY2lyY2xlLXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBR08sTUFBTSxVQUF1QjtJQUNsQztRQUFDLFFBQVU7UUFBQTtZQUFFLEVBQUk7WUFBTSxDQUFJLFFBQU07WUFBQSxDQUFHO1lBQU0sR0FBSztRQUFBLENBQVU7S0FBQTtJQUN6RDtRQUFDLE1BQVE7UUFBQTtZQUFFLEdBQUcsQ0FBYTtZQUFBLEtBQUs7UUFBQSxDQUFVO0tBQUE7SUFDMUM7UUFBQyxDQUFRO1FBQUEsQ0FBRTtZQUFBLEVBQUcsV0FBWTtZQUFBLElBQUs7UUFBVTtLQUFBO0NBQzNDO0FBYU0sY0FBVSxrRUFBaUIsYUFBWSxDQUFVIiwic291cmNlcyI6WyIvaG9tZS9rZXYvcmVwb3Mvc3JjL2ljb25zL2NpcmNsZS14LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVMdWNpZGVJY29uIGZyb20gJy4uL2NyZWF0ZUx1Y2lkZUljb24nO1xuaW1wb3J0IHsgSWNvbk5vZGUgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBfX2ljb25Ob2RlOiBJY29uTm9kZSA9IFtcbiAgWydjaXJjbGUnLCB7IGN4OiAnMTInLCBjeTogJzEyJywgcjogJzEwJywga2V5OiAnMW1nbGF5JyB9XSxcbiAgWydwYXRoJywgeyBkOiAnbTE1IDktNiA2Jywga2V5OiAnMXV6aHZyJyB9XSxcbiAgWydwYXRoJywgeyBkOiAnbTkgOSA2IDYnLCBrZXk6ICd6MGJpcWYnIH1dLFxuXTtcblxuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIENpcmNsZVhcbiAqIEBkZXNjcmlwdGlvbiBMdWNpZGUgU1ZHIGljb24gY29tcG9uZW50LCByZW5kZXJzIFNWRyBFbGVtZW50IHdpdGggY2hpbGRyZW4uXG4gKlxuICogQHByZXZpZXcgIVtpbWddKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklnb2dJSGRwWkhSb1BTSXlOQ0lLSUNCb1pXbG5hSFE5SWpJMElnb2dJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lLSUNCbWFXeHNQU0p1YjI1bElnb2dJSE4wY205clpUMGlJekF3TUNJZ2MzUjViR1U5SW1KaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObVptWTdJR0p2Y21SbGNpMXlZV1JwZFhNNklESndlQ0lLSUNCemRISnZhMlV0ZDJsa2RHZzlJaklpQ2lBZ2MzUnliMnRsTFd4cGJtVmpZWEE5SW5KdmRXNWtJZ29nSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlDajRLSUNBOFkybHlZMnhsSUdONFBTSXhNaUlnWTNrOUlqRXlJaUJ5UFNJeE1DSWdMejRLSUNBOGNHRjBhQ0JrUFNKdE1UVWdPUzAySURZaUlDOCtDaUFnUEhCaGRHZ2daRDBpYlRrZ09TQTJJRFlpSUM4K0Nqd3ZjM1puUGdvPSkgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvY2lyY2xlLXhcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1yZWFjdCAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9IEpTWCBFbGVtZW50XG4gKlxuICovXG5jb25zdCBDaXJjbGVYID0gY3JlYXRlTHVjaWRlSWNvbignY2lyY2xlLXgnLCBfX2ljb25Ob2RlKTtcblxuZXhwb3J0IGRlZmF1bHQgQ2lyY2xlWDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/circle-x.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/file-text.js":
/*!***************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/file-text.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __iconNode: () => (/* binding */ __iconNode),\n/* harmony export */   \"default\": () => (/* binding */ FileText)\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.522.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst __iconNode = [\n    [\n        \"path\",\n        {\n            d: \"M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z\",\n            key: \"1rqfz7\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M14 2v4a2 2 0 0 0 2 2h4\",\n            key: \"tnqrlb\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M10 9H8\",\n            key: \"b1mrlr\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M16 13H8\",\n            key: \"t4e002\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M16 17H8\",\n            key: \"z1uh3a\"\n        }\n    ]\n];\nconst FileText = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"file-text\", __iconNode);\n //# sourceMappingURL=file-text.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvZmlsZS10ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUdPLE1BQU0sVUFBdUI7SUFDbEM7UUFBQyxNQUFRO1FBQUE7WUFBRSxHQUFHLENBQThEO1lBQUEsS0FBSztRQUFBLENBQVU7S0FBQTtJQUMzRjtRQUFDLE1BQVE7UUFBQTtZQUFFLEdBQUcsQ0FBMkI7WUFBQSxLQUFLO1FBQUEsQ0FBVTtLQUFBO0lBQ3hEO1FBQUMsTUFBUTtRQUFBO1lBQUUsR0FBRyxDQUFXO1lBQUEsS0FBSztRQUFBLENBQVU7S0FBQTtJQUN4QztRQUFDLE1BQVE7UUFBQTtZQUFFLEdBQUcsQ0FBWTtZQUFBLEtBQUs7UUFBQSxDQUFVO0tBQUE7SUFDekM7UUFBQyxDQUFRO1FBQUEsQ0FBRTtZQUFBLEVBQUcsV0FBWTtZQUFBLElBQUs7UUFBVTtLQUFBO0NBQzNDO0FBYU0sZUFBVyxrRUFBaUIsY0FBYSxDQUFVIiwic291cmNlcyI6WyIvaG9tZS9rZXYvcmVwb3Mvc3JjL2ljb25zL2ZpbGUtdGV4dC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTHVjaWRlSWNvbiBmcm9tICcuLi9jcmVhdGVMdWNpZGVJY29uJztcbmltcG9ydCB7IEljb25Ob2RlIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgX19pY29uTm9kZTogSWNvbk5vZGUgPSBbXG4gIFsncGF0aCcsIHsgZDogJ00xNSAySDZhMiAyIDAgMCAwLTIgMnYxNmEyIDIgMCAwIDAgMiAyaDEyYTIgMiAwIDAgMCAyLTJWN1onLCBrZXk6ICcxcnFmejcnIH1dLFxuICBbJ3BhdGgnLCB7IGQ6ICdNMTQgMnY0YTIgMiAwIDAgMCAyIDJoNCcsIGtleTogJ3RucXJsYicgfV0sXG4gIFsncGF0aCcsIHsgZDogJ00xMCA5SDgnLCBrZXk6ICdiMW1ybHInIH1dLFxuICBbJ3BhdGgnLCB7IGQ6ICdNMTYgMTNIOCcsIGtleTogJ3Q0ZTAwMicgfV0sXG4gIFsncGF0aCcsIHsgZDogJ00xNiAxN0g4Jywga2V5OiAnejF1aDNhJyB9XSxcbl07XG5cbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBGaWxlVGV4dFxuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4Y0dGMGFDQmtQU0pOTVRVZ01rZzJZVElnTWlBd0lEQWdNQzB5SURKMk1UWmhNaUF5SURBZ01DQXdJRElnTW1neE1tRXlJRElnTUNBd0lEQWdNaTB5VmpkYUlpQXZQZ29nSUR4d1lYUm9JR1E5SWsweE5DQXlkalJoTWlBeUlEQWdNQ0F3SURJZ01tZzBJaUF2UGdvZ0lEeHdZWFJvSUdROUlrMHhNQ0E1U0RnaUlDOCtDaUFnUEhCaGRHZ2daRDBpVFRFMklERXpTRGdpSUM4K0NpQWdQSEJoZEdnZ1pEMGlUVEUySURFM1NEZ2lJQzgrQ2p3dmMzWm5QZ289KSAtIGh0dHBzOi8vbHVjaWRlLmRldi9pY29ucy9maWxlLXRleHRcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1yZWFjdCAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9IEpTWCBFbGVtZW50XG4gKlxuICovXG5jb25zdCBGaWxlVGV4dCA9IGNyZWF0ZUx1Y2lkZUljb24oJ2ZpbGUtdGV4dCcsIF9faWNvbk5vZGUpO1xuXG5leHBvcnQgZGVmYXVsdCBGaWxlVGV4dDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/file-text.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/play.js":
/*!**********************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/play.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __iconNode: () => (/* binding */ __iconNode),\n/* harmony export */   \"default\": () => (/* binding */ Play)\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.522.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst __iconNode = [\n    [\n        \"polygon\",\n        {\n            points: \"6 3 20 12 6 21 6 3\",\n            key: \"1oa8hb\"\n        }\n    ]\n];\nconst Play = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"play\", __iconNode);\n //# sourceMappingURL=play.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvcGxheS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFHYSxtQkFBdUI7SUFBQztRQUFDLFNBQVc7UUFBQTtZQUFFLFFBQVEsb0JBQXNCO1lBQUEsSUFBSyxTQUFTO1FBQUEsQ0FBQztLQUFDO0NBQUE7QUFhM0YsV0FBTyxrRUFBaUIsU0FBUSxDQUFVIiwic291cmNlcyI6WyIvaG9tZS9rZXYvcmVwb3Mvc3JjL2ljb25zL3BsYXkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUx1Y2lkZUljb24gZnJvbSAnLi4vY3JlYXRlTHVjaWRlSWNvbic7XG5pbXBvcnQgeyBJY29uTm9kZSB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IF9faWNvbk5vZGU6IEljb25Ob2RlID0gW1sncG9seWdvbicsIHsgcG9pbnRzOiAnNiAzIDIwIDEyIDYgMjEgNiAzJywga2V5OiAnMW9hOGhiJyB9XV07XG5cbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBQbGF5XG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThjRzlzZVdkdmJpQndiMmx1ZEhNOUlqWWdNeUF5TUNBeE1pQTJJREl4SURZZ015SWdMejRLUEM5emRtYytDZz09KSAtIGh0dHBzOi8vbHVjaWRlLmRldi9pY29ucy9wbGF5XG4gKiBAc2VlIGh0dHBzOi8vbHVjaWRlLmRldi9ndWlkZS9wYWNrYWdlcy9sdWNpZGUtcmVhY3QgLSBEb2N1bWVudGF0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gTHVjaWRlIGljb25zIHByb3BzIGFuZCBhbnkgdmFsaWQgU1ZHIGF0dHJpYnV0ZVxuICogQHJldHVybnMge0pTWC5FbGVtZW50fSBKU1ggRWxlbWVudFxuICpcbiAqL1xuY29uc3QgUGxheSA9IGNyZWF0ZUx1Y2lkZUljb24oJ3BsYXknLCBfX2ljb25Ob2RlKTtcblxuZXhwb3J0IGRlZmF1bHQgUGxheTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/play.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/shared/src/utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/shared/src/utils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasA11yProp: () => (/* binding */ hasA11yProp),\n/* harmony export */   mergeClasses: () => (/* binding */ mergeClasses),\n/* harmony export */   toCamelCase: () => (/* binding */ toCamelCase),\n/* harmony export */   toKebabCase: () => (/* binding */ toKebabCase),\n/* harmony export */   toPascalCase: () => (/* binding */ toPascalCase)\n/* harmony export */ });\n/**\n * @license lucide-react v0.522.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const toKebabCase = (string)=>string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\nconst toCamelCase = (string)=>string.replace(/^([A-Z])|[\\s-_]+(\\w)/g, (match, p1, p2)=>p2 ? p2.toUpperCase() : p1.toLowerCase());\nconst toPascalCase = (string)=>{\n    const camelCase = toCamelCase(string);\n    return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n};\nconst mergeClasses = function() {\n    for(var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++){\n        classes[_key] = arguments[_key];\n    }\n    return classes.filter((className, index, array)=>{\n        return Boolean(className) && className.trim() !== \"\" && array.indexOf(className) === index;\n    }).join(\" \").trim();\n};\nconst hasA11yProp = (props)=>{\n    for(const prop in props){\n        if (prop.startsWith(\"aria-\") || prop === \"role\" || prop === \"title\") {\n            return true;\n        }\n    }\n};\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vc2hhcmVkL3NyYy91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0lBUWEsb0JBQWMsQ0FBQyxNQUMxQixVQUFPLFFBQVEsQ0FBc0Isc0JBQU8sUUFBRSxDQUFZO0FBUS9DLGtCQUFjLEdBQW1CLE9BQzVDLFFBQU8sU0FBUSx5QkFBeUIsQ0FBQyxPQUFPLENBQUksTUFDbEQsS0FBSyxJQUFHLGNBQWdCLE1BQUcsQ0FBWTtBQVM5QixxQkFBZSxDQUFtQixNQUFnQztJQUN2RSxrQkFBWSxZQUFZLE1BQU07SUFFNUIsaUJBQVUsT0FBTyxDQUFDLEVBQUUsYUFBZ0IsYUFBVSxNQUFNLENBQUM7QUFDL0Q7QUFRYSxtQkFBZSxJQUEyQzs7UUFBQSxPQUNyRTs7V0FBQSxRQUNHLE9BQU8sQ0FBQyxXQUFXLE9BQU8sS0FBVTtRQUVqQyxlQUFRLFNBQVMsRUFDaEIsWUFBcUIsWUFBVyxDQUNqQyxXQUFNLE9BQVEsRUFBUyxTQUFNO0lBRWpDLENBQUMsQ0FDQSxNQUFLLENBQUcsSUFDUixDQUFLOztBQVFHLG9CQUFjLENBQUMsS0FBK0I7SUFDekQsVUFBVyxRQUFRLEtBQU87UUFDeEIsQ0FBSSxRQUFLLFVBQVcsRUFBTyxRQUFLLE9BQVMsZUFBVSxTQUFTLE9BQVM7WUFDNUQ7UUFBQTtJQUNUO0FBRUoiLCJzb3VyY2VzIjpbIi9ob21lL3NoYXJlZC9zcmMvdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FtZWxUb1Bhc2NhbCB9IGZyb20gJy4vdXRpbGl0eS10eXBlcyc7XG5cbi8qKlxuICogQ29udmVydHMgc3RyaW5nIHRvIGtlYmFiIGNhc2VcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIGtlYmFiaXplZCBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IHRvS2ViYWJDYXNlID0gKHN0cmluZzogc3RyaW5nKSA9PlxuICBzdHJpbmcucmVwbGFjZSgvKFthLXowLTldKShbQS1aXSkvZywgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBzdHJpbmcgdG8gY2FtZWwgY2FzZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgY2FtZWxpemVkIHN0cmluZ1xuICovXG5leHBvcnQgY29uc3QgdG9DYW1lbENhc2UgPSA8VCBleHRlbmRzIHN0cmluZz4oc3RyaW5nOiBUKSA9PlxuICBzdHJpbmcucmVwbGFjZSgvXihbQS1aXSl8W1xccy1fXSsoXFx3KS9nLCAobWF0Y2gsIHAxLCBwMikgPT5cbiAgICBwMiA/IHAyLnRvVXBwZXJDYXNlKCkgOiBwMS50b0xvd2VyQ2FzZSgpLFxuICApO1xuXG4vKipcbiAqIENvbnZlcnRzIHN0cmluZyB0byBwYXNjYWwgY2FzZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgcGFzY2FsaXplZCBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IHRvUGFzY2FsQ2FzZSA9IDxUIGV4dGVuZHMgc3RyaW5nPihzdHJpbmc6IFQpOiBDYW1lbFRvUGFzY2FsPFQ+ID0+IHtcbiAgY29uc3QgY2FtZWxDYXNlID0gdG9DYW1lbENhc2Uoc3RyaW5nKTtcblxuICByZXR1cm4gKGNhbWVsQ2FzZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGNhbWVsQ2FzZS5zbGljZSgxKSkgYXMgQ2FtZWxUb1Bhc2NhbDxUPjtcbn07XG5cbi8qKlxuICogTWVyZ2VzIGNsYXNzZXMgaW50byBhIHNpbmdsZSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge2FycmF5fSBjbGFzc2VzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZyBvZiBjbGFzc2VzXG4gKi9cbmV4cG9ydCBjb25zdCBtZXJnZUNsYXNzZXMgPSA8Q2xhc3NUeXBlID0gc3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbD4oLi4uY2xhc3NlczogQ2xhc3NUeXBlW10pID0+XG4gIGNsYXNzZXNcbiAgICAuZmlsdGVyKChjbGFzc05hbWUsIGluZGV4LCBhcnJheSkgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgQm9vbGVhbihjbGFzc05hbWUpICYmXG4gICAgICAgIChjbGFzc05hbWUgYXMgc3RyaW5nKS50cmltKCkgIT09ICcnICYmXG4gICAgICAgIGFycmF5LmluZGV4T2YoY2xhc3NOYW1lKSA9PT0gaW5kZXhcbiAgICAgICk7XG4gICAgfSlcbiAgICAuam9pbignICcpXG4gICAgLnRyaW0oKTtcblxuLyoqXG4gKiBDaGVjayBpZiBhIGNvbXBvbmVudCBoYXMgYW4gYWNjZXNzaWJpbGl0eSBwcm9wXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgY29tcG9uZW50IGhhcyBhbiBhY2Nlc3NpYmlsaXR5IHByb3BcbiAqL1xuZXhwb3J0IGNvbnN0IGhhc0ExMXlQcm9wID0gKHByb3BzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KSA9PiB7XG4gIGZvciAoY29uc3QgcHJvcCBpbiBwcm9wcykge1xuICAgIGlmIChwcm9wLnN0YXJ0c1dpdGgoJ2FyaWEtJykgfHwgcHJvcCA9PT0gJ3JvbGUnIHx8IHByb3AgPT09ICd0aXRsZScpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/shared/src/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/api/app-dynamic.js":
/*!***************************************************!*\
  !*** ./node_modules/next/dist/api/app-dynamic.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport default from dynamic */ _shared_lib_app_dynamic__WEBPACK_IMPORTED_MODULE_0___default.a)\n/* harmony export */ });\n/* harmony import */ var _shared_lib_app_dynamic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/lib/app-dynamic */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/app-dynamic.js\");\n/* harmony import */ var _shared_lib_app_dynamic__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shared_lib_app_dynamic__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _shared_lib_app_dynamic__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _shared_lib_app_dynamic__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n//# sourceMappingURL=app-dynamic.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYXBpL2FwcC1keW5hbWljLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUEwQztBQUNVOztBQUVwRCIsInNvdXJjZXMiOlsiL2hvbWUva2V2L3JlcG9zL09TUy9jaGlhLXNpbXVsYXRvci11aS9zaW11bGF0b3ItdWkvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9hcGkvYXBwLWR5bmFtaWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi4vc2hhcmVkL2xpYi9hcHAtZHluYW1pYyc7XG5leHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi4vc2hhcmVkL2xpYi9hcHAtZHluYW1pYyc7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1keW5hbWljLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/api/app-dynamic.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fhome%2Fkev%2Frepos%2FOSS%2Fchia-simulator-ui%2Fsimulator-ui%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!":
/*!******************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fhome%2Fkev%2Frepos%2FOSS%2Fchia-simulator-ui%2Fsimulator-ui%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!
  \******************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/page.tsx */ \"(app-pages-browser)/./src/app/page.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGaG9tZSUyRmtldiUyRnJlcG9zJTJGT1NTJTJGY2hpYS1zaW11bGF0b3ItdWklMkZzaW11bGF0b3ItdWklMkZzcmMlMkZhcHAlMkZwYWdlLnRzeCUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBLDhKQUF3RyIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL2hvbWUva2V2L3JlcG9zL09TUy9jaGlhLXNpbXVsYXRvci11aS9zaW11bGF0b3ItdWkvc3JjL2FwcC9wYWdlLnRzeFwiKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fhome%2Fkev%2Frepos%2FOSS%2Fchia-simulator-ui%2Fsimulator-ui%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function getComponentNameFromType(type) {\n      if (null == type) return null;\n      if (\"function\" === typeof type)\n        return type.$$typeof === REACT_CLIENT_REFERENCE\n          ? null\n          : type.displayName || type.name || null;\n      if (\"string\" === typeof type) return type;\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n        case REACT_ACTIVITY_TYPE:\n          return \"Activity\";\n      }\n      if (\"object\" === typeof type)\n        switch (\n          (\"number\" === typeof type.tag &&\n            console.error(\n              \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n            ),\n          type.$$typeof)\n        ) {\n          case REACT_PORTAL_TYPE:\n            return \"Portal\";\n          case REACT_CONTEXT_TYPE:\n            return (type.displayName || \"Context\") + \".Provider\";\n          case REACT_CONSUMER_TYPE:\n            return (type._context.displayName || \"Context\") + \".Consumer\";\n          case REACT_FORWARD_REF_TYPE:\n            var innerType = type.render;\n            type = type.displayName;\n            type ||\n              ((type = innerType.displayName || innerType.name || \"\"),\n              (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n            return type;\n          case REACT_MEMO_TYPE:\n            return (\n              (innerType = type.displayName || null),\n              null !== innerType\n                ? innerType\n                : getComponentNameFromType(type.type) || \"Memo\"\n            );\n          case REACT_LAZY_TYPE:\n            innerType = type._payload;\n            type = type._init;\n            try {\n              return getComponentNameFromType(type(innerType));\n            } catch (x) {}\n        }\n      return null;\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      try {\n        testStringCoercion(value);\n        var JSCompiler_inline_result = !1;\n      } catch (e) {\n        JSCompiler_inline_result = !0;\n      }\n      if (JSCompiler_inline_result) {\n        JSCompiler_inline_result = console;\n        var JSCompiler_temp_const = JSCompiler_inline_result.error;\n        var JSCompiler_inline_result$jscomp$0 =\n          (\"function\" === typeof Symbol &&\n            Symbol.toStringTag &&\n            value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\";\n        JSCompiler_temp_const.call(\n          JSCompiler_inline_result,\n          \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n          JSCompiler_inline_result$jscomp$0\n        );\n        return testStringCoercion(value);\n      }\n    }\n    function getTaskName(type) {\n      if (type === REACT_FRAGMENT_TYPE) return \"<>\";\n      if (\n        \"object\" === typeof type &&\n        null !== type &&\n        type.$$typeof === REACT_LAZY_TYPE\n      )\n        return \"<...>\";\n      try {\n        var name = getComponentNameFromType(type);\n        return name ? \"<\" + name + \">\" : \"<...>\";\n      } catch (x) {\n        return \"<...>\";\n      }\n    }\n    function getOwner() {\n      var dispatcher = ReactSharedInternals.A;\n      return null === dispatcher ? null : dispatcher.getOwner();\n    }\n    function UnknownOwner() {\n      return Error(\"react-stack-top-frame\");\n    }\n    function hasValidKey(config) {\n      if (hasOwnProperty.call(config, \"key\")) {\n        var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n        if (getter && getter.isReactWarning) return !1;\n      }\n      return void 0 !== config.key;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      function warnAboutAccessingKey() {\n        specialPropKeyWarningShown ||\n          ((specialPropKeyWarningShown = !0),\n          console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n      }\n      warnAboutAccessingKey.isReactWarning = !0;\n      Object.defineProperty(props, \"key\", {\n        get: warnAboutAccessingKey,\n        configurable: !0\n      });\n    }\n    function elementRefGetterWithDeprecationWarning() {\n      var componentName = getComponentNameFromType(this.type);\n      didWarnAboutElementRef[componentName] ||\n        ((didWarnAboutElementRef[componentName] = !0),\n        console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n      componentName = this.props.ref;\n      return void 0 !== componentName ? componentName : null;\n    }\n    function ReactElement(\n      type,\n      key,\n      self,\n      source,\n      owner,\n      props,\n      debugStack,\n      debugTask\n    ) {\n      self = props.ref;\n      type = {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key,\n        props: props,\n        _owner: owner\n      };\n      null !== (void 0 !== self ? self : null)\n        ? Object.defineProperty(type, \"ref\", {\n            enumerable: !1,\n            get: elementRefGetterWithDeprecationWarning\n          })\n        : Object.defineProperty(type, \"ref\", { enumerable: !1, value: null });\n      type._store = {};\n      Object.defineProperty(type._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: 0\n      });\n      Object.defineProperty(type, \"_debugInfo\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: null\n      });\n      Object.defineProperty(type, \"_debugStack\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugStack\n      });\n      Object.defineProperty(type, \"_debugTask\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugTask\n      });\n      Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n      return type;\n    }\n    function jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self,\n      debugStack,\n      debugTask\n    ) {\n      var children = config.children;\n      if (void 0 !== children)\n        if (isStaticChildren)\n          if (isArrayImpl(children)) {\n            for (\n              isStaticChildren = 0;\n              isStaticChildren < children.length;\n              isStaticChildren++\n            )\n              validateChildKeys(children[isStaticChildren]);\n            Object.freeze && Object.freeze(children);\n          } else\n            console.error(\n              \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n            );\n        else validateChildKeys(children);\n      if (hasOwnProperty.call(config, \"key\")) {\n        children = getComponentNameFromType(type);\n        var keys = Object.keys(config).filter(function (k) {\n          return \"key\" !== k;\n        });\n        isStaticChildren =\n          0 < keys.length\n            ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\"\n            : \"{key: someKey}\";\n        didWarnAboutKeySpread[children + isStaticChildren] ||\n          ((keys =\n            0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\"),\n          console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ),\n          (didWarnAboutKeySpread[children + isStaticChildren] = !0));\n      }\n      children = null;\n      void 0 !== maybeKey &&\n        (checkKeyStringCoercion(maybeKey), (children = \"\" + maybeKey));\n      hasValidKey(config) &&\n        (checkKeyStringCoercion(config.key), (children = \"\" + config.key));\n      if (\"key\" in config) {\n        maybeKey = {};\n        for (var propName in config)\n          \"key\" !== propName && (maybeKey[propName] = config[propName]);\n      } else maybeKey = config;\n      children &&\n        defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type\n            ? type.displayName || type.name || \"Unknown\"\n            : type\n        );\n      return ReactElement(\n        type,\n        children,\n        self,\n        source,\n        getOwner(),\n        maybeKey,\n        debugStack,\n        debugTask\n      );\n    }\n    function validateChildKeys(node) {\n      \"object\" === typeof node &&\n        null !== node &&\n        node.$$typeof === REACT_ELEMENT_TYPE &&\n        node._store &&\n        (node._store.validated = 1);\n    }\n    var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"),\n      REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n    Symbol.for(\"react.provider\");\n    var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n      REACT_ACTIVITY_TYPE = Symbol.for(\"react.activity\"),\n      REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals =\n        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      isArrayImpl = Array.isArray,\n      createTask = console.createTask\n        ? console.createTask\n        : function () {\n            return null;\n          };\n    React = {\n      \"react-stack-bottom-frame\": function (callStackForError) {\n        return callStackForError();\n      }\n    };\n    var specialPropKeyWarningShown;\n    var didWarnAboutElementRef = {};\n    var unknownOwnerDebugStack = React[\"react-stack-bottom-frame\"].bind(\n      React,\n      UnknownOwner\n    )();\n    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));\n    var didWarnAboutKeySpread = {};\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.jsxDEV = function (\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self\n    ) {\n      var trackActualOwner =\n        1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;\n      return jsxDEVImpl(\n        type,\n        config,\n        maybeKey,\n        isStaticChildren,\n        source,\n        self,\n        trackActualOwner\n          ? Error(\"react-stack-top-frame\")\n          : unknownOwnerDebugStack,\n        trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask\n      );\n    };\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIi9ob21lL2tldi9yZXBvcy9PU1MvY2hpYS1zaW11bGF0b3ItdWkvc2ltdWxhdG9yLXVpL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/app-dynamic.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/app-dynamic.js ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return dynamic;\n    }\n}));\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _loadable = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./lazy-dynamic/loadable */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/lazy-dynamic/loadable.js\"));\nfunction dynamic(dynamicOptions, options) {\n    var _mergedOptions_loadableGenerated;\n    const loadableOptions = {};\n    if (typeof dynamicOptions === 'function') {\n        loadableOptions.loader = dynamicOptions;\n    }\n    const mergedOptions = {\n        ...loadableOptions,\n        ...options\n    };\n    return (0, _loadable.default)({\n        ...mergedOptions,\n        modules: (_mergedOptions_loadableGenerated = mergedOptions.loadableGenerated) == null ? void 0 : _mergedOptions_loadableGenerated.modules\n    });\n}\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n    Object.defineProperty(exports.default, '__esModule', {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=app-dynamic.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9hcHAtZHluYW1pYy5qcyIsIm1hcHBpbmdzIjoiOzs7OzJDQWtDQTs7O2VBQXdCQTs7OzsrRUFoQ0g7QUFnQ04sU0FBU0EsUUFDdEJDLGNBQTZDLEVBQzdDQyxPQUEyQjtRQWVoQkM7SUFiWCxNQUFNQyxrQkFBc0MsQ0FBQztJQUU3QyxJQUFJLE9BQU9ILG1CQUFtQixZQUFZO1FBQ3hDRyxnQkFBZ0JDLE1BQU0sR0FBR0o7SUFDM0I7SUFFQSxNQUFNRSxnQkFBZ0I7UUFDcEIsR0FBR0MsZUFBZTtRQUNsQixHQUFHRixPQUFPO0lBQ1o7SUFFQSxPQUFPSSxDQUFBQSxHQUFBQSxVQUFBQSxPQUFBQSxFQUFTO1FBQ2QsR0FBR0gsYUFBYTtRQUNoQkksT0FBTyxHQUFFSixtQ0FBQUEsY0FBY0ssaUJBQUFBLEtBQWlCLGdCQUEvQkwsaUNBQWlDSSxPQUFPO0lBQ25EO0FBQ0YiLCJzb3VyY2VzIjpbIi9ob21lL2tldi9yZXBvcy9zcmMvc2hhcmVkL2xpYi9hcHAtZHluYW1pYy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgdHlwZSB7IEpTWCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IExvYWRhYmxlIGZyb20gJy4vbGF6eS1keW5hbWljL2xvYWRhYmxlJ1xuXG5pbXBvcnQgdHlwZSB7XG4gIExvYWRhYmxlR2VuZXJhdGVkT3B0aW9ucyxcbiAgRHluYW1pY09wdGlvbnNMb2FkaW5nUHJvcHMsXG4gIExvYWRlcixcbiAgTG9hZGVyQ29tcG9uZW50LFxufSBmcm9tICcuL2xhenktZHluYW1pYy90eXBlcydcblxuZXhwb3J0IHtcbiAgdHlwZSBMb2FkYWJsZUdlbmVyYXRlZE9wdGlvbnMsXG4gIHR5cGUgRHluYW1pY09wdGlvbnNMb2FkaW5nUHJvcHMsXG4gIHR5cGUgTG9hZGVyLFxuICB0eXBlIExvYWRlckNvbXBvbmVudCxcbn1cblxuZXhwb3J0IHR5cGUgRHluYW1pY09wdGlvbnM8UCA9IHt9PiA9IExvYWRhYmxlR2VuZXJhdGVkT3B0aW9ucyAmIHtcbiAgbG9hZGluZz86ICgpID0+IEpTWC5FbGVtZW50IHwgbnVsbFxuICBsb2FkZXI/OiBMb2FkZXI8UD5cbiAgbG9hZGFibGVHZW5lcmF0ZWQ/OiBMb2FkYWJsZUdlbmVyYXRlZE9wdGlvbnNcbiAgbW9kdWxlcz86IHN0cmluZ1tdXG4gIHNzcj86IGJvb2xlYW5cbn1cblxuZXhwb3J0IHR5cGUgTG9hZGFibGVPcHRpb25zPFAgPSB7fT4gPSBEeW5hbWljT3B0aW9uczxQPlxuXG5leHBvcnQgdHlwZSBMb2FkYWJsZUZuPFAgPSB7fT4gPSAoXG4gIG9wdHM6IExvYWRhYmxlT3B0aW9uczxQPlxuKSA9PiBSZWFjdC5Db21wb25lbnRUeXBlPFA+XG5cbmV4cG9ydCB0eXBlIExvYWRhYmxlQ29tcG9uZW50PFAgPSB7fT4gPSBSZWFjdC5Db21wb25lbnRUeXBlPFA+XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGR5bmFtaWM8UCA9IHt9PihcbiAgZHluYW1pY09wdGlvbnM6IER5bmFtaWNPcHRpb25zPFA+IHwgTG9hZGVyPFA+LFxuICBvcHRpb25zPzogRHluYW1pY09wdGlvbnM8UD5cbik6IFJlYWN0LkNvbXBvbmVudFR5cGU8UD4ge1xuICBjb25zdCBsb2FkYWJsZU9wdGlvbnM6IExvYWRhYmxlT3B0aW9uczxQPiA9IHt9XG5cbiAgaWYgKHR5cGVvZiBkeW5hbWljT3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGxvYWRhYmxlT3B0aW9ucy5sb2FkZXIgPSBkeW5hbWljT3B0aW9uc1xuICB9XG5cbiAgY29uc3QgbWVyZ2VkT3B0aW9ucyA9IHtcbiAgICAuLi5sb2FkYWJsZU9wdGlvbnMsXG4gICAgLi4ub3B0aW9ucyxcbiAgfVxuXG4gIHJldHVybiBMb2FkYWJsZSh7XG4gICAgLi4ubWVyZ2VkT3B0aW9ucyxcbiAgICBtb2R1bGVzOiBtZXJnZWRPcHRpb25zLmxvYWRhYmxlR2VuZXJhdGVkPy5tb2R1bGVzLFxuICB9KVxufVxuIl0sIm5hbWVzIjpbImR5bmFtaWMiLCJkeW5hbWljT3B0aW9ucyIsIm9wdGlvbnMiLCJtZXJnZWRPcHRpb25zIiwibG9hZGFibGVPcHRpb25zIiwibG9hZGVyIiwiTG9hZGFibGUiLCJtb2R1bGVzIiwibG9hZGFibGVHZW5lcmF0ZWQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/app-dynamic.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/lazy-dynamic/dynamic-bailout-to-csr.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/lazy-dynamic/dynamic-bailout-to-csr.js ***!
  \**********************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/* __next_internal_client_entry_do_not_use__  cjs */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"BailoutToCSR\", ({\n    enumerable: true,\n    get: function() {\n        return BailoutToCSR;\n    }\n}));\nconst _bailouttocsr = __webpack_require__(/*! ./bailout-to-csr */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/lazy-dynamic/bailout-to-csr.js\");\nfunction BailoutToCSR(param) {\n    let { reason, children } = param;\n    if (false) {}\n    return children;\n} //# sourceMappingURL=dynamic-bailout-to-csr.js.map\n_c = BailoutToCSR;\nvar _c;\n$RefreshReg$(_c, \"BailoutToCSR\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9sYXp5LWR5bmFtaWMvZHluYW1pYy1iYWlsb3V0LXRvLWNzci5qcyIsIm1hcHBpbmdzIjoiOzs7O2dEQWNnQkE7OztlQUFBQTs7OzBDQVhrQjtBQVczQixzQkFBc0IsS0FBdUM7SUFBdkMsTUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQXFCLEdBQXZDO0lBQzNCLElBQUksS0FBNkIsRUFBRSxFQUVsQztJQUVELE9BQU9BO0FBQ1Q7S0FOZ0JGIiwic291cmNlcyI6WyIvaG9tZS9rZXYvc3JjL3NoYXJlZC9saWIvbGF6eS1keW5hbWljL2R5bmFtaWMtYmFpbG91dC10by1jc3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50J1xuXG5pbXBvcnQgdHlwZSB7IFJlYWN0RWxlbWVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQmFpbG91dFRvQ1NSRXJyb3IgfSBmcm9tICcuL2JhaWxvdXQtdG8tY3NyJ1xuXG5pbnRlcmZhY2UgQmFpbG91dFRvQ1NSUHJvcHMge1xuICByZWFzb246IHN0cmluZ1xuICBjaGlsZHJlbjogUmVhY3RFbGVtZW50XG59XG5cbi8qKlxuICogSWYgcmVuZGVyZWQgb24gdGhlIHNlcnZlciwgdGhpcyBjb21wb25lbnQgdGhyb3dzIGFuIGVycm9yXG4gKiB0byBzaWduYWwgTmV4dC5qcyB0aGF0IGl0IHNob3VsZCBiYWlsIG91dCB0byBjbGllbnQtc2lkZSByZW5kZXJpbmcgaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEJhaWxvdXRUb0NTUih7IHJlYXNvbiwgY2hpbGRyZW4gfTogQmFpbG91dFRvQ1NSUHJvcHMpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhyb3cgbmV3IEJhaWxvdXRUb0NTUkVycm9yKHJlYXNvbilcbiAgfVxuXG4gIHJldHVybiBjaGlsZHJlblxufVxuIl0sIm5hbWVzIjpbIkJhaWxvdXRUb0NTUiIsInJlYXNvbiIsImNoaWxkcmVuIiwid2luZG93IiwiQmFpbG91dFRvQ1NSRXJyb3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/lazy-dynamic/dynamic-bailout-to-csr.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/lazy-dynamic/loadable.js":
/*!********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/lazy-dynamic/loadable.js ***!
  \********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n}));\nconst _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\nconst _react = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nconst _dynamicbailouttocsr = __webpack_require__(/*! ./dynamic-bailout-to-csr */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/lazy-dynamic/dynamic-bailout-to-csr.js\");\nconst _preloadchunks = __webpack_require__(/*! ./preload-chunks */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/lazy-dynamic/preload-chunks.js\");\n// Normalize loader to return the module as form { default: Component } for `React.lazy`.\n// Also for backward compatible since next/dynamic allows to resolve a component directly with loader\n// Client component reference proxy need to be converted to a module.\nfunction convertModule(mod) {\n    // Check \"default\" prop before accessing it, as it could be client reference proxy that could break it reference.\n    // Cases:\n    // mod: { default: Component }\n    // mod: Component\n    // mod: { default: proxy(Component) }\n    // mod: proxy(Component)\n    const hasDefault = mod && 'default' in mod;\n    return {\n        default: hasDefault ? mod.default : mod\n    };\n}\nconst defaultOptions = {\n    loader: ()=>Promise.resolve(convertModule(()=>null)),\n    loading: null,\n    ssr: true\n};\nfunction Loadable(options) {\n    const opts = {\n        ...defaultOptions,\n        ...options\n    };\n    const Lazy = /*#__PURE__*/ (0, _react.lazy)(()=>opts.loader().then(convertModule));\n    const Loading = opts.loading;\n    function LoadableComponent(props) {\n        const fallbackElement = Loading ? /*#__PURE__*/ (0, _jsxruntime.jsx)(Loading, {\n            isLoading: true,\n            pastDelay: true,\n            error: null\n        }) : null;\n        // If it's non-SSR or provided a loading component, wrap it in a suspense boundary\n        const hasSuspenseBoundary = !opts.ssr || !!opts.loading;\n        const Wrap = hasSuspenseBoundary ? _react.Suspense : _react.Fragment;\n        const wrapProps = hasSuspenseBoundary ? {\n            fallback: fallbackElement\n        } : {};\n        const children = opts.ssr ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {\n            children: [\n                 false ? /*#__PURE__*/ 0 : null,\n                /*#__PURE__*/ (0, _jsxruntime.jsx)(Lazy, {\n                    ...props\n                })\n            ]\n        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_dynamicbailouttocsr.BailoutToCSR, {\n            reason: \"next/dynamic\",\n            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Lazy, {\n                ...props\n            })\n        });\n        return /*#__PURE__*/ (0, _jsxruntime.jsx)(Wrap, {\n            ...wrapProps,\n            children: children\n        });\n    }\n    LoadableComponent.displayName = 'LoadableComponent';\n    return LoadableComponent;\n}\n_c = Loadable;\nconst _default = Loadable; //# sourceMappingURL=loadable.js.map\nvar _c;\n$RefreshReg$(_c, \"Loadable\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9sYXp5LWR5bmFtaWMvbG9hZGFibGUuanMiLCJtYXBwaW5ncyI6Ijs7OzsyQ0E0RUE7OztlQUFBOzs7O21DQTVFeUM7aURBQ1o7MkNBRUM7QUFFOUIseUZBQXlGO0FBQ3pGLHFHQUFxRztBQUNyRyxxRUFBcUU7QUFDckUsU0FBU0EsY0FDUEMsR0FBNEQ7SUFJNUQsaUhBQWlIO0lBQ2pILFNBQVM7SUFDVCw4QkFBOEI7SUFDOUIsaUJBQWlCO0lBQ2pCLHFDQUFxQztJQUNyQyx3QkFBd0I7SUFDeEIsTUFBTUMsYUFBYUQsT0FBTyxhQUFhQTtJQUN2QyxPQUFPO1FBQ0xFLFNBQVNELGFBQ0pELElBQTJCRSxPQUFPLEdBQ2xDRjtJQUNQO0FBQ0Y7QUFFQSxNQUFNRyxpQkFBaUI7SUFDckJDLFFBQVEsSUFBTUMsUUFBUUMsT0FBTyxDQUFDUCxjQUFjLElBQU07SUFDbERRLFNBQVM7SUFDVEMsS0FBSztBQUNQO0FBU0Esa0JBQWtCRSxPQUF3QjtJQUN4QyxNQUFNQyxPQUFPO1FBQUUsR0FBR1IsY0FBYztRQUFFLEdBQUdPLE9BQU87SUFBQztJQUM3QyxNQUFNRSxPQUFBQSxXQUFBQSxHQUFPQyxDQUFBQSxHQUFBQSxPQUFBQSxJQUFBQSxFQUFLLElBQU1GLEtBQUtQLE1BQU0sR0FBR1UsSUFBSSxDQUFDZjtJQUMzQyxNQUFNZ0IsVUFBVUosS0FBS0osT0FBTztJQUU1QixTQUFTUyxrQkFBa0JDLEtBQVU7UUFDbkMsTUFBTUMsa0JBQWtCSCxVQUFBQSxXQUFBQSxHQUN0QixxQkFBQ0EsU0FBQUE7WUFBUUksV0FBVztZQUFNQyxXQUFXO1lBQU1DLE9BQU87YUFDaEQ7UUFFSixrRkFBa0Y7UUFDbEYsTUFBTUMsc0JBQXNCLENBQUNYLEtBQUtILEdBQUcsSUFBSSxDQUFDLENBQUNHLEtBQUtKLE9BQU87UUFDdkQsTUFBTWdCLE9BQU9ELHNCQUFzQkUsT0FBQUEsUUFBUSxHQUFHQyxPQUFBQSxRQUFRO1FBQ3RELE1BQU1DLFlBQVlKLHNCQUFzQjtZQUFFSyxVQUFVVDtRQUFnQixJQUFJLENBQUM7UUFDekUsTUFBTVUsV0FBV2pCLEtBQUtILEdBQUcsaUJBQ3ZCOztnQkFFRyxNQUE2QixHQUFYLGNBQ2pCLEMsR0FDRTs4QkFDSixxQkFBQ0ksTUFBQUE7b0JBQU0sR0FBR0ssS0FBSzs7O2FBR2pCLG1DQUFDZ0IscUJBQUFBLFlBQVk7WUFBQ0MsUUFBTztzQkFDbkIsbUNBQUN0QixNQUFBQTtnQkFBTSxHQUFHSyxLQUFLOzs7UUFJbkIscUJBQU8scUJBQUNNLE1BQUFBO1lBQU0sR0FBR0csU0FBUztzQkFBR0U7O0lBQy9CO0lBRUFaLGtCQUFrQm1CLFdBQVcsR0FBRztJQUVoQyxPQUFPbkI7QUFDVDtLQWxDU1A7TUFvQ1QsV0FBZUEiLCJzb3VyY2VzIjpbIi9ob21lL2tldi9zcmMvc2hhcmVkL2xpYi9sYXp5LWR5bmFtaWMvbG9hZGFibGUudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1c3BlbnNlLCBGcmFnbWVudCwgbGF6eSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQmFpbG91dFRvQ1NSIH0gZnJvbSAnLi9keW5hbWljLWJhaWxvdXQtdG8tY3NyJ1xuaW1wb3J0IHR5cGUgeyBDb21wb25lbnRNb2R1bGUgfSBmcm9tICcuL3R5cGVzJ1xuaW1wb3J0IHsgUHJlbG9hZENodW5rcyB9IGZyb20gJy4vcHJlbG9hZC1jaHVua3MnXG5cbi8vIE5vcm1hbGl6ZSBsb2FkZXIgdG8gcmV0dXJuIHRoZSBtb2R1bGUgYXMgZm9ybSB7IGRlZmF1bHQ6IENvbXBvbmVudCB9IGZvciBgUmVhY3QubGF6eWAuXG4vLyBBbHNvIGZvciBiYWNrd2FyZCBjb21wYXRpYmxlIHNpbmNlIG5leHQvZHluYW1pYyBhbGxvd3MgdG8gcmVzb2x2ZSBhIGNvbXBvbmVudCBkaXJlY3RseSB3aXRoIGxvYWRlclxuLy8gQ2xpZW50IGNvbXBvbmVudCByZWZlcmVuY2UgcHJveHkgbmVlZCB0byBiZSBjb252ZXJ0ZWQgdG8gYSBtb2R1bGUuXG5mdW5jdGlvbiBjb252ZXJ0TW9kdWxlPFA+KFxuICBtb2Q6IFJlYWN0LkNvbXBvbmVudFR5cGU8UD4gfCBDb21wb25lbnRNb2R1bGU8UD4gfCB1bmRlZmluZWRcbik6IHtcbiAgZGVmYXVsdDogUmVhY3QuQ29tcG9uZW50VHlwZTxQPlxufSB7XG4gIC8vIENoZWNrIFwiZGVmYXVsdFwiIHByb3AgYmVmb3JlIGFjY2Vzc2luZyBpdCwgYXMgaXQgY291bGQgYmUgY2xpZW50IHJlZmVyZW5jZSBwcm94eSB0aGF0IGNvdWxkIGJyZWFrIGl0IHJlZmVyZW5jZS5cbiAgLy8gQ2FzZXM6XG4gIC8vIG1vZDogeyBkZWZhdWx0OiBDb21wb25lbnQgfVxuICAvLyBtb2Q6IENvbXBvbmVudFxuICAvLyBtb2Q6IHsgZGVmYXVsdDogcHJveHkoQ29tcG9uZW50KSB9XG4gIC8vIG1vZDogcHJveHkoQ29tcG9uZW50KVxuICBjb25zdCBoYXNEZWZhdWx0ID0gbW9kICYmICdkZWZhdWx0JyBpbiBtb2RcbiAgcmV0dXJuIHtcbiAgICBkZWZhdWx0OiBoYXNEZWZhdWx0XG4gICAgICA/IChtb2QgYXMgQ29tcG9uZW50TW9kdWxlPFA+KS5kZWZhdWx0XG4gICAgICA6IChtb2QgYXMgUmVhY3QuQ29tcG9uZW50VHlwZTxQPiksXG4gIH1cbn1cblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGxvYWRlcjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKGNvbnZlcnRNb2R1bGUoKCkgPT4gbnVsbCkpLFxuICBsb2FkaW5nOiBudWxsLFxuICBzc3I6IHRydWUsXG59XG5cbmludGVyZmFjZSBMb2FkYWJsZU9wdGlvbnMge1xuICBsb2FkZXI/OiAoKSA9PiBQcm9taXNlPFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PiB8IENvbXBvbmVudE1vZHVsZTxhbnk+PlxuICBsb2FkaW5nPzogUmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+IHwgbnVsbFxuICBzc3I/OiBib29sZWFuXG4gIG1vZHVsZXM/OiBzdHJpbmdbXVxufVxuXG5mdW5jdGlvbiBMb2FkYWJsZShvcHRpb25zOiBMb2FkYWJsZU9wdGlvbnMpIHtcbiAgY29uc3Qgb3B0cyA9IHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfVxuICBjb25zdCBMYXp5ID0gbGF6eSgoKSA9PiBvcHRzLmxvYWRlcigpLnRoZW4oY29udmVydE1vZHVsZSkpXG4gIGNvbnN0IExvYWRpbmcgPSBvcHRzLmxvYWRpbmdcblxuICBmdW5jdGlvbiBMb2FkYWJsZUNvbXBvbmVudChwcm9wczogYW55KSB7XG4gICAgY29uc3QgZmFsbGJhY2tFbGVtZW50ID0gTG9hZGluZyA/IChcbiAgICAgIDxMb2FkaW5nIGlzTG9hZGluZz17dHJ1ZX0gcGFzdERlbGF5PXt0cnVlfSBlcnJvcj17bnVsbH0gLz5cbiAgICApIDogbnVsbFxuXG4gICAgLy8gSWYgaXQncyBub24tU1NSIG9yIHByb3ZpZGVkIGEgbG9hZGluZyBjb21wb25lbnQsIHdyYXAgaXQgaW4gYSBzdXNwZW5zZSBib3VuZGFyeVxuICAgIGNvbnN0IGhhc1N1c3BlbnNlQm91bmRhcnkgPSAhb3B0cy5zc3IgfHwgISFvcHRzLmxvYWRpbmdcbiAgICBjb25zdCBXcmFwID0gaGFzU3VzcGVuc2VCb3VuZGFyeSA/IFN1c3BlbnNlIDogRnJhZ21lbnRcbiAgICBjb25zdCB3cmFwUHJvcHMgPSBoYXNTdXNwZW5zZUJvdW5kYXJ5ID8geyBmYWxsYmFjazogZmFsbGJhY2tFbGVtZW50IH0gOiB7fVxuICAgIGNvbnN0IGNoaWxkcmVuID0gb3B0cy5zc3IgPyAoXG4gICAgICA8PlxuICAgICAgICB7LyogRHVyaW5nIFNTUiwgd2UgbmVlZCB0byBwcmVsb2FkIHRoZSBDU1MgZnJvbSB0aGUgZHluYW1pYyBjb21wb25lbnQgdG8gYXZvaWQgZmxhc2ggb2YgdW5zdHlsZWQgY29udGVudCAqL31cbiAgICAgICAge3R5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gKFxuICAgICAgICAgIDxQcmVsb2FkQ2h1bmtzIG1vZHVsZUlkcz17b3B0cy5tb2R1bGVzfSAvPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPExhenkgey4uLnByb3BzfSAvPlxuICAgICAgPC8+XG4gICAgKSA6IChcbiAgICAgIDxCYWlsb3V0VG9DU1IgcmVhc29uPVwibmV4dC9keW5hbWljXCI+XG4gICAgICAgIDxMYXp5IHsuLi5wcm9wc30gLz5cbiAgICAgIDwvQmFpbG91dFRvQ1NSPlxuICAgIClcblxuICAgIHJldHVybiA8V3JhcCB7Li4ud3JhcFByb3BzfT57Y2hpbGRyZW59PC9XcmFwPlxuICB9XG5cbiAgTG9hZGFibGVDb21wb25lbnQuZGlzcGxheU5hbWUgPSAnTG9hZGFibGVDb21wb25lbnQnXG5cbiAgcmV0dXJuIExvYWRhYmxlQ29tcG9uZW50XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvYWRhYmxlXG4iXSwibmFtZXMiOlsiY29udmVydE1vZHVsZSIsIm1vZCIsImhhc0RlZmF1bHQiLCJkZWZhdWx0IiwiZGVmYXVsdE9wdGlvbnMiLCJsb2FkZXIiLCJQcm9taXNlIiwicmVzb2x2ZSIsImxvYWRpbmciLCJzc3IiLCJMb2FkYWJsZSIsIm9wdGlvbnMiLCJvcHRzIiwiTGF6eSIsImxhenkiLCJ0aGVuIiwiTG9hZGluZyIsIkxvYWRhYmxlQ29tcG9uZW50IiwicHJvcHMiLCJmYWxsYmFja0VsZW1lbnQiLCJpc0xvYWRpbmciLCJwYXN0RGVsYXkiLCJlcnJvciIsImhhc1N1c3BlbnNlQm91bmRhcnkiLCJXcmFwIiwiU3VzcGVuc2UiLCJGcmFnbWVudCIsIndyYXBQcm9wcyIsImZhbGxiYWNrIiwiY2hpbGRyZW4iLCJ3aW5kb3ciLCJQcmVsb2FkQ2h1bmtzIiwibW9kdWxlSWRzIiwibW9kdWxlcyIsIkJhaWxvdXRUb0NTUiIsInJlYXNvbiIsImRpc3BsYXlOYW1lIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/lazy-dynamic/loadable.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/lazy-dynamic/preload-chunks.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/lazy-dynamic/preload-chunks.js ***!
  \**************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/* __next_internal_client_entry_do_not_use__  cjs */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"PreloadChunks\", ({\n    enumerable: true,\n    get: function() {\n        return PreloadChunks;\n    }\n}));\nconst _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\nconst _reactdom = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\nconst _workasyncstorageexternal = __webpack_require__(/*! ../../../server/app-render/work-async-storage.external */ \"(shared)/./node_modules/next/dist/server/app-render/work-async-storage.external.js\");\nconst _encodeuripath = __webpack_require__(/*! ../encode-uri-path */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/encode-uri-path.js\");\nfunction PreloadChunks(param) {\n    let { moduleIds } = param;\n    // Early return in client compilation and only load requestStore on server side\n    if (true) {\n        return null;\n    }\n    const workStore = _workasyncstorageexternal.workAsyncStorage.getStore();\n    if (workStore === undefined) {\n        return null;\n    }\n    const allFiles = [];\n    // Search the current dynamic call unique key id in react loadable manifest,\n    // and find the corresponding CSS files to preload\n    if (workStore.reactLoadableManifest && moduleIds) {\n        const manifest = workStore.reactLoadableManifest;\n        for (const key of moduleIds){\n            if (!manifest[key]) continue;\n            const chunks = manifest[key].files;\n            allFiles.push(...chunks);\n        }\n    }\n    if (allFiles.length === 0) {\n        return null;\n    }\n    const dplId =  false ? 0 : '';\n    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {\n        children: allFiles.map((chunk)=>{\n            const href = workStore.assetPrefix + \"/_next/\" + (0, _encodeuripath.encodeURIPath)(chunk) + dplId;\n            const isCss = chunk.endsWith('.css');\n            // If it's stylesheet we use `precedence` o help hoist with React Float.\n            // For stylesheets we actually need to render the CSS because nothing else is going to do it so it needs to be part of the component tree.\n            // The `preload` for stylesheet is not optional.\n            if (isCss) {\n                return /*#__PURE__*/ (0, _jsxruntime.jsx)(\"link\", {\n                    // @ts-ignore\n                    precedence: \"dynamic\",\n                    href: href,\n                    rel: \"stylesheet\",\n                    as: \"style\"\n                }, chunk);\n            } else {\n                // If it's script we use ReactDOM.preload to preload the resources\n                (0, _reactdom.preload)(href, {\n                    as: 'script',\n                    fetchPriority: 'low'\n                });\n                return null;\n            }\n        })\n    });\n} //# sourceMappingURL=preload-chunks.js.map\n_c = PreloadChunks;\nvar _c;\n$RefreshReg$(_c, \"PreloadChunks\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9sYXp5LWR5bmFtaWMvcHJlbG9hZC1jaHVua3MuanMiLCJtYXBwaW5ncyI6Ijs7OztpREFPZ0JBOzs7ZUFBQUE7Ozs7c0NBTFE7c0RBRVM7MkNBQ0g7QUFFdkIsdUJBQXVCLEtBSTdCO0lBSjZCLE1BQzVCQyxTQUFTLEVBR1YsR0FKNkI7SUFLNUIsK0VBQStFO0lBQy9FLElBQUksSUFBNkIsRUFBRTtRQUNqQyxPQUFPO0lBQ1Q7SUFFQSxNQUFNRSxZQUFZQywwQkFBQUEsZ0JBQWdCLENBQUNDLFFBQVE7SUFDM0MsSUFBSUYsY0FBY0csV0FBVztRQUMzQixPQUFPO0lBQ1Q7SUFFQSxNQUFNQyxXQUFXLEVBQUU7SUFFbkIsNEVBQTRFO0lBQzVFLGtEQUFrRDtJQUNsRCxJQUFJSixVQUFVSyxxQkFBcUIsSUFBSVAsV0FBVztRQUNoRCxNQUFNUSxXQUFXTixVQUFVSyxxQkFBcUI7UUFDaEQsS0FBSyxNQUFNRSxPQUFPVCxVQUFXO1lBQzNCLElBQUksQ0FBQ1EsUUFBUSxDQUFDQyxJQUFJLEVBQUU7WUFDcEIsTUFBTUMsU0FBU0YsUUFBUSxDQUFDQyxJQUFJLENBQUNFLEtBQUs7WUFDbENMLFNBQVNNLElBQUksSUFBSUY7UUFDbkI7SUFDRjtJQUVBLElBQUlKLFNBQVNPLE1BQU0sS0FBSyxHQUFHO1FBQ3pCLE9BQU87SUFDVDtJQUVBLE1BQU1DLFFBQVFDLE1BQThCLEdBQ3ZDLENBQXFDLEdBQ3RDO0lBRUoscUJBQ0U7a0JBQ0dULFNBQVNZLEdBQUcsQ0FBQyxDQUFDQztZQUNiLE1BQU1DLE9BQVVsQixVQUFVbUIsV0FBVyxHQUFDLFlBQVNDLENBQUFBLEdBQUFBLGVBQUFBLGFBQUFBLEVBQWNILFNBQVNMO1lBQ3RFLE1BQU1TLFFBQVFKLE1BQU1LLFFBQVEsQ0FBQztZQUM3Qix3RUFBd0U7WUFDeEUsMElBQTBJO1lBQzFJLGdEQUFnRDtZQUNoRCxJQUFJRCxPQUFPO2dCQUNULE9BQ0UsV0FERixHQUNFLHFCQUFDRSxRQUFBQTtvQkFFQyxhQUFhO29CQUNiQyxZQUFXO29CQUNYTixNQUFNQTtvQkFDTk8sS0FBSTtvQkFDSkMsSUFBRzttQkFMRVQ7WUFRWCxPQUFPO2dCQUNMLGtFQUFrRTtnQkFDbEVVLENBQUFBLEdBQUFBLFVBQUFBLE9BQUFBLEVBQVFULE1BQU07b0JBQ1pRLElBQUk7b0JBQ0pFLGVBQWU7Z0JBQ2pCO2dCQUNBLE9BQU87WUFDVDtRQUNGOztBQUdOO0tBbEVnQi9CIiwic291cmNlcyI6WyIvaG9tZS9rZXYvc3JjL3NoYXJlZC9saWIvbGF6eS1keW5hbWljL3ByZWxvYWQtY2h1bmtzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcblxuaW1wb3J0IHsgcHJlbG9hZCB9IGZyb20gJ3JlYWN0LWRvbSdcblxuaW1wb3J0IHsgd29ya0FzeW5jU3RvcmFnZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZlci9hcHAtcmVuZGVyL3dvcmstYXN5bmMtc3RvcmFnZS5leHRlcm5hbCdcbmltcG9ydCB7IGVuY29kZVVSSVBhdGggfSBmcm9tICcuLi9lbmNvZGUtdXJpLXBhdGgnXG5cbmV4cG9ydCBmdW5jdGlvbiBQcmVsb2FkQ2h1bmtzKHtcbiAgbW9kdWxlSWRzLFxufToge1xuICBtb2R1bGVJZHM6IHN0cmluZ1tdIHwgdW5kZWZpbmVkXG59KSB7XG4gIC8vIEVhcmx5IHJldHVybiBpbiBjbGllbnQgY29tcGlsYXRpb24gYW5kIG9ubHkgbG9hZCByZXF1ZXN0U3RvcmUgb24gc2VydmVyIHNpZGVcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGNvbnN0IHdvcmtTdG9yZSA9IHdvcmtBc3luY1N0b3JhZ2UuZ2V0U3RvcmUoKVxuICBpZiAod29ya1N0b3JlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgY29uc3QgYWxsRmlsZXMgPSBbXVxuXG4gIC8vIFNlYXJjaCB0aGUgY3VycmVudCBkeW5hbWljIGNhbGwgdW5pcXVlIGtleSBpZCBpbiByZWFjdCBsb2FkYWJsZSBtYW5pZmVzdCxcbiAgLy8gYW5kIGZpbmQgdGhlIGNvcnJlc3BvbmRpbmcgQ1NTIGZpbGVzIHRvIHByZWxvYWRcbiAgaWYgKHdvcmtTdG9yZS5yZWFjdExvYWRhYmxlTWFuaWZlc3QgJiYgbW9kdWxlSWRzKSB7XG4gICAgY29uc3QgbWFuaWZlc3QgPSB3b3JrU3RvcmUucmVhY3RMb2FkYWJsZU1hbmlmZXN0XG4gICAgZm9yIChjb25zdCBrZXkgb2YgbW9kdWxlSWRzKSB7XG4gICAgICBpZiAoIW1hbmlmZXN0W2tleV0pIGNvbnRpbnVlXG4gICAgICBjb25zdCBjaHVua3MgPSBtYW5pZmVzdFtrZXldLmZpbGVzXG4gICAgICBhbGxGaWxlcy5wdXNoKC4uLmNodW5rcylcbiAgICB9XG4gIH1cblxuICBpZiAoYWxsRmlsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGNvbnN0IGRwbElkID0gcHJvY2Vzcy5lbnYuTkVYVF9ERVBMT1lNRU5UX0lEXG4gICAgPyBgP2RwbD0ke3Byb2Nlc3MuZW52Lk5FWFRfREVQTE9ZTUVOVF9JRH1gXG4gICAgOiAnJ1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHthbGxGaWxlcy5tYXAoKGNodW5rKSA9PiB7XG4gICAgICAgIGNvbnN0IGhyZWYgPSBgJHt3b3JrU3RvcmUuYXNzZXRQcmVmaXh9L19uZXh0LyR7ZW5jb2RlVVJJUGF0aChjaHVuayl9JHtkcGxJZH1gXG4gICAgICAgIGNvbnN0IGlzQ3NzID0gY2h1bmsuZW5kc1dpdGgoJy5jc3MnKVxuICAgICAgICAvLyBJZiBpdCdzIHN0eWxlc2hlZXQgd2UgdXNlIGBwcmVjZWRlbmNlYCBvIGhlbHAgaG9pc3Qgd2l0aCBSZWFjdCBGbG9hdC5cbiAgICAgICAgLy8gRm9yIHN0eWxlc2hlZXRzIHdlIGFjdHVhbGx5IG5lZWQgdG8gcmVuZGVyIHRoZSBDU1MgYmVjYXVzZSBub3RoaW5nIGVsc2UgaXMgZ29pbmcgdG8gZG8gaXQgc28gaXQgbmVlZHMgdG8gYmUgcGFydCBvZiB0aGUgY29tcG9uZW50IHRyZWUuXG4gICAgICAgIC8vIFRoZSBgcHJlbG9hZGAgZm9yIHN0eWxlc2hlZXQgaXMgbm90IG9wdGlvbmFsLlxuICAgICAgICBpZiAoaXNDc3MpIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGxpbmtcbiAgICAgICAgICAgICAga2V5PXtjaHVua31cbiAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICBwcmVjZWRlbmNlPVwiZHluYW1pY1wiXG4gICAgICAgICAgICAgIGhyZWY9e2hyZWZ9XG4gICAgICAgICAgICAgIHJlbD1cInN0eWxlc2hlZXRcIlxuICAgICAgICAgICAgICBhcz1cInN0eWxlXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIGl0J3Mgc2NyaXB0IHdlIHVzZSBSZWFjdERPTS5wcmVsb2FkIHRvIHByZWxvYWQgdGhlIHJlc291cmNlc1xuICAgICAgICAgIHByZWxvYWQoaHJlZiwge1xuICAgICAgICAgICAgYXM6ICdzY3JpcHQnLFxuICAgICAgICAgICAgZmV0Y2hQcmlvcml0eTogJ2xvdycsXG4gICAgICAgICAgfSlcbiAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9XG4gICAgICB9KX1cbiAgICA8Lz5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIlByZWxvYWRDaHVua3MiLCJtb2R1bGVJZHMiLCJ3aW5kb3ciLCJ3b3JrU3RvcmUiLCJ3b3JrQXN5bmNTdG9yYWdlIiwiZ2V0U3RvcmUiLCJ1bmRlZmluZWQiLCJhbGxGaWxlcyIsInJlYWN0TG9hZGFibGVNYW5pZmVzdCIsIm1hbmlmZXN0Iiwia2V5IiwiY2h1bmtzIiwiZmlsZXMiLCJwdXNoIiwibGVuZ3RoIiwiZHBsSWQiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9ERVBMT1lNRU5UX0lEIiwibWFwIiwiY2h1bmsiLCJocmVmIiwiYXNzZXRQcmVmaXgiLCJlbmNvZGVVUklQYXRoIiwiaXNDc3MiLCJlbmRzV2l0aCIsImxpbmsiLCJwcmVjZWRlbmNlIiwicmVsIiwiYXMiLCJwcmVsb2FkIiwiZmV0Y2hQcmlvcml0eSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/lazy-dynamic/preload-chunks.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/components/output.tsx":
/*!***************************************!*\
  !*** ./src/app/components/output.tsx ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nconst Output = (param)=>{\n    let { puzzleHash, puzzleAddress, cost, errorMessage, conditions } = param;\n    _s();\n    const [copiedField, setCopiedField] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const handleCopy = (text, field)=>{\n        if (text) {\n            navigator.clipboard.writeText(text).then(()=>{\n                setCopiedField(field);\n                setTimeout(()=>setCopiedField(null), 2000);\n            });\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex flex-col h-full bg-[#1e1e1e] rounded border border-[#333] text-sm text-white font-mono p-4 space-y-3 overflow-auto\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex items-center gap-2\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        className: \"font-semibold text-gray-300\",\n                        children: \"Puzzle Hash:\"\n                    }, void 0, false, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                        lineNumber: 36,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        className: \"text-green-400 break-all\",\n                        children: puzzleHash || \"\"\n                    }, void 0, false, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                        lineNumber: 37,\n                        columnNumber: 9\n                    }, undefined),\n                    puzzleHash && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: ()=>handleCopy(puzzleHash, \"puzzleHash\"),\n                        className: \"text-blue-400 hover:underline text-xs\",\n                        children: copiedField === \"puzzleHash\" ? \"Copied!\" : \"Copy\"\n                    }, void 0, false, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                        lineNumber: 39,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                lineNumber: 35,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex items-center gap-2\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        className: \"font-semibold text-gray-300\",\n                        children: \"Puzzle Address:\"\n                    }, void 0, false, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                        lineNumber: 50,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        className: \"text-green-400 break-all\",\n                        children: puzzleAddress || \"\"\n                    }, void 0, false, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                        lineNumber: 51,\n                        columnNumber: 9\n                    }, undefined),\n                    puzzleAddress && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: ()=>handleCopy(puzzleAddress, \"puzzleAddress\"),\n                        className: \"text-blue-400 hover:underline text-xs\",\n                        children: copiedField === \"puzzleAddress\" ? \"Copied!\" : \"Copy\"\n                    }, void 0, false, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                        lineNumber: 53,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                lineNumber: 49,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"font-semibold text-gray-300 underline mb-1\",\n                        children: \"Run Output\"\n                    }, void 0, false, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                        lineNumber: 64,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-start gap-2\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                className: \"font-semibold text-gray-300\",\n                                children: \"Conditions:\"\n                            }, void 0, false, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                                lineNumber: 68,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                className: \"text-green-400 break-all flex-1\",\n                                children: conditions ? conditions.unparse() : \"No output yet.\"\n                            }, void 0, false, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                                lineNumber: 69,\n                                columnNumber: 11\n                            }, undefined),\n                            conditions && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>handleCopy(conditions.unparse(), \"conditions\"),\n                                className: \"text-blue-400 hover:underline text-xs\",\n                                children: copiedField === \"conditions\" ? \"Copied!\" : \"Copy\"\n                            }, void 0, false, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                                lineNumber: 73,\n                                columnNumber: 13\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                        lineNumber: 67,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-center gap-2\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                className: \"font-semibold text-gray-300\",\n                                children: \"Cost:\"\n                            }, void 0, false, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                                lineNumber: 84,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                className: \"text-green-400\",\n                                children: cost !== null && cost !== void 0 ? cost : \"\"\n                            }, void 0, false, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                                lineNumber: 85,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                        lineNumber: 83,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-start gap-2\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                className: \"font-semibold text-gray-300\",\n                                children: \"Error:\"\n                            }, void 0, false, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                                lineNumber: 90,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                className: \"text-green-400 whitespace-pre-wrap break-all\",\n                                children: errorMessage !== null && errorMessage !== void 0 ? errorMessage : \"\"\n                            }, void 0, false, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                                lineNumber: 91,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                        lineNumber: 89,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n                lineNumber: 63,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/output.tsx\",\n        lineNumber: 33,\n        columnNumber: 5\n    }, undefined);\n};\n_s(Output, \"kNxAVcE58ZSBLegF2sBuEyY2bmc=\");\n_c = Output;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Output);\nvar _c;\n$RefreshReg$(_c, \"Output\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvY29tcG9uZW50cy9vdXRwdXQudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUN3QztBQVl4QyxNQUFNRSxTQUFnQztRQUFDLEVBQ3JDQyxVQUFVLEVBQ1ZDLGFBQWEsRUFDYkMsSUFBSSxFQUNKQyxZQUFZLEVBQ1pDLFVBQVUsRUFDWDs7SUFDQyxNQUFNLENBQUNDLGFBQWFDLGVBQWUsR0FBR1IsK0NBQVFBLENBQWdCO0lBRTlELE1BQU1TLGFBQWEsQ0FBQ0MsTUFBY0M7UUFDaEMsSUFBSUQsTUFBTTtZQUNSRSxVQUFVQyxTQUFTLENBQUNDLFNBQVMsQ0FBQ0osTUFBTUssSUFBSSxDQUFDO2dCQUN2Q1AsZUFBZUc7Z0JBQ2ZLLFdBQVcsSUFBTVIsZUFBZSxPQUFPO1lBQ3pDO1FBQ0Y7SUFDRjtJQUVBLHFCQUNFLDhEQUFDUztRQUFJQyxXQUFVOzswQkFFYiw4REFBQ0Q7Z0JBQUlDLFdBQVU7O2tDQUNiLDhEQUFDQzt3QkFBS0QsV0FBVTtrQ0FBOEI7Ozs7OztrQ0FDOUMsOERBQUNDO3dCQUFLRCxXQUFVO2tDQUE0QmhCLGNBQWM7Ozs7OztvQkFDekRBLDRCQUNDLDhEQUFDa0I7d0JBQ0NDLFNBQVMsSUFBTVosV0FBV1AsWUFBWTt3QkFDdENnQixXQUFVO2tDQUVUWCxnQkFBZ0IsZUFBZSxZQUFZOzs7Ozs7Ozs7Ozs7MEJBTWxELDhEQUFDVTtnQkFBSUMsV0FBVTs7a0NBQ2IsOERBQUNDO3dCQUFLRCxXQUFVO2tDQUE4Qjs7Ozs7O2tDQUM5Qyw4REFBQ0M7d0JBQUtELFdBQVU7a0NBQTRCZixpQkFBaUI7Ozs7OztvQkFDNURBLCtCQUNDLDhEQUFDaUI7d0JBQ0NDLFNBQVMsSUFBTVosV0FBV04sZUFBZTt3QkFDekNlLFdBQVU7a0NBRVRYLGdCQUFnQixrQkFBa0IsWUFBWTs7Ozs7Ozs7Ozs7OzBCQU1yRCw4REFBQ1U7O2tDQUNDLDhEQUFDQTt3QkFBSUMsV0FBVTtrQ0FBNkM7Ozs7OztrQ0FHNUQsOERBQUNEO3dCQUFJQyxXQUFVOzswQ0FDYiw4REFBQ0M7Z0NBQUtELFdBQVU7MENBQThCOzs7Ozs7MENBQzlDLDhEQUFDQztnQ0FBS0QsV0FBVTswQ0FDYlosYUFBYUEsV0FBV2dCLE9BQU8sS0FBSzs7Ozs7OzRCQUV0Q2hCLDRCQUNDLDhEQUFDYztnQ0FDQ0MsU0FBUyxJQUFNWixXQUFXSCxXQUFXZ0IsT0FBTyxJQUFJO2dDQUNoREosV0FBVTswQ0FFVFgsZ0JBQWdCLGVBQWUsWUFBWTs7Ozs7Ozs7Ozs7O2tDQU1sRCw4REFBQ1U7d0JBQUlDLFdBQVU7OzBDQUNiLDhEQUFDQztnQ0FBS0QsV0FBVTswQ0FBOEI7Ozs7OzswQ0FDOUMsOERBQUNDO2dDQUFLRCxXQUFVOzBDQUFrQmQsaUJBQUFBLGtCQUFBQSxPQUFROzs7Ozs7Ozs7Ozs7a0NBSTVDLDhEQUFDYTt3QkFBSUMsV0FBVTs7MENBQ2IsOERBQUNDO2dDQUFLRCxXQUFVOzBDQUE4Qjs7Ozs7OzBDQUM5Qyw4REFBQ0M7Z0NBQUtELFdBQVU7MENBQ2JiLHlCQUFBQSwwQkFBQUEsZUFBZ0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU03QjtHQXBGTUo7S0FBQUE7QUFzRk4saUVBQWVBLE1BQU1BLEVBQUMiLCJzb3VyY2VzIjpbIi9ob21lL2tldi9yZXBvcy9PU1MvY2hpYS1zaW11bGF0b3ItdWkvc2ltdWxhdG9yLXVpL3NyYy9hcHAvY29tcG9uZW50cy9vdXRwdXQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbnRlcmZhY2UgT3V0cHV0UHJvcHMge1xuICBwdXp6bGVIYXNoPzogc3RyaW5nO1xuICBwdXp6bGVBZGRyZXNzPzogc3RyaW5nO1xuICBjb3N0PzogbnVtYmVyIHwgc3RyaW5nO1xuICBlcnJvck1lc3NhZ2U/OiBzdHJpbmc7XG4gIGNvbmRpdGlvbnM/OiB7XG4gICAgdW5wYXJzZTogKCkgPT4gc3RyaW5nO1xuICB9IHwgbnVsbDtcbn1cblxuY29uc3QgT3V0cHV0OiBSZWFjdC5GQzxPdXRwdXRQcm9wcz4gPSAoe1xuICBwdXp6bGVIYXNoLFxuICBwdXp6bGVBZGRyZXNzLFxuICBjb3N0LFxuICBlcnJvck1lc3NhZ2UsXG4gIGNvbmRpdGlvbnMsXG59KSA9PiB7XG4gIGNvbnN0IFtjb3BpZWRGaWVsZCwgc2V0Q29waWVkRmllbGRdID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XG5cbiAgY29uc3QgaGFuZGxlQ29weSA9ICh0ZXh0OiBzdHJpbmcsIGZpZWxkOiBzdHJpbmcpID0+IHtcbiAgICBpZiAodGV4dCkge1xuICAgICAgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGV4dCkudGhlbigoKSA9PiB7XG4gICAgICAgIHNldENvcGllZEZpZWxkKGZpZWxkKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBzZXRDb3BpZWRGaWVsZChudWxsKSwgMjAwMCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgaC1mdWxsIGJnLVsjMWUxZTFlXSByb3VuZGVkIGJvcmRlciBib3JkZXItWyMzMzNdIHRleHQtc20gdGV4dC13aGl0ZSBmb250LW1vbm8gcC00IHNwYWNlLXktMyBvdmVyZmxvdy1hdXRvXCI+XG4gICAgICB7LyogUHV6emxlIEhhc2ggKi99XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZvbnQtc2VtaWJvbGQgdGV4dC1ncmF5LTMwMFwiPlB1enpsZSBIYXNoOjwvc3Bhbj5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1ncmVlbi00MDAgYnJlYWstYWxsXCI+e3B1enpsZUhhc2ggfHwgXCJcIn08L3NwYW4+XG4gICAgICAgIHtwdXp6bGVIYXNoICYmIChcbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVDb3B5KHB1enpsZUhhc2gsIFwicHV6emxlSGFzaFwiKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtYmx1ZS00MDAgaG92ZXI6dW5kZXJsaW5lIHRleHQteHNcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtjb3BpZWRGaWVsZCA9PT0gXCJwdXp6bGVIYXNoXCIgPyBcIkNvcGllZCFcIiA6IFwiQ29weVwifVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG5cbiAgICAgIHsvKiBQdXp6bGUgQWRkcmVzcyAqL31cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZm9udC1zZW1pYm9sZCB0ZXh0LWdyYXktMzAwXCI+UHV6emxlIEFkZHJlc3M6PC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWdyZWVuLTQwMCBicmVhay1hbGxcIj57cHV6emxlQWRkcmVzcyB8fCBcIlwifTwvc3Bhbj5cbiAgICAgICAge3B1enpsZUFkZHJlc3MgJiYgKFxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUNvcHkocHV6emxlQWRkcmVzcywgXCJwdXp6bGVBZGRyZXNzXCIpfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1ibHVlLTQwMCBob3Zlcjp1bmRlcmxpbmUgdGV4dC14c1wiXG4gICAgICAgICAgPlxuICAgICAgICAgICAge2NvcGllZEZpZWxkID09PSBcInB1enpsZUFkZHJlc3NcIiA/IFwiQ29waWVkIVwiIDogXCJDb3B5XCJ9XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cblxuICAgICAgey8qIFJ1biBPdXRwdXQgKi99XG4gICAgICA8ZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvbnQtc2VtaWJvbGQgdGV4dC1ncmF5LTMwMCB1bmRlcmxpbmUgbWItMVwiPlJ1biBPdXRwdXQ8L2Rpdj5cblxuICAgICAgICB7LyogQ29uZGl0aW9ucyAqL31cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLXN0YXJ0IGdhcC0yXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZm9udC1zZW1pYm9sZCB0ZXh0LWdyYXktMzAwXCI+Q29uZGl0aW9uczo8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1ncmVlbi00MDAgYnJlYWstYWxsIGZsZXgtMVwiPlxuICAgICAgICAgICAge2NvbmRpdGlvbnMgPyBjb25kaXRpb25zLnVucGFyc2UoKSA6IFwiTm8gb3V0cHV0IHlldC5cIn1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAge2NvbmRpdGlvbnMgJiYgKFxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVDb3B5KGNvbmRpdGlvbnMudW5wYXJzZSgpLCBcImNvbmRpdGlvbnNcIil9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtYmx1ZS00MDAgaG92ZXI6dW5kZXJsaW5lIHRleHQteHNcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Y29waWVkRmllbGQgPT09IFwiY29uZGl0aW9uc1wiID8gXCJDb3BpZWQhXCIgOiBcIkNvcHlcIn1cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIHsvKiBDb3N0ICovfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZm9udC1zZW1pYm9sZCB0ZXh0LWdyYXktMzAwXCI+Q29zdDo8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1ncmVlbi00MDBcIj57Y29zdCA/PyBcIlwifTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgey8qIEVycm9yICovfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtc3RhcnQgZ2FwLTJcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmb250LXNlbWlib2xkIHRleHQtZ3JheS0zMDBcIj5FcnJvcjo8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1ncmVlbi00MDAgd2hpdGVzcGFjZS1wcmUtd3JhcCBicmVhay1hbGxcIj5cbiAgICAgICAgICAgIHtlcnJvck1lc3NhZ2UgPz8gXCJcIn1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBPdXRwdXQ7XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VTdGF0ZSIsIk91dHB1dCIsInB1enpsZUhhc2giLCJwdXp6bGVBZGRyZXNzIiwiY29zdCIsImVycm9yTWVzc2FnZSIsImNvbmRpdGlvbnMiLCJjb3BpZWRGaWVsZCIsInNldENvcGllZEZpZWxkIiwiaGFuZGxlQ29weSIsInRleHQiLCJmaWVsZCIsIm5hdmlnYXRvciIsImNsaXBib2FyZCIsIndyaXRlVGV4dCIsInRoZW4iLCJzZXRUaW1lb3V0IiwiZGl2IiwiY2xhc3NOYW1lIiwic3BhbiIsImJ1dHRvbiIsIm9uQ2xpY2siLCJ1bnBhcnNlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/components/output.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/components/parameters.tsx":
/*!*******************************************!*\
  !*** ./src/app/components/parameters.tsx ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Parameters)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _barrel_optimize_names_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=XCircle!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/circle-x.js\");\n/* harmony import */ var chia_wallet_sdk_wasm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! chia-wallet-sdk-wasm */ \"(app-pages-browser)/./node_modules/chia-wallet-sdk-wasm/chia_wallet_sdk_wasm.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([chia_wallet_sdk_wasm__WEBPACK_IMPORTED_MODULE_2__]);\nchia_wallet_sdk_wasm__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\nconst { Clvm, sha256, Address, toHex } = chia_wallet_sdk_wasm__WEBPACK_IMPORTED_MODULE_2__;\nfunction Parameters(param) {\n    let { setProgramParameters, setProgramCurriedParameters } = param;\n    _s();\n    const clvm = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"Parameters.useMemo[clvm]\": ()=>new Clvm()\n    }[\"Parameters.useMemo[clvm]\"], []);\n    const [parameterType, setParameterType] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('Text');\n    const [parameterValue, setParameterValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [parameters, setParameters] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [curriedParameters, setCurriedParameters] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [activeTab, setActiveTab] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('parameters');\n    const [parsedParams, setParsedParams] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Parameters.useEffect\": ()=>{\n            const activeList = activeTab === 'parameters' ? parameters : curriedParameters;\n            const parsed = activeList.map({\n                \"Parameters.useEffect.parsed\": (param)=>{\n                    let displayValue = '';\n                    try {\n                        if (param.type === 'Text' || param.type === 'Bool' || param.type === 'Int') {\n                            var _param_originalValue;\n                            displayValue = (_param_originalValue = param.originalValue) !== null && _param_originalValue !== void 0 ? _param_originalValue : param.value.toString();\n                        } else if (param.type === 'Nil') {\n                            displayValue = 'Nil';\n                        } else if (param.type === 'Address') {\n                            return param;\n                        } else {\n                            displayValue = param.value.unparse().replace(/\"/g, '');\n                        }\n                    } catch (e) {\n                        try {\n                            displayValue = param.value.toString();\n                        } catch (e) {\n                            displayValue = '[unparse error]';\n                        }\n                    }\n                    return {\n                        ...param,\n                        displayValue\n                    };\n                }\n            }[\"Parameters.useEffect.parsed\"]);\n            setParsedParams(parsed);\n        }\n    }[\"Parameters.useEffect\"], [\n        parameters,\n        curriedParameters,\n        activeTab\n    ]);\n    const moveParameter = (index, direction, isCurried)=>{\n        const list = isCurried ? [\n            ...curriedParameters\n        ] : [\n            ...parameters\n        ];\n        const swapIndex = direction === 'up' ? index - 1 : index + 1;\n        if (swapIndex < 0 || swapIndex >= list.length) return;\n        [list[index], list[swapIndex]] = [\n            list[swapIndex],\n            list[index]\n        ];\n        if (isCurried) {\n            setCurriedParameters(list);\n            setProgramCurriedParameters(list);\n        } else {\n            setParameters(list);\n            setProgramParameters(list);\n        }\n    };\n    const handleAddParameter = (isCurried)=>{\n        let newParameter = {};\n        try {\n            switch(parameterType){\n                case 'SHA256':\n                    {\n                        const textAtom = clvm.string(parameterValue);\n                        const hashBytes = sha256(textAtom.toAtom());\n                        const hash = clvm.atom(hashBytes);\n                        newParameter = {\n                            type: 'SHA256',\n                            value: hash,\n                            originalValue: parameterValue\n                        };\n                        break;\n                    }\n                case 'Text':\n                    {\n                        const hashBytes1 = clvm.string(parameterValue).toAtom();\n                        const hashAtom1 = clvm.atom(hashBytes1);\n                        newParameter = {\n                            type: 'Text',\n                            value: hashAtom1,\n                            originalValue: parameterValue\n                        };\n                        break;\n                    }\n                case 'Nil':\n                    newParameter = {\n                        type: 'Nil',\n                        value: 'value does not matter'\n                    };\n                    break;\n                case 'Bool':\n                    const boolVal = parameterValue.trim().toLowerCase() === 'true';\n                    newParameter = {\n                        type: 'Bool',\n                        value: clvm.bool(boolVal),\n                        originalValue: parameterValue\n                    };\n                    break;\n                case 'Int':\n                    {\n                        const val = parseInt(parameterValue);\n                        if (isNaN(val)) return;\n                        newParameter = {\n                            type: 'Int',\n                            value: clvm.int(BigInt(val)),\n                            originalValue: parameterValue\n                        };\n                        break;\n                    }\n                case 'Address':\n                    {\n                        const hash = Address.decode(parameterValue).puzzleHash;\n                        const hashProgram = clvm.atom(hash);\n                        const s = toHex(hash);\n                        newParameter = {\n                            type: 'Address',\n                            value: hashProgram,\n                            originalValue: parameterValue,\n                            puzzleHashHex: s\n                        };\n                        break;\n                    }\n            }\n        } catch (err) {\n            alert('Invalid input or type error');\n            console.error(err);\n            return;\n        }\n        const typedParam = newParameter;\n        const updated = isCurried ? [\n            ...curriedParameters,\n            typedParam\n        ] : [\n            ...parameters,\n            typedParam\n        ];\n        if (isCurried) {\n            setCurriedParameters(updated);\n            setProgramCurriedParameters(updated);\n        } else {\n            setParameters(updated);\n            setProgramParameters(updated);\n        }\n        setParameterValue('');\n    };\n    const handleRemoveParameter = (index, isCurried)=>{\n        const updated = isCurried ? curriedParameters.filter((_, i)=>i !== index) : parameters.filter((_, i)=>i !== index);\n        if (isCurried) {\n            setCurriedParameters(updated);\n            setProgramCurriedParameters(updated);\n        } else {\n            setParameters(updated);\n            setProgramParameters(updated);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"bg-[#1e1e1e] text-white p-4 min-h-[200px] overflow-auto border-r border-[#333]\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                className: \"text-xl font-semibold mb-4\",\n                children: \"Parameters\"\n            }, void 0, false, {\n                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                lineNumber: 169,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex mb-4 rounded overflow-hidden border border-[#333]\",\n                children: [\n                    'parameters',\n                    'curriedParameters'\n                ].map((tab)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: ()=>setActiveTab(tab),\n                        className: \"w-1/2 py-2 text-sm font-medium transition-colors \".concat(activeTab === tab ? 'bg-blue-600 text-white' : 'bg-[#2d2d2d] text-gray-400 hover:bg-[#3a3a3a]'),\n                        children: tab === 'parameters' ? 'Parameters' : 'Curried Parameters'\n                    }, tab, false, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                        lineNumber: 173,\n                        columnNumber: 11\n                    }, this))\n            }, void 0, false, {\n                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                lineNumber: 171,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"mb-4\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex flex-col gap-2\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                            value: parameterType,\n                            onChange: (e)=>setParameterType(e.target.value),\n                            className: \"p-2 bg-[#2d2d2d] text-white border border-[#444] rounded\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                    value: \"Text\",\n                                    children: \"Text\"\n                                }, void 0, false, {\n                                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                    lineNumber: 194,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                    value: \"Int\",\n                                    children: \"Int\"\n                                }, void 0, false, {\n                                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                    lineNumber: 195,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                    value: \"SHA256\",\n                                    children: \"SHA256\"\n                                }, void 0, false, {\n                                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                    lineNumber: 196,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                    value: \"Bool\",\n                                    children: \"Boolean\"\n                                }, void 0, false, {\n                                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                    lineNumber: 197,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                    value: \"Nil\",\n                                    children: \"Nil\"\n                                }, void 0, false, {\n                                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                    lineNumber: 198,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                    value: \"Address\",\n                                    children: \"Address\"\n                                }, void 0, false, {\n                                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                    lineNumber: 199,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                            lineNumber: 189,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                            type: \"text\",\n                            value: parameterValue,\n                            onChange: (e)=>setParameterValue(e.target.value),\n                            onKeyDown: (e)=>{\n                                if (e.key === 'Enter') {\n                                    e.preventDefault();\n                                    handleAddParameter(activeTab === 'curriedParameters');\n                                }\n                            },\n                            placeholder: \"Enter value and press Enter\",\n                            className: \"px-3 py-2 bg-[#2d2d2d] text-white border border-[#444] rounded\"\n                        }, void 0, false, {\n                            fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                            lineNumber: 202,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>handleAddParameter(activeTab === 'curriedParameters'),\n                            className: \"cursor-pointer text-blue-500 text-sm underline hover:text-blue-400 mt-1 self-end\",\n                            children: \"Add\"\n                        }, void 0, false, {\n                            fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                            lineNumber: 216,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                    lineNumber: 188,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                lineNumber: 187,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"overflow-auto max-h-[60vh] border border-[#333] rounded\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"table\", {\n                    className: \"w-full table-auto text-sm\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"thead\", {\n                            className: \"bg-[#2d2d2d] text-gray-300\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tr\", {\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                        className: \"px-4 py-2 text-left border-b border-[#333]\",\n                                        children: \"Type\"\n                                    }, void 0, false, {\n                                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                        lineNumber: 229,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                        className: \"px-4 py-2 text-left border-b border-[#333]\",\n                                        children: \"Value\"\n                                    }, void 0, false, {\n                                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                        lineNumber: 230,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                        className: \"px-4 py-2 text-left border-b border-[#333]\",\n                                        children: \"Action\"\n                                    }, void 0, false, {\n                                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                        lineNumber: 231,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                lineNumber: 228,\n                                columnNumber: 13\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                            lineNumber: 227,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tbody\", {\n                            children: parsedParams.length > 0 ? parsedParams.map((param, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tr\", {\n                                    className: \"border-t border-[#333] hover:bg-[#2a2a2a]\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                            className: \"px-4 py-2\",\n                                            children: param.type\n                                        }, void 0, false, {\n                                            fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                            lineNumber: 241,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                            className: \"px-4 py-2\",\n                                            children: param.type === 'Address' ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                        className: \"text-white\",\n                                                        children: [\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                                                children: \"Address:\"\n                                                            }, void 0, false, {\n                                                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                                                lineNumber: 246,\n                                                                columnNumber: 27\n                                                            }, this),\n                                                            \" \",\n                                                            param.originalValue\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                                        lineNumber: 245,\n                                                        columnNumber: 25\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                        className: \"text-gray-400 text-xs\",\n                                                        children: [\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                                                children: \"Puzzle Hash:\"\n                                                            }, void 0, false, {\n                                                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                                                lineNumber: 249,\n                                                                columnNumber: 27\n                                                            }, this),\n                                                            \" \",\n                                                            param.puzzleHashHex\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                                        lineNumber: 248,\n                                                        columnNumber: 25\n                                                    }, this)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                                lineNumber: 244,\n                                                columnNumber: 23\n                                            }, this) : param.displayValue\n                                        }, void 0, false, {\n                                            fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                            lineNumber: 242,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                            className: \"px-4 py-2 flex gap-2\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                    onClick: ()=>handleRemoveParameter(index, activeTab === 'curriedParameters'),\n                                                    className: \"text-red-400 hover:text-red-600\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                        className: \"w-5 h-5\"\n                                                    }, void 0, false, {\n                                                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                                        lineNumber: 263,\n                                                        columnNumber: 23\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                                    lineNumber: 257,\n                                                    columnNumber: 21\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                    onClick: ()=>moveParameter(index, 'up', activeTab === 'curriedParameters'),\n                                                    className: \"hover:text-blue-400\",\n                                                    children: \"↑\"\n                                                }, void 0, false, {\n                                                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                                    lineNumber: 265,\n                                                    columnNumber: 21\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                    onClick: ()=>moveParameter(index, 'down', activeTab === 'curriedParameters'),\n                                                    className: \"hover:text-blue-400\",\n                                                    children: \"↓\"\n                                                }, void 0, false, {\n                                                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                                    lineNumber: 273,\n                                                    columnNumber: 21\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                            lineNumber: 256,\n                                            columnNumber: 19\n                                        }, this)\n                                    ]\n                                }, index, true, {\n                                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                    lineNumber: 237,\n                                    columnNumber: 17\n                                }, this)) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tr\", {\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                    colSpan: 3,\n                                    className: \"px-4 py-4 text-center text-gray-500 italic\",\n                                    children: [\n                                        \"No \",\n                                        activeTab === 'parameters' ? '' : 'curried ',\n                                        \"parameters added yet.\"\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                    lineNumber: 286,\n                                    columnNumber: 17\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                                lineNumber: 285,\n                                columnNumber: 15\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                            lineNumber: 234,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                    lineNumber: 226,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n                lineNumber: 225,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/parameters.tsx\",\n        lineNumber: 168,\n        columnNumber: 5\n    }, this);\n}\n_s(Parameters, \"zWeGCvJ0MDB4rfl2C2JI4Cv6SP8=\");\n_c = Parameters;\nvar _c;\n$RefreshReg$(_c, \"Parameters\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/components/parameters.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/components/terminal.tsx":
/*!*****************************************!*\
  !*** ./src/app/components/terminal.tsx ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TerminalPanel)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _barrel_optimize_names_ChevronDown_ChevronUp_lucide_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=ChevronDown,ChevronUp!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/chevron-down.js\");\n/* harmony import */ var _barrel_optimize_names_ChevronDown_ChevronUp_lucide_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=ChevronDown,ChevronUp!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/chevron-up.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nfunction TerminalPanel() {\n    _s();\n    const [command, setCommand] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [terminalOutput, setTerminalOutput] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [history, setHistory] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [showHistory, setShowHistory] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const inputRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const dropdownRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [selectedIndex, setSelectedIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(-1);\n    const handleRemoveHistoryItem = (indexToRemove)=>{\n        setHistory((prev)=>prev.filter((_, index)=>index !== indexToRemove));\n        if (selectedIndex >= indexToRemove) {\n            setSelectedIndex((prev)=>Math.max(-1, prev - 1));\n        }\n    };\n    const runCommand = async ()=>{\n        if (!command.trim()) return;\n        try {\n            const res = await fetch('/api/command', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    command\n                })\n            });\n            const data = await res.json();\n            setTerminalOutput(data.output || data.error || 'No output');\n            // Update history if command is new\n            setHistory((prev)=>prev.includes(command) ? prev : [\n                    command,\n                    ...prev\n                ]);\n            setCommand('');\n            setShowHistory(false);\n        } catch (error) {\n            console.error('Command error:', error);\n            setTerminalOutput('Error running command.');\n        }\n    };\n    const handleHistorySelect = (cmd)=>{\n        var _inputRef_current;\n        setCommand(cmd);\n        (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : _inputRef_current.focus();\n        setShowHistory(false);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"TerminalPanel.useEffect\": ()=>{\n            const handleClickOutside = {\n                \"TerminalPanel.useEffect.handleClickOutside\": (e)=>{\n                    const target = e.target;\n                    if (!target.closest('#command-input-wrapper')) {\n                        setShowHistory(false);\n                    }\n                }\n            }[\"TerminalPanel.useEffect.handleClickOutside\"];\n            document.addEventListener('mousedown', handleClickOutside);\n            return ({\n                \"TerminalPanel.useEffect\": ()=>document.removeEventListener('mousedown', handleClickOutside)\n            })[\"TerminalPanel.useEffect\"];\n        }\n    }[\"TerminalPanel.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"TerminalPanel.useEffect\": ()=>{\n            if (showHistory && dropdownRef.current) {\n                dropdownRef.current.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'nearest'\n                });\n            }\n        }\n    }[\"TerminalPanel.useEffect\"], [\n        showHistory\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"space-y-2\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"bg-[#1a1a1a] text-gray-200 p-3 rounded font-mono text-sm h-40 overflow-y-auto border border-[#333]\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"pre\", {\n                    className: \"whitespace-pre-wrap\",\n                    children: terminalOutput ? terminalOutput : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        className: \"text-gray-500 italic\",\n                        children: \"No terminal output yet.\"\n                    }, void 0, false, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/terminal.tsx\",\n                        lineNumber: 78,\n                        columnNumber: 13\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/terminal.tsx\",\n                    lineNumber: 74,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/terminal.tsx\",\n                lineNumber: 73,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"form\", {\n                onSubmit: (e)=>{\n                    e.preventDefault();\n                    runCommand();\n                },\n                className: \"flex items-center gap-2 relative\",\n                id: \"command-input-wrapper\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        className: \"text-green-400 font-mono\",\n                        children: \"$\"\n                    }, void 0, false, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/terminal.tsx\",\n                        lineNumber: 91,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"relative flex-1\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                ref: inputRef,\n                                type: \"text\",\n                                value: command,\n                                onChange: (e)=>setCommand(e.target.value),\n                                className: \"w-full bg-[#2d2d2d] text-white px-3 py-1.5 border border-[#444] rounded font-mono text-sm focus:outline-none focus:ring-2 focus:ring-blue-600\",\n                                placeholder: \"Type a command and press Enter\"\n                            }, void 0, false, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/terminal.tsx\",\n                                lineNumber: 94,\n                                columnNumber: 11\n                            }, this),\n                            showHistory && history.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                                ref: dropdownRef,\n                                className: \"absolute bottom-full left-0 mb-1 w-full bg-[#2d2d2d] border border-[#444] rounded shadow-lg z-10 max-h-[160px] overflow-y-auto transition-all duration-150 ease-out\",\n                                children: history.map((item, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                        className: \"flex justify-between items-center px-3 py-1.5 text-sm text-white hover:bg-[#3a3a3a] cursor-pointer font-mono\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                onClick: ()=>handleHistorySelect(item),\n                                                className: \"flex-1 truncate\",\n                                                children: item\n                                            }, void 0, false, {\n                                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/terminal.tsx\",\n                                                lineNumber: 113,\n                                                columnNumber: 19\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                onClick: (e)=>{\n                                                    e.stopPropagation(); // Prevent item selection\n                                                    handleRemoveHistoryItem(index);\n                                                },\n                                                className: \"ml-2 text-red-500 hover:text-red-300 text-xs\",\n                                                title: \"Remove from history\",\n                                                children: \"✖\"\n                                            }, void 0, false, {\n                                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/terminal.tsx\",\n                                                lineNumber: 119,\n                                                columnNumber: 19\n                                            }, this)\n                                        ]\n                                    }, index, true, {\n                                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/terminal.tsx\",\n                                        lineNumber: 109,\n                                        columnNumber: 17\n                                    }, this))\n                            }, void 0, false, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/terminal.tsx\",\n                                lineNumber: 104,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/terminal.tsx\",\n                        lineNumber: 93,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        type: \"button\",\n                        onClick: ()=>setShowHistory(!showHistory),\n                        className: \"text-white hover:text-blue-400\",\n                        children: showHistory ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ChevronDown_ChevronUp_lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                            className: \"w-4 h-4\"\n                        }, void 0, false, {\n                            fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/terminal.tsx\",\n                            lineNumber: 141,\n                            columnNumber: 13\n                        }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ChevronDown_ChevronUp_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                            className: \"w-4 h-4\"\n                        }, void 0, false, {\n                            fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/terminal.tsx\",\n                            lineNumber: 143,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/terminal.tsx\",\n                        lineNumber: 135,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/terminal.tsx\",\n                lineNumber: 83,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/terminal.tsx\",\n        lineNumber: 72,\n        columnNumber: 5\n    }, this);\n}\n_s(TerminalPanel, \"kg+HQO/55WUEx1XZSIRiB2Ky6VE=\");\n_c = TerminalPanel;\nvar _c;\n$RefreshReg$(_c, \"TerminalPanel\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/components/terminal.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/components/topmenu.tsx":
/*!****************************************!*\
  !*** ./src/app/components/topmenu.tsx ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TopMenuBar)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _barrel_optimize_names_ArrowRight_FileText_Play_lucide_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowRight,FileText,Play!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/file-text.js\");\n/* harmony import */ var _barrel_optimize_names_ArrowRight_FileText_Play_lucide_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowRight,FileText,Play!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/play.js\");\n/* harmony import */ var _barrel_optimize_names_ArrowRight_FileText_Play_lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowRight,FileText,Play!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/arrow-right.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nfunction TopMenuBar(param) {\n    let { onRun, onNextBlock, onSave } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full bg-[#1e1e1e] text-white flex items-center px-4 py-2 shadow-md\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex space-x-2 text-sm font-medium\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                    onClick: onSave,\n                    className: \"flex items-center gap-1 px-3 py-1.5 rounded hover:bg-[#2d2d2d]\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowRight_FileText_Play_lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                            className: \"w-4 h-4 text-green-500\"\n                        }, void 0, false, {\n                            fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/topmenu.tsx\",\n                            lineNumber: 22,\n                            columnNumber: 11\n                        }, this),\n                        \"Save As\"\n                    ]\n                }, void 0, true, {\n                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/topmenu.tsx\",\n                    lineNumber: 18,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                    onClick: onRun,\n                    className: \"flex items-center gap-1 px-3 py-1.5 rounded hover:bg-[#2d2d2d]\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowRight_FileText_Play_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                            className: \"w-4 h-4 text-green-500\"\n                        }, void 0, false, {\n                            fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/topmenu.tsx\",\n                            lineNumber: 29,\n                            columnNumber: 11\n                        }, this),\n                        \"Run\"\n                    ]\n                }, void 0, true, {\n                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/topmenu.tsx\",\n                    lineNumber: 25,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                    onClick: onNextBlock,\n                    className: \"flex items-center gap-1 px-3 py-1.5 rounded hover:bg-[#2d2d2d]\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowRight_FileText_Play_lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                            className: \"w-4 h-4 text-green-500\"\n                        }, void 0, false, {\n                            fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/topmenu.tsx\",\n                            lineNumber: 36,\n                            columnNumber: 11\n                        }, this),\n                        \"Next Block (F9)\"\n                    ]\n                }, void 0, true, {\n                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/topmenu.tsx\",\n                    lineNumber: 32,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/topmenu.tsx\",\n            lineNumber: 17,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/components/topmenu.tsx\",\n        lineNumber: 16,\n        columnNumber: 5\n    }, this);\n}\n_c = TopMenuBar;\nvar _c;\n$RefreshReg$(_c, \"TopMenuBar\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvY29tcG9uZW50cy90b3BtZW51LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUEwRDtBQUNoQztBQVFYLFNBQVNJLFdBQVcsS0FJakI7UUFKaUIsRUFDakNDLEtBQUssRUFDTEMsV0FBVyxFQUNYQyxNQUFNLEVBQ1UsR0FKaUI7SUFLakMscUJBQ0UsOERBQUNDO1FBQUlDLFdBQVU7a0JBQ2IsNEVBQUNEO1lBQUlDLFdBQVU7OzhCQUNiLDhEQUFDQztvQkFDQ0MsU0FBU0o7b0JBQ1RFLFdBQVU7O3NDQUVWLDhEQUFDVCxvR0FBUUE7NEJBQUNTLFdBQVU7Ozs7Ozt3QkFBMkI7Ozs7Ozs7OEJBR2pELDhEQUFDQztvQkFDQ0MsU0FBU047b0JBQ1RJLFdBQVU7O3NDQUVWLDhEQUFDUixvR0FBSUE7NEJBQUNRLFdBQVU7Ozs7Ozt3QkFBMkI7Ozs7Ozs7OEJBRzdDLDhEQUFDQztvQkFDQ0MsU0FBU0w7b0JBQ1RHLFdBQVU7O3NDQUVWLDhEQUFDUCxvR0FBVUE7NEJBQUNPLFdBQVU7Ozs7Ozt3QkFBMkI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU0zRDtLQWhDd0JMIiwic291cmNlcyI6WyIvaG9tZS9rZXYvcmVwb3MvT1NTL2NoaWEtc2ltdWxhdG9yLXVpL3NpbXVsYXRvci11aS9zcmMvYXBwL2NvbXBvbmVudHMvdG9wbWVudS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsZVRleHQsIFBsYXksIEFycm93UmlnaHQgfSBmcm9tIFwibHVjaWRlLXJlYWN0XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmludGVyZmFjZSBUb3BNZW51QmFyUHJvcHMge1xuICBvblJ1bjogKCkgPT4gdm9pZDtcbiAgb25OZXh0QmxvY2s6ICgpID0+IHZvaWQ7XG4gIG9uU2F2ZTogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVG9wTWVudUJhcih7XG4gIG9uUnVuLFxuICBvbk5leHRCbG9jayxcbiAgb25TYXZlLFxufTogVG9wTWVudUJhclByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ3LWZ1bGwgYmctWyMxZTFlMWVdIHRleHQtd2hpdGUgZmxleCBpdGVtcy1jZW50ZXIgcHgtNCBweS0yIHNoYWRvdy1tZFwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IHNwYWNlLXgtMiB0ZXh0LXNtIGZvbnQtbWVkaXVtXCI+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBvbkNsaWNrPXtvblNhdmV9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTEgcHgtMyBweS0xLjUgcm91bmRlZCBob3ZlcjpiZy1bIzJkMmQyZF1cIlxuICAgICAgICA+XG4gICAgICAgICAgPEZpbGVUZXh0IGNsYXNzTmFtZT1cInctNCBoLTQgdGV4dC1ncmVlbi01MDBcIiAvPlxuICAgICAgICAgIFNhdmUgQXNcbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBvbkNsaWNrPXtvblJ1bn1cbiAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMSBweC0zIHB5LTEuNSByb3VuZGVkIGhvdmVyOmJnLVsjMmQyZDJkXVwiXG4gICAgICAgID5cbiAgICAgICAgICA8UGxheSBjbGFzc05hbWU9XCJ3LTQgaC00IHRleHQtZ3JlZW4tNTAwXCIgLz5cbiAgICAgICAgICBSdW5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBvbkNsaWNrPXtvbk5leHRCbG9ja31cbiAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMSBweC0zIHB5LTEuNSByb3VuZGVkIGhvdmVyOmJnLVsjMmQyZDJkXVwiXG4gICAgICAgID5cbiAgICAgICAgICA8QXJyb3dSaWdodCBjbGFzc05hbWU9XCJ3LTQgaC00IHRleHQtZ3JlZW4tNTAwXCIgLz5cbiAgICAgICAgICBOZXh0IEJsb2NrIChGOSlcbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdLCJuYW1lcyI6WyJGaWxlVGV4dCIsIlBsYXkiLCJBcnJvd1JpZ2h0IiwiUmVhY3QiLCJUb3BNZW51QmFyIiwib25SdW4iLCJvbk5leHRCbG9jayIsIm9uU2F2ZSIsImRpdiIsImNsYXNzTmFtZSIsImJ1dHRvbiIsIm9uQ2xpY2siXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/components/topmenu.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Home)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dynamic */ \"(app-pages-browser)/./node_modules/next/dist/api/app-dynamic.js\");\n/* harmony import */ var _components_parameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/parameters */ \"(app-pages-browser)/./src/app/components/parameters.tsx\");\n/* harmony import */ var _components_topmenu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/topmenu */ \"(app-pages-browser)/./src/app/components/topmenu.tsx\");\n/* harmony import */ var _components_terminal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/terminal */ \"(app-pages-browser)/./src/app/components/terminal.tsx\");\n/* harmony import */ var _components_output__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/output */ \"(app-pages-browser)/./src/app/components/output.tsx\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_components_parameters__WEBPACK_IMPORTED_MODULE_3__]);\n_components_parameters__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n// import { compileProgram } from './ChiaCompiler';\n\n\nconst MonacoEditor = (0,next_dynamic__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(()=>__webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_monaco-editor_react_dist_index_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! @monaco-editor/react */ \"(app-pages-browser)/./node_modules/@monaco-editor/react/dist/index.mjs\")), {\n    loadableGenerated: {\n        modules: [\n            \"app/page.tsx -> \" + \"@monaco-editor/react\"\n        ]\n    },\n    ssr: false\n});\n_c = MonacoEditor;\nfunction Home() {\n    _s();\n    const editorRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [programSource, setProgramSource] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [programParameters, setProgramParameters] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [programCurriedParameters, setProgramCurriedParameters] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentBlockHeight, setCurrentBlockHeight] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [currentAddress, setCurrentAddress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [history, setHistory] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [conditions, setConditions] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [compiledProgram, setCompiledProgram] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [compiledProgramText, setCompiledProgramText] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [cost, setCost] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [errorMessage, setErrorMessage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [puzzleHash, setPuzzleHash] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [puzzleAddress, setPuzzleAddress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [activeTab, setActiveTab] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('output');\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Home.useEffect\": ()=>{\n            fetchBlockHeight();\n            fetchCurrentAddress();\n        }\n    }[\"Home.useEffect\"], []);\n    const fetchCurrentAddress = async ()=>{\n        try {\n            const res = await fetch('/api/address');\n            const data = await res.json();\n            if (data.output) {\n                setCurrentAddress(data.output);\n            }\n        } catch (err) {\n            console.error('Address fetch error:', err);\n        }\n    };\n    const fetchBlockHeight = async ()=>{\n        try {\n            const res = await fetch('/api/blockheight');\n            const data = await res.json();\n            if (data.output) {\n                setCurrentBlockHeight(parseInt(data.output));\n            }\n        } catch (err) {\n            console.error('Block height error:', err);\n        }\n    };\n    const nextBlock = async ()=>{\n        try {\n            await fetch('/api/nextblock', {\n                method: 'POST'\n            });\n            await fetchBlockHeight();\n        } catch (err) {\n            console.error('Next block error:', err);\n        }\n    };\n    const handleCompileAndRun = ()=>{\n    // try {\n    //   const source = editorRef.current?.getValue() ?? '';\n    //   if (!source) return;\n    //   setProgramSource(source);\n    //   const clvm = new sdk.Clvm();\n    //   const curried = programCurriedParameters.map((param) => {\n    //     if (param.type === 'Text') return param.value;\n    //     if (param.type === 'Int') return clvm.int(BigInt(param.value?.toInt?.() ?? 0));\n    //     if (param.type === 'Nil') return clvm.nil();\n    //     return param.value;\n    //   });\n    //   const params = programParameters.map((param) => {\n    //     if (param.type === 'Text') return param.value;\n    //     if (param.type === 'Int') return clvm.int(BigInt(param.value?.toInt?.() ?? 0));\n    //     if (param.type === 'Nil') return clvm.nil();\n    //     return param.value;\n    //   });\n    //   // const result = compileProgram(source, curried, params, 'txch');\n    //   const historyItem: HistoryItem = {\n    //     id: Date.now(),\n    //     date: new Date()\n    //       .toLocaleString('en-GB', {\n    //         year: 'numeric',\n    //         month: '2-digit',\n    //         day: '2-digit',\n    //         hour: '2-digit',\n    //         minute: '2-digit',\n    //         second: '2-digit',\n    //         hour12: false,\n    //       })\n    //       .replace(',', ''),\n    //     source,\n    //     output: result.errorMessage ? 'Failed' : result.conditions.unparse(),\n    //     errorMessage: result.errorMessage || '',\n    //     cost: result.cost,\n    //   };\n    //   setHistory((prev) => [...prev, historyItem]);\n    //   setCost(result.cost);\n    //   setConditions(result.conditions);\n    //   setPuzzleHash(result.puzzleHash);\n    //   setErrorMessage(result.errorMessage);\n    //   setPuzzleAddress(result.puzzleAddress);\n    //} catch (e) {\n    //  console.error('Compile error:', e);\n    //}\n    };\n    const handleEditorDidMount = (editor, monacoInstance)=>{\n        editorRef.current = editor;\n        registerChialisp(monacoInstance);\n        editor.addCommand(monacoInstance.KeyCode.F9, ()=>{\n            nextBlock();\n            fetchBlockHeight();\n        });\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen bg-[#252526] text-white pb-12\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_topmenu__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                onRun: handleCompileAndRun,\n                onNextBlock: ()=>{\n                    nextBlock();\n                    fetchBlockHeight();\n                },\n                onSave: ()=>{\n                    var _editorRef_current;\n                    var _editorRef_current_getValue;\n                    const source = (_editorRef_current_getValue = (_editorRef_current = editorRef.current) === null || _editorRef_current === void 0 ? void 0 : _editorRef_current.getValue()) !== null && _editorRef_current_getValue !== void 0 ? _editorRef_current_getValue : '';\n                    const blob = new Blob([\n                        source\n                    ], {\n                        type: 'text/plain'\n                    });\n                    const url = URL.createObjectURL(blob);\n                    const a = document.createElement('a');\n                    a.href = url;\n                    a.download = 'program.clsp';\n                    a.click();\n                    URL.revokeObjectURL(url);\n                }\n            }, void 0, false, {\n                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                lineNumber: 157,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex justify-end items-center gap-6 px-4 py-1 bg-[#252526] text-sm text-gray-400 border-b border-[#333]\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                className: \"text-white\",\n                                children: \"Current Block:\"\n                            }, void 0, false, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                                lineNumber: 178,\n                                columnNumber: 11\n                            }, this),\n                            ' ',\n                            currentBlockHeight !== null && currentBlockHeight !== void 0 ? currentBlockHeight : '...'\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                        lineNumber: 177,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                className: \"text-white\",\n                                children: \"Current Address:\"\n                            }, void 0, false, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                                lineNumber: 182,\n                                columnNumber: 11\n                            }, this),\n                            ' ',\n                            currentAddress || '...'\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                        lineNumber: 181,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                lineNumber: 176,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex flex-col\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex flex-col md:flex-row\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"w-full flex-shrink-0 md:w-[33%] md:max-w-[400px]\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_parameters__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                    setProgramParameters: setProgramParameters,\n                                    setProgramCurriedParameters: setProgramCurriedParameters\n                                }, void 0, false, {\n                                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                                    lineNumber: 193,\n                                    columnNumber: 13\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                                lineNumber: 192,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"w-full md:w-2/3 bg-[#1e1e1e] p-4 text-white\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                        className: \"text-lg font-semibold mb-4\",\n                                        children: \"Source Code\"\n                                    }, void 0, false, {\n                                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                                        lineNumber: 201,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"h-[300px] border border-[#444] rounded overflow-hidden\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MonacoEditor, {\n                                            defaultLanguage: \"chialisp\",\n                                            theme: \"vs-dark\",\n                                            defaultValue: programSource,\n                                            onMount: handleEditorDidMount,\n                                            options: {\n                                                fontSize: 13,\n                                                minimap: {\n                                                    enabled: false\n                                                },\n                                                lineNumbers: 'on',\n                                                scrollBeyondLastLine: false,\n                                                wordWrap: 'on',\n                                                automaticLayout: true,\n                                                fontFamily: 'monospace',\n                                                padding: {\n                                                    top: 10,\n                                                    bottom: 10\n                                                }\n                                            }\n                                        }, void 0, false, {\n                                            fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                                            lineNumber: 203,\n                                            columnNumber: 15\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                                        lineNumber: 202,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                                lineNumber: 200,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                        lineNumber: 190,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"bg-[#1e1e1e] border-t border-[#333] p-4\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex border-b border-[#333] mb-2\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        onClick: ()=>setActiveTab('output'),\n                                        className: \"px-4 py-2 text-sm font-medium \".concat(activeTab === 'output' ? 'bg-[#2d2d2d] text-white border-b-2 border-blue-600' : 'text-gray-400 hover:text-gray-200'),\n                                        children: \"Output\"\n                                    }, void 0, false, {\n                                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                                        lineNumber: 227,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        onClick: ()=>setActiveTab('terminal'),\n                                        className: \"px-4 py-2 text-sm font-medium \".concat(activeTab === 'terminal' ? 'bg-[#2d2d2d] text-white border-b-2 border-blue-600' : 'text-gray-400 hover:text-gray-200'),\n                                        children: \"Terminal\"\n                                    }, void 0, false, {\n                                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                                        lineNumber: 237,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                                lineNumber: 226,\n                                columnNumber: 11\n                            }, this),\n                            activeTab === 'output' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"h-64\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_output__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                                    puzzleHash: puzzleHash,\n                                    puzzleAddress: puzzleAddress,\n                                    conditions: conditions,\n                                    cost: cost,\n                                    errorMessage: errorMessage\n                                }, void 0, false, {\n                                    fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                                    lineNumber: 251,\n                                    columnNumber: 15\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                                lineNumber: 250,\n                                columnNumber: 13\n                            }, this),\n                            activeTab === 'terminal' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_terminal__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {}, void 0, false, {\n                                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                                lineNumber: 261,\n                                columnNumber: 40\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                        lineNumber: 224,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n                lineNumber: 188,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/kev/repos/OSS/chia-simulator-ui/simulator-ui/src/app/page.tsx\",\n        lineNumber: 156,\n        columnNumber: 5\n    }, this);\n}\n_s(Home, \"r4sxNsxE6MPVyYOGpZUZ3igFrnI=\");\n_c1 = Home;\n// Register Chialisp language (outside component)\nfunction registerChialisp(monacoInstance) {\n    monacoInstance.languages.register({\n        id: 'chialisp'\n    });\n    monacoInstance.languages.setMonarchTokensProvider('chialisp', {\n        tokenizer: {\n            root: [\n                [\n                    /\\b(mod|defun|let|if|quote|lambda|include)\\b/,\n                    'keyword'\n                ],\n                [\n                    /\\b(true|false|nil)\\b/,\n                    'constant'\n                ],\n                [\n                    /[()]/,\n                    'delimiter'\n                ],\n                [\n                    /\\b\\d+\\b/,\n                    'number'\n                ],\n                [\n                    /\"[^\"]*\"/,\n                    'string'\n                ],\n                [\n                    /[a-zA-Z_+\\-*\\/=<>!?$%&|^~]+/,\n                    'identifier'\n                ]\n            ]\n        }\n    });\n    monacoInstance.languages.setLanguageConfiguration('chialisp', {\n        comments: {\n            lineComment: ';'\n        },\n        brackets: [\n            [\n                '(',\n                ')'\n            ]\n        ]\n    });\n}\nvar _c, _c1;\n$RefreshReg$(_c, \"MonacoEditor\");\n$RefreshReg$(_c1, \"Home\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/page.tsx\n"));

/***/ }),

/***/ "(shared)/./node_modules/next/dist/server/app-render/async-local-storage.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/server/app-render/async-local-storage.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    bindSnapshot: function() {\n        return bindSnapshot;\n    },\n    createAsyncLocalStorage: function() {\n        return createAsyncLocalStorage;\n    },\n    createSnapshot: function() {\n        return createSnapshot;\n    }\n});\nconst sharedAsyncLocalStorageNotAvailableError = Object.defineProperty(new Error('Invariant: AsyncLocalStorage accessed in runtime where it is not available'), \"__NEXT_ERROR_CODE\", {\n    value: \"E504\",\n    enumerable: false,\n    configurable: true\n});\nclass FakeAsyncLocalStorage {\n    disable() {\n        throw sharedAsyncLocalStorageNotAvailableError;\n    }\n    getStore() {\n        // This fake implementation of AsyncLocalStorage always returns `undefined`.\n        return undefined;\n    }\n    run() {\n        throw sharedAsyncLocalStorageNotAvailableError;\n    }\n    exit() {\n        throw sharedAsyncLocalStorageNotAvailableError;\n    }\n    enterWith() {\n        throw sharedAsyncLocalStorageNotAvailableError;\n    }\n    static bind(fn) {\n        return fn;\n    }\n}\nconst maybeGlobalAsyncLocalStorage = typeof globalThis !== 'undefined' && globalThis.AsyncLocalStorage;\nfunction createAsyncLocalStorage() {\n    if (maybeGlobalAsyncLocalStorage) {\n        return new maybeGlobalAsyncLocalStorage();\n    }\n    return new FakeAsyncLocalStorage();\n}\nfunction bindSnapshot(fn) {\n    if (maybeGlobalAsyncLocalStorage) {\n        return maybeGlobalAsyncLocalStorage.bind(fn);\n    }\n    return FakeAsyncLocalStorage.bind(fn);\n}\nfunction createSnapshot() {\n    if (maybeGlobalAsyncLocalStorage) {\n        return maybeGlobalAsyncLocalStorage.snapshot();\n    }\n    return function(fn, ...args) {\n        return fn(...args);\n    };\n}\n\n//# sourceMappingURL=async-local-storage.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9hcHAtcmVuZGVyL2FzeW5jLWxvY2FsLXN0b3JhZ2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixNQUFNLENBSUw7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9ob21lL2tldi9yZXBvcy9PU1MvY2hpYS1zaW11bGF0b3ItdWkvc2ltdWxhdG9yLXVpL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL2FwcC1yZW5kZXIvYXN5bmMtbG9jYWwtc3RvcmFnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGJpbmRTbmFwc2hvdDogbnVsbCxcbiAgICBjcmVhdGVBc3luY0xvY2FsU3RvcmFnZTogbnVsbCxcbiAgICBjcmVhdGVTbmFwc2hvdDogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBiaW5kU25hcHNob3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYmluZFNuYXBzaG90O1xuICAgIH0sXG4gICAgY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2U7XG4gICAgfSxcbiAgICBjcmVhdGVTbmFwc2hvdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVTbmFwc2hvdDtcbiAgICB9XG59KTtcbmNvbnN0IHNoYXJlZEFzeW5jTG9jYWxTdG9yYWdlTm90QXZhaWxhYmxlRXJyb3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3IEVycm9yKCdJbnZhcmlhbnQ6IEFzeW5jTG9jYWxTdG9yYWdlIGFjY2Vzc2VkIGluIHJ1bnRpbWUgd2hlcmUgaXQgaXMgbm90IGF2YWlsYWJsZScpLCBcIl9fTkVYVF9FUlJPUl9DT0RFXCIsIHtcbiAgICB2YWx1ZTogXCJFNTA0XCIsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcbmNsYXNzIEZha2VBc3luY0xvY2FsU3RvcmFnZSB7XG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgdGhyb3cgc2hhcmVkQXN5bmNMb2NhbFN0b3JhZ2VOb3RBdmFpbGFibGVFcnJvcjtcbiAgICB9XG4gICAgZ2V0U3RvcmUoKSB7XG4gICAgICAgIC8vIFRoaXMgZmFrZSBpbXBsZW1lbnRhdGlvbiBvZiBBc3luY0xvY2FsU3RvcmFnZSBhbHdheXMgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcnVuKCkge1xuICAgICAgICB0aHJvdyBzaGFyZWRBc3luY0xvY2FsU3RvcmFnZU5vdEF2YWlsYWJsZUVycm9yO1xuICAgIH1cbiAgICBleGl0KCkge1xuICAgICAgICB0aHJvdyBzaGFyZWRBc3luY0xvY2FsU3RvcmFnZU5vdEF2YWlsYWJsZUVycm9yO1xuICAgIH1cbiAgICBlbnRlcldpdGgoKSB7XG4gICAgICAgIHRocm93IHNoYXJlZEFzeW5jTG9jYWxTdG9yYWdlTm90QXZhaWxhYmxlRXJyb3I7XG4gICAgfVxuICAgIHN0YXRpYyBiaW5kKGZuKSB7XG4gICAgICAgIHJldHVybiBmbjtcbiAgICB9XG59XG5jb25zdCBtYXliZUdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMuQXN5bmNMb2NhbFN0b3JhZ2U7XG5mdW5jdGlvbiBjcmVhdGVBc3luY0xvY2FsU3RvcmFnZSgpIHtcbiAgICBpZiAobWF5YmVHbG9iYWxBc3luY0xvY2FsU3RvcmFnZSkge1xuICAgICAgICByZXR1cm4gbmV3IG1heWJlR2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBGYWtlQXN5bmNMb2NhbFN0b3JhZ2UoKTtcbn1cbmZ1bmN0aW9uIGJpbmRTbmFwc2hvdChmbikge1xuICAgIGlmIChtYXliZUdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlKSB7XG4gICAgICAgIHJldHVybiBtYXliZUdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlLmJpbmQoZm4pO1xuICAgIH1cbiAgICByZXR1cm4gRmFrZUFzeW5jTG9jYWxTdG9yYWdlLmJpbmQoZm4pO1xufVxuZnVuY3Rpb24gY3JlYXRlU25hcHNob3QoKSB7XG4gICAgaWYgKG1heWJlR2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG1heWJlR2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2Uuc25hcHNob3QoKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGZuLCAuLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBmbiguLi5hcmdzKTtcbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3luYy1sb2NhbC1zdG9yYWdlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(shared)/./node_modules/next/dist/server/app-render/async-local-storage.js\n"));

/***/ }),

/***/ "(shared)/./node_modules/next/dist/server/app-render/work-async-storage-instance.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/dist/server/app-render/work-async-storage-instance.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"workAsyncStorageInstance\", ({\n    enumerable: true,\n    get: function() {\n        return workAsyncStorageInstance;\n    }\n}));\nconst _asynclocalstorage = __webpack_require__(/*! ./async-local-storage */ \"(shared)/./node_modules/next/dist/server/app-render/async-local-storage.js\");\nconst workAsyncStorageInstance = (0, _asynclocalstorage.createAsyncLocalStorage)();\n\n//# sourceMappingURL=work-async-storage-instance.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9hcHAtcmVuZGVyL3dvcmstYXN5bmMtc3RvcmFnZS1pbnN0YW5jZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDREQUEyRDtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDJCQUEyQixtQkFBTyxDQUFDLHlHQUF1QjtBQUMxRDs7QUFFQSIsInNvdXJjZXMiOlsiL2hvbWUva2V2L3JlcG9zL09TUy9jaGlhLXNpbXVsYXRvci11aS9zaW11bGF0b3ItdWkvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvYXBwLXJlbmRlci93b3JrLWFzeW5jLXN0b3JhZ2UtaW5zdGFuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3b3JrQXN5bmNTdG9yYWdlSW5zdGFuY2VcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHdvcmtBc3luY1N0b3JhZ2VJbnN0YW5jZTtcbiAgICB9XG59KTtcbmNvbnN0IF9hc3luY2xvY2Fsc3RvcmFnZSA9IHJlcXVpcmUoXCIuL2FzeW5jLWxvY2FsLXN0b3JhZ2VcIik7XG5jb25zdCB3b3JrQXN5bmNTdG9yYWdlSW5zdGFuY2UgPSAoMCwgX2FzeW5jbG9jYWxzdG9yYWdlLmNyZWF0ZUFzeW5jTG9jYWxTdG9yYWdlKSgpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD13b3JrLWFzeW5jLXN0b3JhZ2UtaW5zdGFuY2UuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(shared)/./node_modules/next/dist/server/app-render/work-async-storage-instance.js\n"));

/***/ }),

/***/ "(shared)/./node_modules/next/dist/server/app-render/work-async-storage.external.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/dist/server/app-render/work-async-storage.external.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"workAsyncStorage\", ({\n    enumerable: true,\n    get: function() {\n        return _workasyncstorageinstance.workAsyncStorageInstance;\n    }\n}));\nconst _workasyncstorageinstance = __webpack_require__(/*! ./work-async-storage-instance */ \"(shared)/./node_modules/next/dist/server/app-render/work-async-storage-instance.js\");\n\n//# sourceMappingURL=work-async-storage.external.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9hcHAtcmVuZGVyL3dvcmstYXN5bmMtc3RvcmFnZS5leHRlcm5hbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLG9EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLGtDQUFrQyxtQkFBTyxDQUFDLHlIQUErQjs7QUFFekUiLCJzb3VyY2VzIjpbIi9ob21lL2tldi9yZXBvcy9PU1MvY2hpYS1zaW11bGF0b3ItdWkvc2ltdWxhdG9yLXVpL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL2FwcC1yZW5kZXIvd29yay1hc3luYy1zdG9yYWdlLmV4dGVybmFsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwid29ya0FzeW5jU3RvcmFnZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3dvcmthc3luY3N0b3JhZ2VpbnN0YW5jZS53b3JrQXN5bmNTdG9yYWdlSW5zdGFuY2U7XG4gICAgfVxufSk7XG5jb25zdCBfd29ya2FzeW5jc3RvcmFnZWluc3RhbmNlID0gcmVxdWlyZShcIi4vd29yay1hc3luYy1zdG9yYWdlLWluc3RhbmNlXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD13b3JrLWFzeW5jLXN0b3JhZ2UuZXh0ZXJuYWwuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(shared)/./node_modules/next/dist/server/app-render/work-async-storage.external.js\n"));

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["main-app"], () => (__webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fhome%2Fkev%2Frepos%2FOSS%2Fchia-simulator-ui%2Fsimulator-ui%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);